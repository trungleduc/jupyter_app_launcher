{"version":3,"file":"8929.1209cf6.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@lumino/datagrid/dist/index.es6.js"],"sourcesContent":["import { Platform, ClipboardExt, ElementExt } from '@lumino/domutils';\nimport { getKeyboardLayout } from '@lumino/keyboard';\nimport { Drag } from '@lumino/dragdrop';\nimport { some, ArrayExt } from '@lumino/algorithm';\nimport { Signal } from '@lumino/signaling';\nimport { Widget, ScrollBar, GridLayout } from '@lumino/widgets';\nimport { ConflatableMessage, MessageLoop } from '@lumino/messaging';\n\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * A basic implementation of a data grid key handler.\n *\n * #### Notes\n * This class may be subclassed and customized as needed.\n */\nclass BasicKeyHandler {\n    constructor() {\n        this._disposed = false;\n    }\n    /**\n     * Whether the key handler is disposed.\n     */\n    get isDisposed() {\n        return this._disposed;\n    }\n    /**\n     * Dispose of the resources held by the key handler.\n     */\n    dispose() {\n        this._disposed = true;\n    }\n    /**\n     * Handle the key down event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keydown event of interest.\n     *\n     * #### Notes\n     * This will not be called if the mouse button is pressed.\n     */\n    onKeyDown(grid, event) {\n        // if grid is editable and cell selection available, start cell editing\n        // on key press (letters, numbers and space only)\n        if (grid.editable &&\n            grid.selectionModel.cursorRow !== -1 &&\n            grid.selectionModel.cursorColumn !== -1) {\n            const input = String.fromCharCode(event.keyCode);\n            if (/[a-zA-Z0-9-_ ]/.test(input)) {\n                const row = grid.selectionModel.cursorRow;\n                const column = grid.selectionModel.cursorColumn;\n                const cell = {\n                    grid: grid,\n                    row: row,\n                    column: column\n                };\n                grid.editorController.edit(cell);\n                if (getKeyboardLayout().keyForKeydownEvent(event) === 'Space') {\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n                return;\n            }\n        }\n        switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n            case 'ArrowLeft':\n                this.onArrowLeft(grid, event);\n                break;\n            case 'ArrowRight':\n                this.onArrowRight(grid, event);\n                break;\n            case 'ArrowUp':\n                this.onArrowUp(grid, event);\n                break;\n            case 'ArrowDown':\n                this.onArrowDown(grid, event);\n                break;\n            case 'PageUp':\n                this.onPageUp(grid, event);\n                break;\n            case 'PageDown':\n                this.onPageDown(grid, event);\n                break;\n            case 'Escape':\n                this.onEscape(grid, event);\n                break;\n            case 'Delete':\n                this.onDelete(grid, event);\n                break;\n            case 'C':\n                this.onKeyC(grid, event);\n                break;\n            case 'Enter':\n                if (grid.selectionModel) {\n                    grid.moveCursor(event.shiftKey ? 'up' : 'down');\n                    grid.scrollToCursor();\n                }\n                break;\n            case 'Tab':\n                if (grid.selectionModel) {\n                    grid.moveCursor(event.shiftKey ? 'left' : 'right');\n                    grid.scrollToCursor();\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n                break;\n        }\n    }\n    /**\n     * Handle the `'ArrowLeft'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    onArrowLeft(grid, event) {\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Fetch the selection model.\n        let model = grid.selectionModel;\n        // Fetch the modifier flags.\n        let shift = event.shiftKey;\n        let accel = Platform.accelKey(event);\n        // Handle no model with the accel modifier.\n        if (!model && accel) {\n            grid.scrollTo(0, grid.scrollY);\n            return;\n        }\n        // Handle no model and no modifier. (ignore shift)\n        if (!model) {\n            grid.scrollByStep('left');\n            return;\n        }\n        // Fetch the selection mode.\n        let mode = model.selectionMode;\n        // Handle the row selection mode with accel key.\n        if (mode === 'row' && accel) {\n            grid.scrollTo(0, grid.scrollY);\n            return;\n        }\n        // Handle the row selection mode with no modifier. (ignore shift)\n        if (mode === 'row') {\n            grid.scrollByStep('left');\n            return;\n        }\n        // Fetch the cursor and selection.\n        let r = model.cursorRow;\n        let c = model.cursorColumn;\n        let cs = model.currentSelection();\n        // Set up the selection variables.\n        let r1;\n        let r2;\n        let c1;\n        let c2;\n        let cr;\n        let cc;\n        let clear;\n        // Dispatch based on the modifier keys.\n        if (accel && shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 - 1 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (accel) {\n            r1 = r;\n            r2 = r;\n            c1 = 0;\n            c2 = 0;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        else {\n            r1 = r;\n            r2 = r;\n            c1 = c - 1;\n            c2 = c - 1;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        // Create the new selection.\n        model.select({ r1, c1, r2, c2, cursorRow: cr, cursorColumn: cc, clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid appropriately.\n        if (shift || mode === 'column') {\n            grid.scrollToColumn(cs.c2);\n        }\n        else {\n            grid.scrollToCursor();\n        }\n    }\n    /**\n     * Handle the `'ArrowRight'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    onArrowRight(grid, event) {\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Fetch the selection model.\n        let model = grid.selectionModel;\n        // Fetch the modifier flags.\n        let shift = event.shiftKey;\n        let accel = Platform.accelKey(event);\n        // Handle no model with the accel modifier.\n        if (!model && accel) {\n            grid.scrollTo(grid.maxScrollX, grid.scrollY);\n            return;\n        }\n        // Handle no model and no modifier. (ignore shift)\n        if (!model) {\n            grid.scrollByStep('right');\n            return;\n        }\n        // Fetch the selection mode.\n        let mode = model.selectionMode;\n        // Handle the row selection model with accel key.\n        if (mode === 'row' && accel) {\n            grid.scrollTo(grid.maxScrollX, grid.scrollY);\n            return;\n        }\n        // Handle the row selection mode with no modifier. (ignore shift)\n        if (mode === 'row') {\n            grid.scrollByStep('right');\n            return;\n        }\n        // Fetch the cursor and selection.\n        let r = model.cursorRow;\n        let c = model.cursorColumn;\n        let cs = model.currentSelection();\n        // Set up the selection variables.\n        let r1;\n        let r2;\n        let c1;\n        let c2;\n        let cr;\n        let cc;\n        let clear;\n        // Dispatch based on the modifier keys.\n        if (accel && shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = Infinity;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 + 1 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (accel) {\n            r1 = r;\n            r2 = r;\n            c1 = Infinity;\n            c2 = Infinity;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        else {\n            r1 = r;\n            r2 = r;\n            c1 = c + 1;\n            c2 = c + 1;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        // Create the new selection.\n        model.select({ r1, c1, r2, c2, cursorRow: cr, cursorColumn: cc, clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid appropriately.\n        if (shift || mode === 'column') {\n            grid.scrollToColumn(cs.c2);\n        }\n        else {\n            grid.scrollToCursor();\n        }\n    }\n    /**\n     * Handle the `'ArrowUp'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    onArrowUp(grid, event) {\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Fetch the selection model.\n        let model = grid.selectionModel;\n        // Fetch the modifier flags.\n        let shift = event.shiftKey;\n        let accel = Platform.accelKey(event);\n        // Handle no model with the accel modifier.\n        if (!model && accel) {\n            grid.scrollTo(grid.scrollX, 0);\n            return;\n        }\n        // Handle no model and no modifier. (ignore shift)\n        if (!model) {\n            grid.scrollByStep('up');\n            return;\n        }\n        // Fetch the selection mode.\n        let mode = model.selectionMode;\n        // Handle the column selection mode with accel key.\n        if (mode === 'column' && accel) {\n            grid.scrollTo(grid.scrollX, 0);\n            return;\n        }\n        // Handle the column selection mode with no modifier. (ignore shift)\n        if (mode === 'column') {\n            grid.scrollByStep('up');\n            return;\n        }\n        // Fetch the cursor and selection.\n        let r = model.cursorRow;\n        let c = model.cursorColumn;\n        let cs = model.currentSelection();\n        // Set up the selection variables.\n        let r1;\n        let r2;\n        let c1;\n        let c2;\n        let cr;\n        let cc;\n        let clear;\n        // Dispatch based on the modifier keys.\n        if (accel && shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 - 1 : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (accel) {\n            r1 = 0;\n            r2 = 0;\n            c1 = c;\n            c2 = c;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        else {\n            r1 = r - 1;\n            r2 = r - 1;\n            c1 = c;\n            c2 = c;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        // Create the new selection.\n        model.select({ r1, c1, r2, c2, cursorRow: cr, cursorColumn: cc, clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid appropriately.\n        if (shift || mode === 'row') {\n            grid.scrollToRow(cs.r2);\n        }\n        else {\n            grid.scrollToCursor();\n        }\n    }\n    /**\n     * Handle the `'ArrowDown'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    onArrowDown(grid, event) {\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Fetch the selection model.\n        let model = grid.selectionModel;\n        // Fetch the modifier flags.\n        let shift = event.shiftKey;\n        let accel = Platform.accelKey(event);\n        // Handle no model with the accel modifier.\n        if (!model && accel) {\n            grid.scrollTo(grid.scrollX, grid.maxScrollY);\n            return;\n        }\n        // Handle no model and no modifier. (ignore shift)\n        if (!model) {\n            grid.scrollByStep('down');\n            return;\n        }\n        // Fetch the selection mode.\n        let mode = model.selectionMode;\n        // Handle the column selection mode with accel key.\n        if (mode === 'column' && accel) {\n            grid.scrollTo(grid.scrollX, grid.maxScrollY);\n            return;\n        }\n        // Handle the column selection mode with no modifier. (ignore shift)\n        if (mode === 'column') {\n            grid.scrollByStep('down');\n            return;\n        }\n        // Fetch the cursor and selection.\n        let r = model.cursorRow;\n        let c = model.cursorColumn;\n        let cs = model.currentSelection();\n        // Set up the selection variables.\n        let r1;\n        let r2;\n        let c1;\n        let c2;\n        let cr;\n        let cc;\n        let clear;\n        // Dispatch based on the modifier keys.\n        if (accel && shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = Infinity;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (shift) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 + 1 : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else if (accel) {\n            r1 = Infinity;\n            r2 = Infinity;\n            c1 = c;\n            c2 = c;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        else {\n            r1 = r + 1;\n            r2 = r + 1;\n            c1 = c;\n            c2 = c;\n            cr = r1;\n            cc = c1;\n            clear = 'all';\n        }\n        // Create the new selection.\n        model.select({ r1, c1, r2, c2, cursorRow: cr, cursorColumn: cc, clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid appropriately.\n        if (shift || mode === 'row') {\n            grid.scrollToRow(cs.r2);\n        }\n        else {\n            grid.scrollToCursor();\n        }\n    }\n    /**\n     * Handle the `'PageUp'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    onPageUp(grid, event) {\n        // Ignore the event if the accel key is pressed.\n        if (Platform.accelKey(event)) {\n            return;\n        }\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Fetch the selection model.\n        let model = grid.selectionModel;\n        // Scroll by page if there is no selection model.\n        if (!model || model.selectionMode === 'column') {\n            grid.scrollByPage('up');\n            return;\n        }\n        // Get the normal number of cells in the page height.\n        let n = Math.floor(grid.pageHeight / grid.defaultSizes.rowHeight);\n        // Fetch the cursor and selection.\n        let r = model.cursorRow;\n        let c = model.cursorColumn;\n        let cs = model.currentSelection();\n        // Set up the selection variables.\n        let r1;\n        let r2;\n        let c1;\n        let c2;\n        let cr;\n        let cc;\n        let clear;\n        // Select or resize as needed.\n        if (event.shiftKey) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 - n : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else {\n            r1 = cs ? cs.r1 - n : 0;\n            r2 = r1;\n            c1 = c;\n            c2 = c;\n            cr = r1;\n            cc = c;\n            clear = 'all';\n        }\n        // Create the new selection.\n        model.select({ r1, c1, r2, c2, cursorRow: cr, cursorColumn: cc, clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid appropriately.\n        grid.scrollToRow(cs.r2);\n    }\n    /**\n     * Handle the `'PageDown'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    onPageDown(grid, event) {\n        // Ignore the event if the accel key is pressed.\n        if (Platform.accelKey(event)) {\n            return;\n        }\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Fetch the selection model.\n        let model = grid.selectionModel;\n        // Scroll by page if there is no selection model.\n        if (!model || model.selectionMode === 'column') {\n            grid.scrollByPage('down');\n            return;\n        }\n        // Get the normal number of cells in the page height.\n        let n = Math.floor(grid.pageHeight / grid.defaultSizes.rowHeight);\n        // Fetch the cursor and selection.\n        let r = model.cursorRow;\n        let c = model.cursorColumn;\n        let cs = model.currentSelection();\n        // Set up the selection variables.\n        let r1;\n        let r2;\n        let c1;\n        let c2;\n        let cr;\n        let cc;\n        let clear;\n        // Select or resize as needed.\n        if (event.shiftKey) {\n            r1 = cs ? cs.r1 : 0;\n            r2 = cs ? cs.r2 + n : 0;\n            c1 = cs ? cs.c1 : 0;\n            c2 = cs ? cs.c2 : 0;\n            cr = r;\n            cc = c;\n            clear = 'current';\n        }\n        else {\n            r1 = cs ? cs.r1 + n : 0;\n            r2 = r1;\n            c1 = c;\n            c2 = c;\n            cr = r1;\n            cc = c;\n            clear = 'all';\n        }\n        // Create the new selection.\n        model.select({ r1, c1, r2, c2, cursorRow: cr, cursorColumn: cc, clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid appropriately.\n        grid.scrollToRow(cs.r2);\n    }\n    /**\n     * Handle the `'Escape'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    onEscape(grid, event) {\n        if (grid.selectionModel) {\n            grid.selectionModel.clear();\n        }\n    }\n    /**\n     * Handle the `'Delete'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    onDelete(grid, event) {\n        if (grid.editable && !grid.selectionModel.isEmpty) {\n            const dataModel = grid.dataModel;\n            // Fetch the max row and column.\n            let maxRow = dataModel.rowCount('body') - 1;\n            let maxColumn = dataModel.columnCount('body') - 1;\n            for (let s of grid.selectionModel.selections()) {\n                // Clamp the cell to the model bounds.\n                let sr1 = Math.max(0, Math.min(s.r1, maxRow));\n                let sc1 = Math.max(0, Math.min(s.c1, maxColumn));\n                let sr2 = Math.max(0, Math.min(s.r2, maxRow));\n                let sc2 = Math.max(0, Math.min(s.c2, maxColumn));\n                for (let r = sr1; r <= sr2; ++r) {\n                    for (let c = sc1; c <= sc2; ++c) {\n                        dataModel.setData('body', r, c, null);\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Handle the `'C'` key press for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keyboard event of interest.\n     */\n    onKeyC(grid, event) {\n        // Bail early if the modifiers aren't correct for copy.\n        if (event.shiftKey || !Platform.accelKey(event)) {\n            return;\n        }\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Copy the current selection to the clipboard.\n        grid.copyToClipboard();\n    }\n}\n\n/**\n * An object which renders the cells of a data grid.\n *\n * #### Notes\n * If the predefined cell renderers are insufficient for a particular\n * use case, a custom cell renderer can be defined which derives from\n * this class.\n *\n * The data grid renders cells in column-major order, by region. The\n * region order is: body, row header, column header, corner header.\n */\nclass CellRenderer {\n}\n/**\n * The namespace for the `CellRenderer` class statics.\n */\n(function (CellRenderer) {\n    /**\n     * Resolve a config option for a cell renderer.\n     *\n     * @param option - The config option to resolve.\n     *\n     * @param config - The cell config object.\n     *\n     * @returns The resolved value for the option.\n     */\n    function resolveOption(option, config) {\n        return typeof option === 'function'\n            ? option(config)\n            : option;\n    }\n    CellRenderer.resolveOption = resolveOption;\n})(CellRenderer || (CellRenderer = {}));\n\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * A cell renderer which renders data values as text.\n */\nclass TextRenderer extends CellRenderer {\n    /**\n     * Construct a new text renderer.\n     *\n     * @param options - The options for initializing the renderer.\n     */\n    constructor(options = {}) {\n        super();\n        this.font = options.font || '12px sans-serif';\n        this.textColor = options.textColor || '#000000';\n        this.backgroundColor = options.backgroundColor || '';\n        this.verticalAlignment = options.verticalAlignment || 'center';\n        this.horizontalAlignment = options.horizontalAlignment || 'left';\n        this.horizontalPadding = options.horizontalPadding || 8;\n        this.format = options.format || TextRenderer.formatGeneric();\n        this.elideDirection = options.elideDirection || 'none';\n        this.wrapText = options.wrapText || false;\n    }\n    /**\n     * Paint the content for a cell.\n     *\n     * @param gc - The graphics context to use for drawing.\n     *\n     * @param config - The configuration data for the cell.\n     */\n    paint(gc, config) {\n        this.drawBackground(gc, config);\n        this.drawText(gc, config);\n    }\n    /**\n     * Draw the background for the cell.\n     *\n     * @param gc - The graphics context to use for drawing.\n     *\n     * @param config - The configuration data for the cell.\n     */\n    drawBackground(gc, config) {\n        // Resolve the background color for the cell.\n        let color = CellRenderer.resolveOption(this.backgroundColor, config);\n        // Bail if there is no background color to draw.\n        if (!color) {\n            return;\n        }\n        // Fill the cell with the background color.\n        gc.fillStyle = color;\n        gc.fillRect(config.x, config.y, config.width, config.height);\n    }\n    /**\n     * Get the full text to be rendered by the cell.\n     */\n    getText(config) {\n        return this.format(config);\n    }\n    /**\n     * Draw the text for the cell.\n     *\n     * @param gc - The graphics context to use for drawing.\n     *\n     * @param config - The configuration data for the cell.\n     */\n    drawText(gc, config) {\n        // Resolve the font for the cell.\n        let font = CellRenderer.resolveOption(this.font, config);\n        // Bail if there is no font to draw.\n        if (!font) {\n            return;\n        }\n        // Resolve the text color for the cell.\n        let color = CellRenderer.resolveOption(this.textColor, config);\n        // Bail if there is no text color to draw.\n        if (!color) {\n            return;\n        }\n        // Format the cell value to text.\n        let text = this.getText(config);\n        // Bail if there is no text to draw.\n        if (!text) {\n            return;\n        }\n        // Resolve the vertical and horizontal alignment.\n        let vAlign = CellRenderer.resolveOption(this.verticalAlignment, config);\n        let hAlign = CellRenderer.resolveOption(this.horizontalAlignment, config);\n        // Resolve the elision direction\n        let elideDirection = CellRenderer.resolveOption(this.elideDirection, config);\n        // Resolve the text wrapping flag\n        let wrapText = CellRenderer.resolveOption(this.wrapText, config);\n        // Compute the padded text box height for the specified alignment.\n        let boxHeight = config.height - (vAlign === 'center' ? 1 : 2);\n        // Bail if the text box has no effective size.\n        if (boxHeight <= 0) {\n            return;\n        }\n        // Compute the text height for the gc font.\n        let textHeight = TextRenderer.measureFontHeight(font);\n        // Set up the text position variables.\n        let textX;\n        let textY;\n        let boxWidth;\n        // Compute the Y position for the text.\n        switch (vAlign) {\n            case 'top':\n                textY = config.y + 2 + textHeight;\n                break;\n            case 'center':\n                textY = config.y + config.height / 2 + textHeight / 2;\n                break;\n            case 'bottom':\n                textY = config.y + config.height - 2;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Compute the X position for the text.\n        switch (hAlign) {\n            case 'left':\n                textX = config.x + this.horizontalPadding;\n                boxWidth = config.width - 14;\n                break;\n            case 'center':\n                textX = config.x + config.width / 2;\n                boxWidth = config.width;\n                break;\n            case 'right':\n                textX = config.x + config.width - this.horizontalPadding;\n                boxWidth = config.width - 14;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Clip the cell if the text is taller than the text box height.\n        if (textHeight > boxHeight) {\n            gc.beginPath();\n            gc.rect(config.x, config.y, config.width, config.height - 1);\n            gc.clip();\n        }\n        // Set the gc state.\n        gc.font = font;\n        gc.fillStyle = color;\n        gc.textAlign = hAlign;\n        gc.textBaseline = 'bottom';\n        // Terminate call here if we're not eliding or wrapping text\n        if (elideDirection === 'none' && !wrapText) {\n            gc.fillText(text, textX, textY);\n            return;\n        }\n        // The current text width in pixels.\n        let textWidth = gc.measureText(text).width;\n        // Apply text wrapping if enabled.\n        if (wrapText && textWidth > boxWidth) {\n            // Make sure box clipping happens.\n            gc.beginPath();\n            gc.rect(config.x, config.y, config.width, config.height - 1);\n            gc.clip();\n            // Split column name to words based on\n            // whitespace preceding a word boundary.\n            // \"Hello  world\" --> [\"Hello  \", \"world\"]\n            const wordsInColumn = text.split(/\\s(?=\\b)/);\n            // Y-coordinate offset for any additional lines\n            let curY = textY;\n            let textInCurrentLine = wordsInColumn.shift();\n            // Single word. Applying text wrap on word by splitting\n            // it into characters and fitting the maximum number of\n            // characters possible per line (box width).\n            if (wordsInColumn.length === 0) {\n                let curLineTextWidth = gc.measureText(textInCurrentLine).width;\n                while (curLineTextWidth > boxWidth && textInCurrentLine !== '') {\n                    // Iterating from the end of the string until we find a\n                    // substring (0,i) which has a width less than the box width.\n                    for (let i = textInCurrentLine.length; i > 0; i--) {\n                        const curSubString = textInCurrentLine.substring(0, i);\n                        const curSubStringWidth = gc.measureText(curSubString).width;\n                        if (curSubStringWidth < boxWidth || curSubString.length === 1) {\n                            // Found a substring which has a width less than the current\n                            // box width. Rendering that substring on the current line\n                            // and setting the remainder of the parent string as the next\n                            // string to iterate on for the next line.\n                            const nextLineText = textInCurrentLine.substring(i, textInCurrentLine.length);\n                            textInCurrentLine = nextLineText;\n                            curLineTextWidth = gc.measureText(textInCurrentLine).width;\n                            gc.fillText(curSubString, textX, curY);\n                            curY += textHeight;\n                            // No need to continue iterating after we identified\n                            // an index to break the string on.\n                            break;\n                        }\n                    }\n                }\n            }\n            // Multiple words in column header. Fitting maximum\n            // number of words possible per line (box width).\n            else {\n                while (wordsInColumn.length !== 0) {\n                    // Processing the next word in the queue.\n                    const curWord = wordsInColumn.shift();\n                    // Joining that word with the existing text for\n                    // the current line.\n                    const incrementedText = [textInCurrentLine, curWord].join(' ');\n                    const incrementedTextWidth = gc.measureText(incrementedText).width;\n                    if (incrementedTextWidth > boxWidth) {\n                        // If the newly combined text has a width larger than\n                        // the box width, we render the line before the current\n                        // word was added. We set the current word as the next\n                        // line.\n                        gc.fillText(textInCurrentLine, textX, curY);\n                        curY += textHeight;\n                        textInCurrentLine = curWord;\n                    }\n                    else {\n                        // The combined text hasd a width less than the box width. We\n                        // set the the current line text to be the new combined text.\n                        textInCurrentLine = incrementedText;\n                    }\n                }\n            }\n            gc.fillText(textInCurrentLine, textX, curY);\n            // Terminating the call here as we don't want\n            // to apply text eliding when wrapping is active.\n            return;\n        }\n        // Elide text that is too long\n        const elide = '\\u2026';\n        // Loop until text width fits box or only one character remains\n        while (textWidth > boxWidth && text.length > 1) {\n            // Convert text string to array for dealing with astral symbols\n            const textArr = [...text];\n            if (elideDirection === 'right') {\n                // If text width is substantially bigger, take half the string\n                if (textArr.length > 4 && textWidth >= 2 * boxWidth) {\n                    text =\n                        textArr.slice(0, Math.floor(textArr.length / 2 + 1)).join('') +\n                            elide;\n                }\n                else {\n                    // Otherwise incrementally remove the last character\n                    text = textArr.slice(0, textArr.length - 2).join('') + elide;\n                }\n            }\n            else {\n                // If text width is substantially bigger, take half the string\n                if (textArr.length > 4 && textWidth >= 2 * boxWidth) {\n                    text = elide + textArr.slice(Math.floor(textArr.length / 2)).join('');\n                }\n                else {\n                    // Otherwise incrementally remove the last character\n                    text = elide + textArr.slice(2).join('');\n                }\n            }\n            // Measure new text width\n            textWidth = gc.measureText(text).width;\n        }\n        // Draw the text for the cell.\n        gc.fillText(text, textX, textY);\n    }\n}\n/**\n * The namespace for the `TextRenderer` class statics.\n */\n(function (TextRenderer) {\n    /**\n     * Create a generic text format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new generic text format function.\n     *\n     * #### Notes\n     * This formatter uses the builtin `String()` to coerce any value\n     * to a string.\n     */\n    function formatGeneric(options = {}) {\n        let missing = options.missing || '';\n        return ({ value }) => {\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            return String(value);\n        };\n    }\n    TextRenderer.formatGeneric = formatGeneric;\n    /**\n     * Create a fixed decimal format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new fixed decimal format function.\n     *\n     * #### Notes\n     * This formatter uses the builtin `Number()` and `toFixed()` to\n     * coerce values.\n     *\n     * The `formatIntlNumber()` formatter is more flexible, but slower.\n     */\n    function formatFixed(options = {}) {\n        let digits = options.digits;\n        let missing = options.missing || '';\n        return ({ value }) => {\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            return Number(value).toFixed(digits);\n        };\n    }\n    TextRenderer.formatFixed = formatFixed;\n    /**\n     * Create a significant figure format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new significant figure format function.\n     *\n     * #### Notes\n     * This formatter uses the builtin `Number()` and `toPrecision()`\n     * to coerce values.\n     *\n     * The `formatIntlNumber()` formatter is more flexible, but slower.\n     */\n    function formatPrecision(options = {}) {\n        let digits = options.digits;\n        let missing = options.missing || '';\n        return ({ value }) => {\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            return Number(value).toPrecision(digits);\n        };\n    }\n    TextRenderer.formatPrecision = formatPrecision;\n    /**\n     * Create a scientific notation format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new scientific notation format function.\n     *\n     * #### Notes\n     * This formatter uses the builtin `Number()` and `toExponential()`\n     * to coerce values.\n     *\n     * The `formatIntlNumber()` formatter is more flexible, but slower.\n     */\n    function formatExponential(options = {}) {\n        let digits = options.digits;\n        let missing = options.missing || '';\n        return ({ value }) => {\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            return Number(value).toExponential(digits);\n        };\n    }\n    TextRenderer.formatExponential = formatExponential;\n    /**\n     * Create an international number format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new international number format function.\n     *\n     * #### Notes\n     * This formatter uses the builtin `Intl.NumberFormat` object to\n     * coerce values.\n     *\n     * This is the most flexible (but slowest) number formatter.\n     */\n    function formatIntlNumber(options = {}) {\n        let missing = options.missing || '';\n        let nft = new Intl.NumberFormat(options.locales, options.options);\n        return ({ value }) => {\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            return nft.format(value);\n        };\n    }\n    TextRenderer.formatIntlNumber = formatIntlNumber;\n    /**\n     * Create a date format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new date format function.\n     *\n     * #### Notes\n     * This formatter uses `Date.toDateString()` to format the values.\n     *\n     * If a value is not a `Date` object, `new Date(value)` is used to\n     * coerce the value to a date.\n     *\n     * The `formatIntlDateTime()` formatter is more flexible, but slower.\n     */\n    function formatDate(options = {}) {\n        let missing = options.missing || '';\n        return ({ value }) => {\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            if (value instanceof Date) {\n                return value.toDateString();\n            }\n            return new Date(value).toDateString();\n        };\n    }\n    TextRenderer.formatDate = formatDate;\n    /**\n     * Create a time format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new time format function.\n     *\n     * #### Notes\n     * This formatter uses `Date.toTimeString()` to format the values.\n     *\n     * If a value is not a `Date` object, `new Date(value)` is used to\n     * coerce the value to a date.\n     *\n     * The `formatIntlDateTime()` formatter is more flexible, but slower.\n     */\n    function formatTime(options = {}) {\n        let missing = options.missing || '';\n        return ({ value }) => {\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            if (value instanceof Date) {\n                return value.toTimeString();\n            }\n            return new Date(value).toTimeString();\n        };\n    }\n    TextRenderer.formatTime = formatTime;\n    /**\n     * Create an ISO datetime format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new ISO datetime format function.\n     *\n     * #### Notes\n     * This formatter uses `Date.toISOString()` to format the values.\n     *\n     * If a value is not a `Date` object, `new Date(value)` is used to\n     * coerce the value to a date.\n     *\n     * The `formatIntlDateTime()` formatter is more flexible, but slower.\n     */\n    function formatISODateTime(options = {}) {\n        let missing = options.missing || '';\n        return ({ value }) => {\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            if (value instanceof Date) {\n                return value.toISOString();\n            }\n            return new Date(value).toISOString();\n        };\n    }\n    TextRenderer.formatISODateTime = formatISODateTime;\n    /**\n     * Create a UTC datetime format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new UTC datetime format function.\n     *\n     * #### Notes\n     * This formatter uses `Date.toUTCString()` to format the values.\n     *\n     * If a value is not a `Date` object, `new Date(value)` is used to\n     * coerce the value to a date.\n     *\n     * The `formatIntlDateTime()` formatter is more flexible, but slower.\n     */\n    function formatUTCDateTime(options = {}) {\n        let missing = options.missing || '';\n        return ({ value }) => {\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            if (value instanceof Date) {\n                return value.toUTCString();\n            }\n            return new Date(value).toUTCString();\n        };\n    }\n    TextRenderer.formatUTCDateTime = formatUTCDateTime;\n    /**\n     * Create an international datetime format function.\n     *\n     * @param options - The options for creating the format function.\n     *\n     * @returns A new international datetime format function.\n     *\n     * #### Notes\n     * This formatter uses the builtin `Intl.DateTimeFormat` object to\n     * coerce values.\n     *\n     * This is the most flexible (but slowest) datetime formatter.\n     */\n    function formatIntlDateTime(options = {}) {\n        let missing = options.missing || '';\n        let dtf = new Intl.DateTimeFormat(options.locales, options.options);\n        return ({ value }) => {\n            if (value === null || value === undefined) {\n                return missing;\n            }\n            return dtf.format(value);\n        };\n    }\n    TextRenderer.formatIntlDateTime = formatIntlDateTime;\n    /**\n     * Measure the height of a font.\n     *\n     * @param font - The CSS font string of interest.\n     *\n     * @returns The height of the font bounding box.\n     *\n     * #### Notes\n     * This function uses a temporary DOM node to measure the text box\n     * height for the specified font. The first call for a given font\n     * will incur a DOM reflow, but the return value is cached, so any\n     * subsequent call for the same font will return the cached value.\n     */\n    function measureFontHeight(font) {\n        // Look up the cached font height.\n        let height = Private$6.fontHeightCache[font];\n        // Return the cached font height if it exists.\n        if (height !== undefined) {\n            return height;\n        }\n        // Normalize the font.\n        Private$6.fontMeasurementGC.font = font;\n        let normFont = Private$6.fontMeasurementGC.font;\n        // Set the font on the measurement node.\n        Private$6.fontMeasurementNode.style.font = normFont;\n        // Add the measurement node to the document.\n        document.body.appendChild(Private$6.fontMeasurementNode);\n        // Measure the node height.\n        height = Private$6.fontMeasurementNode.offsetHeight;\n        // Remove the measurement node from the document.\n        document.body.removeChild(Private$6.fontMeasurementNode);\n        // Cache the measured height for the font and norm font.\n        Private$6.fontHeightCache[font] = height;\n        Private$6.fontHeightCache[normFont] = height;\n        // Return the measured height.\n        return height;\n    }\n    TextRenderer.measureFontHeight = measureFontHeight;\n})(TextRenderer || (TextRenderer = {}));\n/**\n * The namespace for the module implementation details.\n */\nvar Private$6;\n(function (Private) {\n    /**\n     * A cache of measured font heights.\n     */\n    Private.fontHeightCache = Object.create(null);\n    /**\n     * The DOM node used for font height measurement.\n     */\n    Private.fontMeasurementNode = (() => {\n        let node = document.createElement('div');\n        node.style.position = 'absolute';\n        node.style.top = '-99999px';\n        node.style.left = '-99999px';\n        node.style.visibility = 'hidden';\n        node.textContent = 'M';\n        return node;\n    })();\n    /**\n     * The GC used for font measurement.\n     */\n    Private.fontMeasurementGC = (() => {\n        let canvas = document.createElement('canvas');\n        canvas.width = 0;\n        canvas.height = 0;\n        return canvas.getContext('2d');\n    })();\n})(Private$6 || (Private$6 = {}));\n\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * A cell renderer which renders data values as text.\n */\nclass HyperlinkRenderer extends TextRenderer {\n    /**\n     * Construct a new text renderer.\n     *\n     * @param options - The options for initializing the renderer.\n     */\n    constructor(options = {}) {\n        // Set default parameters before passing over the super.\n        options.textColor = options.textColor || 'navy';\n        options.font = options.font || 'bold 12px sans-serif';\n        super(options);\n        this.url = options.url;\n        this.urlName = options.urlName;\n    }\n    /**\n     * Get the full text to be rendered by the cell.\n     */\n    getText(config) {\n        let urlName = CellRenderer.resolveOption(this.urlName, config);\n        // If we have a friendly URL name, use that.\n        if (urlName) {\n            return this.format({\n                ...config,\n                value: urlName\n            });\n        }\n        // Otherwise use the raw value attribute.\n        return this.format(config);\n    }\n    /**\n     * Draw the text for the cell.\n     *\n     * @param gc - The graphics context to use for drawing.\n     *\n     * @param config - The configuration data for the cell.\n     */\n    drawText(gc, config) {\n        // Resolve the font for the cell.\n        let font = CellRenderer.resolveOption(this.font, config);\n        // Bail if there is no font to draw.\n        if (!font) {\n            return;\n        }\n        // Resolve the text color for the cell.\n        let color = CellRenderer.resolveOption(this.textColor, config);\n        // Bail if there is no text color to draw.\n        if (!color) {\n            return;\n        }\n        let text = this.getText(config);\n        // Bail if there is no text to draw.\n        if (!text) {\n            return;\n        }\n        // Resolve the vertical and horizontal alignment.\n        let vAlign = CellRenderer.resolveOption(this.verticalAlignment, config);\n        let hAlign = CellRenderer.resolveOption(this.horizontalAlignment, config);\n        // Resolve the elision direction\n        let elideDirection = CellRenderer.resolveOption(this.elideDirection, config);\n        // Resolve the text wrapping flag\n        let wrapText = CellRenderer.resolveOption(this.wrapText, config);\n        // Compute the padded text box height for the specified alignment.\n        let boxHeight = config.height - (vAlign === 'center' ? 1 : 2);\n        // Bail if the text box has no effective size.\n        if (boxHeight <= 0) {\n            return;\n        }\n        // Compute the text height for the gc font.\n        let textHeight = HyperlinkRenderer.measureFontHeight(font);\n        // Set up the text position variables.\n        let textX;\n        let textY;\n        let boxWidth;\n        // Compute the Y position for the text.\n        switch (vAlign) {\n            case 'top':\n                textY = config.y + 2 + textHeight;\n                break;\n            case 'center':\n                textY = config.y + config.height / 2 + textHeight / 2;\n                break;\n            case 'bottom':\n                textY = config.y + config.height - 2;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Compute the X position for the text.\n        switch (hAlign) {\n            case 'left':\n                textX = config.x + 8;\n                boxWidth = config.width - 14;\n                break;\n            case 'center':\n                textX = config.x + config.width / 2;\n                boxWidth = config.width;\n                break;\n            case 'right':\n                textX = config.x + config.width - 8;\n                boxWidth = config.width - 14;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Clip the cell if the text is taller than the text box height.\n        if (textHeight > boxHeight) {\n            gc.beginPath();\n            gc.rect(config.x, config.y, config.width, config.height - 1);\n            gc.clip();\n        }\n        // Set the gc state.\n        gc.font = font;\n        gc.fillStyle = color;\n        gc.textAlign = hAlign;\n        gc.textBaseline = 'bottom';\n        // Terminate call here if we're not eliding or wrapping text\n        if (elideDirection === 'none' && !wrapText) {\n            gc.fillText(text, textX, textY);\n            return;\n        }\n        // The current text width in pixels.\n        let textWidth = gc.measureText(text).width;\n        // Apply text wrapping if enabled.\n        if (wrapText && textWidth > boxWidth) {\n            // Make sure box clipping happens.\n            gc.beginPath();\n            gc.rect(config.x, config.y, config.width, config.height - 1);\n            gc.clip();\n            // Split column name to words based on\n            // whitespace preceding a word boundary.\n            // \"Hello  world\" --> [\"Hello  \", \"world\"]\n            const wordsInColumn = text.split(/\\s(?=\\b)/);\n            // Y-coordinate offset for any additional lines\n            let curY = textY;\n            let textInCurrentLine = wordsInColumn.shift();\n            // Single word. Applying text wrap on word by splitting\n            // it into characters and fitting the maximum number of\n            // characters possible per line (box width).\n            if (wordsInColumn.length === 0) {\n                let curLineTextWidth = gc.measureText(textInCurrentLine).width;\n                while (curLineTextWidth > boxWidth && textInCurrentLine !== '') {\n                    // Iterating from the end of the string until we find a\n                    // substring (0,i) which has a width less than the box width.\n                    for (let i = textInCurrentLine.length; i > 0; i--) {\n                        const curSubString = textInCurrentLine.substring(0, i);\n                        const curSubStringWidth = gc.measureText(curSubString).width;\n                        if (curSubStringWidth < boxWidth || curSubString.length === 1) {\n                            // Found a substring which has a width less than the current\n                            // box width. Rendering that substring on the current line\n                            // and setting the remainder of the parent string as the next\n                            // string to iterate on for the next line.\n                            const nextLineText = textInCurrentLine.substring(i, textInCurrentLine.length);\n                            textInCurrentLine = nextLineText;\n                            curLineTextWidth = gc.measureText(textInCurrentLine).width;\n                            gc.fillText(curSubString, textX, curY);\n                            curY += textHeight;\n                            // No need to continue iterating after we identified\n                            // an index to break the string on.\n                            break;\n                        }\n                    }\n                }\n            }\n            // Multiple words in column header. Fitting maximum\n            // number of words possible per line (box width).\n            else {\n                while (wordsInColumn.length !== 0) {\n                    // Processing the next word in the queue.\n                    const curWord = wordsInColumn.shift();\n                    // Joining that word with the existing text for\n                    // the current line.\n                    const incrementedText = [textInCurrentLine, curWord].join(' ');\n                    const incrementedTextWidth = gc.measureText(incrementedText).width;\n                    if (incrementedTextWidth > boxWidth) {\n                        // If the newly combined text has a width larger than\n                        // the box width, we render the line before the current\n                        // word was added. We set the current word as the next\n                        // line.\n                        gc.fillText(textInCurrentLine, textX, curY);\n                        curY += textHeight;\n                        textInCurrentLine = curWord;\n                    }\n                    else {\n                        // The combined text hasd a width less than the box width. We\n                        // set the the current line text to be the new combined text.\n                        textInCurrentLine = incrementedText;\n                    }\n                }\n            }\n            gc.fillText(textInCurrentLine, textX, curY);\n            // Terminating the call here as we don't want\n            // to apply text eliding when wrapping is active.\n            return;\n        }\n        // Elide text that is too long\n        let elide = '\\u2026';\n        // Compute elided text\n        if (elideDirection === 'right') {\n            while (textWidth > boxWidth && text.length > 1) {\n                if (text.length > 4 && textWidth >= 2 * boxWidth) {\n                    // If text width is substantially bigger, take half the string\n                    text = text.substring(0, text.length / 2 + 1) + elide;\n                }\n                else {\n                    // Otherwise incrementally remove the last character\n                    text = text.substring(0, text.length - 2) + elide;\n                }\n                textWidth = gc.measureText(text).width;\n            }\n        }\n        else {\n            while (textWidth > boxWidth && text.length > 1) {\n                if (text.length > 4 && textWidth >= 2 * boxWidth) {\n                    // If text width is substantially bigger, take half the string\n                    text = elide + text.substring(text.length / 2);\n                }\n                else {\n                    // Otherwise incrementally remove the last character\n                    text = elide + text.substring(2);\n                }\n                textWidth = gc.measureText(text).width;\n            }\n        }\n        // Draw the text for the cell.\n        gc.fillText(text, textX, textY);\n    }\n}\n\n/*\n * Copyright (c) Jupyter Development Team.\n * Distributed under the terms of the Modified BSD License.\n */\n/**\n * A collection of helper functions relating to merged cell groups\n */\nvar CellGroup;\n(function (CellGroup) {\n    /**\n     * Checks if two cell-groups are intersecting\n     * in the given axis.\n     * @param group1\n     * @param group2\n     * @param axis\n     */\n    function areCellGroupsIntersectingAtAxis(group1, group2, axis) {\n        if (axis === 'row') {\n            return ((group1.r1 >= group2.r1 && group1.r1 <= group2.r2) ||\n                (group1.r2 >= group2.r1 && group1.r2 <= group2.r2) ||\n                (group2.r1 >= group1.r1 && group2.r1 <= group1.r2) ||\n                (group2.r2 >= group1.r1 && group2.r2 <= group1.r2));\n        }\n        return ((group1.c1 >= group2.c1 && group1.c1 <= group2.c2) ||\n            (group1.c2 >= group2.c1 && group1.c2 <= group2.c2) ||\n            (group2.c1 >= group1.c1 && group2.c1 <= group1.c2) ||\n            (group2.c2 >= group1.c1 && group2.c2 <= group1.c2));\n    }\n    CellGroup.areCellGroupsIntersectingAtAxis = areCellGroupsIntersectingAtAxis;\n    /**\n     * Checks if cell-groups are intersecting.\n     * @param group1\n     * @param group2\n     */\n    function areCellGroupsIntersecting(group1, group2) {\n        return (((group1.r1 >= group2.r1 && group1.r1 <= group2.r2) ||\n            (group1.r2 >= group2.r1 && group1.r2 <= group2.r2) ||\n            (group2.r1 >= group1.r1 && group2.r1 <= group1.r2) ||\n            (group2.r2 >= group1.r1 && group2.r2 <= group1.r2)) &&\n            ((group1.c1 >= group2.c1 && group1.c1 <= group2.c2) ||\n                (group1.c2 >= group2.c1 && group1.c2 <= group2.c2) ||\n                (group2.c1 >= group1.c1 && group2.c1 <= group1.c2) ||\n                (group2.c2 >= group1.c1 && group2.c2 <= group1.c2)));\n    }\n    CellGroup.areCellGroupsIntersecting = areCellGroupsIntersecting;\n    /**\n     * Retrieves the index of the cell-group to which\n     * the cell at the given row, column belongs.\n     * @param dataModel\n     * @param rgn\n     * @param row\n     * @param column\n     */\n    function getGroupIndex(dataModel, rgn, row, column) {\n        const numGroups = dataModel.groupCount(rgn);\n        for (let i = 0; i < numGroups; i++) {\n            const group = dataModel.group(rgn, i);\n            if (row >= group.r1 &&\n                row <= group.r2 &&\n                column >= group.c1 &&\n                column <= group.c2) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    CellGroup.getGroupIndex = getGroupIndex;\n    /**\n     * Returns a cell-group for the given row/index coordinates.\n     * @param dataModel\n     * @param rgn\n     * @param row\n     * @param column\n     */\n    function getGroup(dataModel, rgn, row, column) {\n        const groupIndex = getGroupIndex(dataModel, rgn, row, column);\n        if (groupIndex === -1) {\n            return null;\n        }\n        return dataModel.group(rgn, groupIndex);\n    }\n    CellGroup.getGroup = getGroup;\n    /**\n     * Returns all cell groups which belong to\n     * a given cell cell region.\n     * @param dataModel\n     * @param rgn\n     */\n    function getCellGroupsAtRegion(dataModel, rgn) {\n        let groupsAtRegion = [];\n        const numGroups = dataModel.groupCount(rgn);\n        for (let i = 0; i < numGroups; i++) {\n            const group = dataModel.group(rgn, i);\n            groupsAtRegion.push(group);\n        }\n        return groupsAtRegion;\n    }\n    CellGroup.getCellGroupsAtRegion = getCellGroupsAtRegion;\n    /**\n     * Calculates and returns a merged cell-group from\n     * two cell-group objects.\n     * @param groups\n     */\n    function joinCellGroups(groups) {\n        let startRow = Number.MAX_VALUE;\n        let endRow = Number.MIN_VALUE;\n        let startColumn = Number.MAX_VALUE;\n        let endColumn = Number.MIN_VALUE;\n        for (const group of groups) {\n            startRow = Math.min(startRow, group.r1);\n            endRow = Math.max(endRow, group.r2);\n            startColumn = Math.min(startColumn, group.c1);\n            endColumn = Math.max(endColumn, group.c2);\n        }\n        return { r1: startRow, r2: endRow, c1: startColumn, c2: endColumn };\n    }\n    CellGroup.joinCellGroups = joinCellGroups;\n    /**\n     * Merges a cell group with other cells groups in the\n     * same region if they intersect.\n     * @param dataModel the data model of the grid.\n     * @param group the target cell group.\n     * @param region the region of the cell group.\n     * @returns a new cell group after merging has happened.\n     */\n    function joinCellGroupWithMergedCellGroups(dataModel, group, region) {\n        let joinedGroup = { ...group };\n        const mergedCellGroups = getCellGroupsAtRegion(dataModel, region);\n        for (let g = 0; g < mergedCellGroups.length; g++) {\n            const mergedGroup = mergedCellGroups[g];\n            if (areCellGroupsIntersecting(joinedGroup, mergedGroup)) {\n                joinedGroup = joinCellGroups([joinedGroup, mergedGroup]);\n            }\n        }\n        return joinedGroup;\n    }\n    CellGroup.joinCellGroupWithMergedCellGroups = joinCellGroupWithMergedCellGroups;\n    /**\n     * Retrieves a list of cell groups intersecting at\n     * a given row.\n     * @param dataModel data model of the grid.\n     * @param rgn the cell region.\n     * @param row the target row to look for intersections at.\n     * @returns all cell groups intersecting with the row.\n     */\n    function getCellGroupsAtRow(dataModel, rgn, row) {\n        let groupsAtRow = [];\n        const numGroups = dataModel.groupCount(rgn);\n        for (let i = 0; i < numGroups; i++) {\n            const group = dataModel.group(rgn, i);\n            if (row >= group.r1 && row <= group.r2) {\n                groupsAtRow.push(group);\n            }\n        }\n        return groupsAtRow;\n    }\n    CellGroup.getCellGroupsAtRow = getCellGroupsAtRow;\n    /**\n     * Retrieves a list of cell groups intersecting at\n     * a given column.\n     * @param dataModel data model of the grid.\n     * @param rgn the cell region.\n     * @param column the target column to look for intersections at.\n     * @returns all cell groups intersecting with the column.\n     */\n    function getCellGroupsAtColumn(dataModel, rgn, column) {\n        let groupsAtColumn = [];\n        const numGroups = dataModel.groupCount(rgn);\n        for (let i = 0; i < numGroups; i++) {\n            const group = dataModel.group(rgn, i);\n            if (column >= group.c1 && column <= group.c2) {\n                groupsAtColumn.push(group);\n            }\n        }\n        return groupsAtColumn;\n    }\n    CellGroup.getCellGroupsAtColumn = getCellGroupsAtColumn;\n    /**\n     * Merges a target cell group with any cell groups\n     * it intersects with at a given row or column.\n     * @param dataModel data model of the grid.\n     * @param regions list of cell regions.\n     * @param axis row or column.\n     * @param group the target cell group.\n     * @returns a new merged cell group.\n     */\n    function joinCellGroupsIntersectingAtAxis(dataModel, regions, axis, group) {\n        let groupsAtAxis = [];\n        if (axis === 'row') {\n            for (const region of regions) {\n                for (let r = group.r1; r <= group.r2; r++) {\n                    groupsAtAxis = groupsAtAxis.concat(CellGroup.getCellGroupsAtRow(dataModel, region, r));\n                }\n            }\n        }\n        else {\n            for (const region of regions) {\n                for (let c = group.c1; c <= group.c2; c++) {\n                    groupsAtAxis = groupsAtAxis.concat(CellGroup.getCellGroupsAtColumn(dataModel, region, c));\n                }\n            }\n        }\n        let mergedGroupAtAxis = CellGroup.joinCellGroups(groupsAtAxis);\n        if (groupsAtAxis.length > 0) {\n            let mergedCellGroups = [];\n            for (const region of regions) {\n                mergedCellGroups = mergedCellGroups.concat(CellGroup.getCellGroupsAtRegion(dataModel, region));\n            }\n            for (let g = 0; g < mergedCellGroups.length; g++) {\n                const group = mergedCellGroups[g];\n                if (CellGroup.areCellGroupsIntersectingAtAxis(mergedGroupAtAxis, group, axis)) {\n                    mergedGroupAtAxis = CellGroup.joinCellGroups([\n                        group,\n                        mergedGroupAtAxis\n                    ]);\n                    mergedCellGroups.splice(g, 1);\n                    g = 0;\n                }\n            }\n        }\n        return mergedGroupAtAxis;\n    }\n    CellGroup.joinCellGroupsIntersectingAtAxis = joinCellGroupsIntersectingAtAxis;\n})(CellGroup || (CellGroup = {}));\n\n/**\n * A basic implementation of a data grid mouse handler.\n *\n * #### Notes\n * This class may be subclassed and customized as needed.\n */\nclass BasicMouseHandler {\n    constructor() {\n        this._disposed = false;\n        this._pressData = null;\n    }\n    /**\n     * Dispose of the resources held by the mouse handler.\n     */\n    dispose() {\n        // Bail early if the handler is already disposed.\n        if (this._disposed) {\n            return;\n        }\n        // Release any held resources.\n        this.release();\n        // Mark the handler as disposed.\n        this._disposed = true;\n    }\n    /**\n     * Whether the mouse handler is disposed.\n     */\n    get isDisposed() {\n        return this._disposed;\n    }\n    /**\n     * Release the resources held by the handler.\n     */\n    release() {\n        // Bail early if the is no press data.\n        if (!this._pressData) {\n            return;\n        }\n        // Clear the autoselect timeout.\n        if (this._pressData.type === 'select') {\n            this._pressData.timeout = -1;\n        }\n        // Clear the press data.\n        this._pressData.override.dispose();\n        this._pressData = null;\n    }\n    /**\n     * Handle the mouse hover event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse hover event of interest.\n     */\n    onMouseHover(grid, event) {\n        // Hit test the grid.\n        let hit = grid.hitTest(event.clientX, event.clientY);\n        // Get the resize handle for the hit test.\n        let handle = Private$5.resizeHandleForHitTest(hit);\n        // Fetch the cursor for the handle.\n        let cursor = this.cursorForHandle(handle);\n        // Hyperlink logic.\n        const config = Private$5.createCellConfigObject(grid, hit);\n        if (config) {\n            // Retrieve renderer for hovered cell.\n            const renderer = grid.cellRenderers.get(config);\n            if (renderer instanceof HyperlinkRenderer) {\n                cursor = this.cursorForHandle('hyperlink');\n            }\n        }\n        // Update the viewport cursor based on the part.\n        grid.viewport.node.style.cursor = cursor;\n        // TODO support user-defined hover items\n    }\n    /**\n     * Handle the mouse leave event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse hover event of interest.\n     */\n    onMouseLeave(grid, event) {\n        // TODO support user-defined hover popups.\n        // Clear the viewport cursor.\n        grid.viewport.node.style.cursor = '';\n    }\n    /**\n     * Handle the mouse down event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse down event of interest.\n     */\n    onMouseDown(grid, event) {\n        // Unpack the event.\n        let { clientX, clientY } = event;\n        // Hit test the grid.\n        let hit = grid.hitTest(clientX, clientY);\n        // Unpack the hit test.\n        const { region, row, column } = hit;\n        // Bail if the hit test is on an uninteresting region.\n        if (region === 'void') {\n            return;\n        }\n        // Fetch the modifier flags.\n        let shift = event.shiftKey;\n        let accel = Platform.accelKey(event);\n        // Hyperlink logic.\n        if (grid) {\n            // Create cell config object.\n            const config = Private$5.createCellConfigObject(grid, hit);\n            // Retrieve cell renderer.\n            let renderer = grid.cellRenderers.get(config);\n            // Only process hyperlink renderers.\n            if (renderer instanceof HyperlinkRenderer) {\n                // Use the url param if it exists.\n                let url = CellRenderer.resolveOption(renderer.url, config);\n                // Otherwise assume cell value is the URL.\n                if (!url) {\n                    const format = TextRenderer.formatGeneric();\n                    url = format(config);\n                }\n                // Open the hyperlink only if user hit Ctrl+Click.\n                if (accel) {\n                    window.open(url);\n                    // Reset cursor default after clicking\n                    const cursor = this.cursorForHandle('none');\n                    grid.viewport.node.style.cursor = cursor;\n                    // Not applying selections if navigating away.\n                    return;\n                }\n            }\n        }\n        // If the hit test is the body region, the only option is select.\n        if (region === 'body') {\n            // Fetch the selection model.\n            let model = grid.selectionModel;\n            // Bail early if there is no selection model.\n            if (!model) {\n                return;\n            }\n            // Override the document cursor.\n            let override = Drag.overrideCursor('default');\n            // Set up the press data.\n            this._pressData = {\n                type: 'select',\n                region,\n                row,\n                column,\n                override,\n                localX: -1,\n                localY: -1,\n                timeout: -1\n            };\n            // Set up the selection variables.\n            let r1;\n            let c1;\n            let r2;\n            let c2;\n            let cursorRow;\n            let cursorColumn;\n            let clear;\n            // Accel == new selection, keep old selections.\n            if (accel) {\n                r1 = row;\n                r2 = row;\n                c1 = column;\n                c2 = column;\n                cursorRow = row;\n                cursorColumn = column;\n                clear = 'none';\n            }\n            else if (shift) {\n                r1 = model.cursorRow;\n                r2 = row;\n                c1 = model.cursorColumn;\n                c2 = column;\n                cursorRow = model.cursorRow;\n                cursorColumn = model.cursorColumn;\n                clear = 'current';\n            }\n            else {\n                r1 = row;\n                r2 = row;\n                c1 = column;\n                c2 = column;\n                cursorRow = row;\n                cursorColumn = column;\n                clear = 'all';\n            }\n            // Make the selection.\n            model.select({ r1, c1, r2, c2, cursorRow, cursorColumn, clear });\n            // Done.\n            return;\n        }\n        // Otherwise, the hit test is on a header region.\n        // Convert the hit test into a part.\n        let handle = Private$5.resizeHandleForHitTest(hit);\n        // Fetch the cursor for the handle.\n        let cursor = this.cursorForHandle(handle);\n        // Handle horizontal resize.\n        if (handle === 'left' || handle === 'right') {\n            // Set up the resize data type.\n            const type = 'column-resize';\n            // Determine the column region.\n            let rgn = region === 'column-header' ? 'body' : 'row-header';\n            // Determine the section index.\n            let index = handle === 'left' ? column - 1 : column;\n            // Fetch the section size.\n            let size = grid.columnSize(rgn, index);\n            // Override the document cursor.\n            let override = Drag.overrideCursor(cursor);\n            // Create the temporary press data.\n            this._pressData = { type, region: rgn, index, size, clientX, override };\n            // Done.\n            return;\n        }\n        // Handle vertical resize\n        if (handle === 'top' || handle === 'bottom') {\n            // Set up the resize data type.\n            const type = 'row-resize';\n            // Determine the row region.\n            let rgn = region === 'row-header' ? 'body' : 'column-header';\n            // Determine the section index.\n            let index = handle === 'top' ? row - 1 : row;\n            // Fetch the section size.\n            let size = grid.rowSize(rgn, index);\n            // Override the document cursor.\n            let override = Drag.overrideCursor(cursor);\n            // Create the temporary press data.\n            this._pressData = { type, region: rgn, index, size, clientY, override };\n            // Done.\n            return;\n        }\n        // Otherwise, the only option is select.\n        // Fetch the selection model.\n        let model = grid.selectionModel;\n        // Bail if there is no selection model.\n        if (!model) {\n            return;\n        }\n        // Override the document cursor.\n        let override = Drag.overrideCursor('default');\n        // Set up the press data.\n        this._pressData = {\n            type: 'select',\n            region,\n            row,\n            column,\n            override,\n            localX: -1,\n            localY: -1,\n            timeout: -1\n        };\n        // Set up the selection variables.\n        let r1;\n        let c1;\n        let r2;\n        let c2;\n        let cursorRow;\n        let cursorColumn;\n        let clear;\n        // Compute the selection based on the pressed region.\n        if (region === 'corner-header') {\n            r1 = 0;\n            r2 = Infinity;\n            c1 = 0;\n            c2 = Infinity;\n            cursorRow = accel ? 0 : shift ? model.cursorRow : 0;\n            cursorColumn = accel ? 0 : shift ? model.cursorColumn : 0;\n            clear = accel ? 'none' : shift ? 'current' : 'all';\n        }\n        else if (region === 'row-header') {\n            r1 = accel ? row : shift ? model.cursorRow : row;\n            r2 = row;\n            const selectionGroup = { r1: r1, c1: 0, r2: r2, c2: 0 };\n            const joinedGroup = CellGroup.joinCellGroupsIntersectingAtAxis(grid.dataModel, ['row-header', 'body'], 'row', selectionGroup);\n            // Check if there are any merges\n            if (joinedGroup.r1 != Number.MAX_VALUE) {\n                r1 = joinedGroup.r1;\n                r2 = joinedGroup.r2;\n            }\n            c1 = 0;\n            c2 = Infinity;\n            cursorRow = accel ? row : shift ? model.cursorRow : row;\n            cursorColumn = accel ? 0 : shift ? model.cursorColumn : 0;\n            clear = accel ? 'none' : shift ? 'current' : 'all';\n        }\n        else if (region === 'column-header') {\n            r1 = 0;\n            r2 = Infinity;\n            c1 = accel ? column : shift ? model.cursorColumn : column;\n            c2 = column;\n            const selectionGroup = { r1: 0, c1: c1, r2: 0, c2: c2 };\n            const joinedGroup = CellGroup.joinCellGroupsIntersectingAtAxis(grid.dataModel, ['column-header', 'body'], 'column', selectionGroup);\n            // Check if there are any merges\n            if (joinedGroup.c1 != Number.MAX_VALUE) {\n                c1 = joinedGroup.c1;\n                c2 = joinedGroup.c2;\n            }\n            cursorRow = accel ? 0 : shift ? model.cursorRow : 0;\n            cursorColumn = accel ? column : shift ? model.cursorColumn : column;\n            clear = accel ? 'none' : shift ? 'current' : 'all';\n        }\n        else {\n            r1 = accel ? row : shift ? model.cursorRow : row;\n            r2 = row;\n            c1 = accel ? column : shift ? model.cursorColumn : column;\n            c2 = column;\n            cursorRow = accel ? row : shift ? model.cursorRow : row;\n            cursorColumn = accel ? column : shift ? model.cursorColumn : column;\n            clear = accel ? 'none' : shift ? 'current' : 'all';\n        }\n        // Make the selection.\n        model.select({ r1, c1, r2, c2, cursorRow, cursorColumn, clear });\n    }\n    /**\n     * Handle the mouse move event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse move event of interest.\n     */\n    onMouseMove(grid, event) {\n        // Fetch the press data.\n        const data = this._pressData;\n        // Bail early if there is no press data.\n        if (!data) {\n            return;\n        }\n        // Handle a row resize.\n        if (data.type === 'row-resize') {\n            let dy = event.clientY - data.clientY;\n            grid.resizeRow(data.region, data.index, data.size + dy);\n            return;\n        }\n        // Handle a column resize.\n        if (data.type === 'column-resize') {\n            let dx = event.clientX - data.clientX;\n            grid.resizeColumn(data.region, data.index, data.size + dx);\n            return;\n        }\n        // Otherwise, it's a select.\n        // Mouse moves during a corner header press are a no-op.\n        if (data.region === 'corner-header') {\n            return;\n        }\n        // Fetch the selection model.\n        let model = grid.selectionModel;\n        // Bail early if the selection model was removed.\n        if (!model) {\n            return;\n        }\n        // Map to local coordinates.\n        let { lx, ly } = grid.mapToLocal(event.clientX, event.clientY);\n        // Update the local mouse coordinates in the press data.\n        data.localX = lx;\n        data.localY = ly;\n        // Fetch the grid geometry.\n        let hw = grid.headerWidth;\n        let hh = grid.headerHeight;\n        let vpw = grid.viewportWidth;\n        let vph = grid.viewportHeight;\n        let sx = grid.scrollX;\n        let sy = grid.scrollY;\n        let msx = grid.maxScrollY;\n        let msy = grid.maxScrollY;\n        // Fetch the selection mode.\n        let mode = model.selectionMode;\n        // Set up the timeout variable.\n        let timeout = -1;\n        // Compute the timemout based on hit region and mouse position.\n        if (data.region === 'row-header' || mode === 'row') {\n            if (ly < hh && sy > 0) {\n                timeout = Private$5.computeTimeout(hh - ly);\n            }\n            else if (ly >= vph && sy < msy) {\n                timeout = Private$5.computeTimeout(ly - vph);\n            }\n        }\n        else if (data.region === 'column-header' || mode === 'column') {\n            if (lx < hw && sx > 0) {\n                timeout = Private$5.computeTimeout(hw - lx);\n            }\n            else if (lx >= vpw && sx < msx) {\n                timeout = Private$5.computeTimeout(lx - vpw);\n            }\n        }\n        else {\n            if (lx < hw && sx > 0) {\n                timeout = Private$5.computeTimeout(hw - lx);\n            }\n            else if (lx >= vpw && sx < msx) {\n                timeout = Private$5.computeTimeout(lx - vpw);\n            }\n            else if (ly < hh && sy > 0) {\n                timeout = Private$5.computeTimeout(hh - ly);\n            }\n            else if (ly >= vph && sy < msy) {\n                timeout = Private$5.computeTimeout(ly - vph);\n            }\n        }\n        // Update or initiate the autoselect if needed.\n        if (timeout >= 0) {\n            if (data.timeout < 0) {\n                data.timeout = timeout;\n                setTimeout(() => {\n                    Private$5.autoselect(grid, data);\n                }, timeout);\n            }\n            else {\n                data.timeout = timeout;\n            }\n            return;\n        }\n        // Otherwise, clear the autoselect timeout.\n        data.timeout = -1;\n        // Map the position to virtual coordinates.\n        let { vx, vy } = grid.mapToVirtual(event.clientX, event.clientY);\n        // Clamp the coordinates to the limits.\n        vx = Math.max(0, Math.min(vx, grid.bodyWidth - 1));\n        vy = Math.max(0, Math.min(vy, grid.bodyHeight - 1));\n        // Set up the selection variables.\n        let r1;\n        let c1;\n        let r2;\n        let c2;\n        let cursorRow = model.cursorRow;\n        let cursorColumn = model.cursorColumn;\n        let clear = 'current';\n        // Compute the selection based pressed region.\n        if (data.region === 'row-header' || mode === 'row') {\n            r1 = data.row;\n            r2 = grid.rowAt('body', vy);\n            const selectionGroup = { r1: r1, c1: 0, r2: r2, c2: 0 };\n            const joinedGroup = CellGroup.joinCellGroupsIntersectingAtAxis(grid.dataModel, ['row-header', 'body'], 'row', selectionGroup);\n            // Check if there are any merges\n            if (joinedGroup.r1 != Number.MAX_VALUE) {\n                r1 = Math.min(r1, joinedGroup.r1);\n                r2 = Math.max(r2, joinedGroup.r2);\n            }\n            c1 = 0;\n            c2 = Infinity;\n        }\n        else if (data.region === 'column-header' || mode === 'column') {\n            r1 = 0;\n            r2 = Infinity;\n            c1 = data.column;\n            c2 = grid.columnAt('body', vx);\n            const selectionGroup = { r1: 0, c1: c1, r2: 0, c2: c2 };\n            const joinedGroup = CellGroup.joinCellGroupsIntersectingAtAxis(grid.dataModel, ['column-header', 'body'], 'column', selectionGroup);\n            // Check if there are any merges\n            if (joinedGroup.c1 != Number.MAX_VALUE) {\n                c1 = joinedGroup.c1;\n                c2 = joinedGroup.c2;\n            }\n        }\n        else {\n            r1 = cursorRow;\n            r2 = grid.rowAt('body', vy);\n            c1 = cursorColumn;\n            c2 = grid.columnAt('body', vx);\n        }\n        // Make the selection.\n        model.select({ r1, c1, r2, c2, cursorRow, cursorColumn, clear });\n    }\n    /**\n     * Handle the mouse up event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse up event of interest.\n     */\n    onMouseUp(grid, event) {\n        this.release();\n    }\n    /**\n     * Handle the mouse double click event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse up event of interest.\n     */\n    onMouseDoubleClick(grid, event) {\n        if (!grid.dataModel) {\n            this.release();\n            return;\n        }\n        // Unpack the event.\n        let { clientX, clientY } = event;\n        // Hit test the grid.\n        let hit = grid.hitTest(clientX, clientY);\n        // Unpack the hit test.\n        let { region, row, column } = hit;\n        if (region === 'void') {\n            this.release();\n            return;\n        }\n        if (region === 'column-header' || region === 'corner-header') {\n            // Convert the hit test into a part.\n            const handle = Private$5.resizeHandleForHitTest(hit);\n            if (handle === 'left' || handle === 'right') {\n                let colIndex = handle === 'left' ? column - 1 : column;\n                let colRegion = region === 'column-header' ? 'body' : 'row-header';\n                if (colIndex < 0) {\n                    if (region === 'column-header') {\n                        // If the column is -1, it means we are in the corner header\n                        colIndex = grid.dataModel.columnCount('row-header') - 1;\n                        colRegion = 'row-header';\n                    }\n                    else {\n                        // If we are on the left edge of the row header, do nothing\n                        return;\n                    }\n                }\n                grid.resizeColumn(colRegion, colIndex, null);\n            }\n        }\n        if (region === 'body') {\n            if (grid.editable) {\n                const cell = {\n                    grid: grid,\n                    row: row,\n                    column: column\n                };\n                grid.editorController.edit(cell);\n            }\n        }\n        this.release();\n    }\n    /**\n     * Handle the context menu event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The context menu event of interest.\n     */\n    onContextMenu(grid, event) {\n        // TODO support user-defined context menus\n    }\n    /**\n     * Handle the wheel event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The wheel event of interest.\n     */\n    onWheel(grid, event) {\n        // Bail if a mouse press is in progress.\n        if (this._pressData) {\n            return;\n        }\n        // Extract the delta X and Y movement.\n        let dx = event.deltaX;\n        let dy = event.deltaY;\n        // Convert the delta values to pixel values.\n        switch (event.deltaMode) {\n            case 0: // DOM_DELTA_PIXEL\n                break;\n            case 1: {\n                // DOM_DELTA_LINE\n                let ds = grid.defaultSizes;\n                dx *= ds.columnWidth;\n                dy *= ds.rowHeight;\n                break;\n            }\n            case 2: // DOM_DELTA_PAGE\n                dx *= grid.pageWidth;\n                dy *= grid.pageHeight;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Only scroll and stop the event propagation if needed.\n        if (\n        // Scrolling left and not reached min already\n        (dx < 0 && grid.scrollX !== 0) ||\n            // Scrolling right and not reached max already\n            (dx > 0 && grid.scrollX !== grid.maxScrollX) ||\n            // Scrolling top and not reached min already\n            (dy < 0 && grid.scrollY !== 0) ||\n            // Scrolling down and not reached max already\n            (dy > 0 && grid.scrollY !== grid.maxScrollY)) {\n            event.preventDefault();\n            event.stopPropagation();\n            // Scroll by the desired amount.\n            grid.scrollBy(dx, dy);\n        }\n    }\n    /**\n     * Convert a resize handle into a cursor.\n     */\n    cursorForHandle(handle) {\n        return Private$5.cursorMap[handle];\n    }\n    /**\n     * Get the current pressData\n     */\n    get pressData() {\n        return this._pressData;\n    }\n}\n/**\n * The namespace for the module implementation details.\n */\nvar Private$5;\n(function (Private) {\n    /**\n     * Creates a CellConfig object from a hit region.\n     */\n    function createCellConfigObject(grid, hit) {\n        const { region, row, column } = hit;\n        // Terminate call if region is void.\n        if (region === 'void') {\n            return undefined;\n        }\n        // Augment hit region params with value and metadata.\n        const value = grid.dataModel.data(region, row, column);\n        const metadata = grid.dataModel.metadata(region, row, column);\n        // Create cell config object to retrieve cell renderer.\n        const config = {\n            ...hit,\n            value: value,\n            metadata: metadata\n        };\n        return config;\n    }\n    Private.createCellConfigObject = createCellConfigObject;\n    /**\n     * Get the resize handle for a grid hit test.\n     */\n    function resizeHandleForHitTest(hit) {\n        // Fetch the row and column.\n        let r = hit.row;\n        let c = hit.column;\n        // Fetch the leading and trailing sizes.\n        let lw = hit.x;\n        let lh = hit.y;\n        let tw = hit.width - hit.x;\n        let th = hit.height - hit.y;\n        // Set up the result variable.\n        let result;\n        // Dispatch based on hit test region.\n        switch (hit.region) {\n            case 'corner-header':\n                if (c > 0 && lw <= 5) {\n                    result = 'left';\n                }\n                else if (tw <= 6) {\n                    result = 'right';\n                }\n                else if (r > 0 && lh <= 5) {\n                    result = 'top';\n                }\n                else if (th <= 6) {\n                    result = 'bottom';\n                }\n                else {\n                    result = 'none';\n                }\n                break;\n            case 'column-header':\n                if (c > 0 && lw <= 5) {\n                    result = 'left';\n                }\n                else if (tw <= 6) {\n                    result = 'right';\n                }\n                else if (r > 0 && lh <= 5) {\n                    result = 'top';\n                }\n                else if (th <= 6) {\n                    result = 'bottom';\n                }\n                else {\n                    result = 'none';\n                }\n                break;\n            case 'row-header':\n                if (c > 0 && lw <= 5) {\n                    result = 'left';\n                }\n                else if (tw <= 6) {\n                    result = 'right';\n                }\n                else if (r > 0 && lh <= 5) {\n                    result = 'top';\n                }\n                else if (th <= 6) {\n                    result = 'bottom';\n                }\n                else {\n                    result = 'none';\n                }\n                break;\n            case 'body':\n                result = 'none';\n                break;\n            case 'void':\n                result = 'none';\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Return the result.\n        return result;\n    }\n    Private.resizeHandleForHitTest = resizeHandleForHitTest;\n    /**\n     * A timer callback for the autoselect loop.\n     *\n     * @param grid - The datagrid of interest.\n     *\n     * @param data - The select data of interest.\n     */\n    function autoselect(grid, data) {\n        // Bail early if the timeout has been reset.\n        if (data.timeout < 0) {\n            return;\n        }\n        // Fetch the selection model.\n        let model = grid.selectionModel;\n        // Bail early if the selection model has been removed.\n        if (!model) {\n            return;\n        }\n        // Fetch the current selection.\n        let cs = model.currentSelection();\n        // Bail early if there is no current selection.\n        if (!cs) {\n            return;\n        }\n        // Fetch local X and Y coordinates of the mouse.\n        let lx = data.localX;\n        let ly = data.localY;\n        // Set up the selection variables.\n        let r1 = cs.r1;\n        let c1 = cs.c1;\n        let r2 = cs.r2;\n        let c2 = cs.c2;\n        let cursorRow = model.cursorRow;\n        let cursorColumn = model.cursorColumn;\n        let clear = 'current';\n        // Fetch the grid geometry.\n        let hw = grid.headerWidth;\n        let hh = grid.headerHeight;\n        let vpw = grid.viewportWidth;\n        let vph = grid.viewportHeight;\n        // Fetch the selection mode.\n        let mode = model.selectionMode;\n        // Update the selection based on the hit region.\n        if (data.region === 'row-header' || mode === 'row') {\n            r2 += ly <= hh ? -1 : ly >= vph ? 1 : 0;\n        }\n        else if (data.region === 'column-header' || mode === 'column') {\n            c2 += lx <= hw ? -1 : lx >= vpw ? 1 : 0;\n        }\n        else {\n            r2 += ly <= hh ? -1 : ly >= vph ? 1 : 0;\n            c2 += lx <= hw ? -1 : lx >= vpw ? 1 : 0;\n        }\n        // Update the current selection.\n        model.select({ r1, c1, r2, c2, cursorRow, cursorColumn, clear });\n        // Re-fetch the current selection.\n        cs = model.currentSelection();\n        // Bail if there is no selection.\n        if (!cs) {\n            return;\n        }\n        // Scroll the grid based on the hit region.\n        if (data.region === 'row-header' || mode === 'row') {\n            grid.scrollToRow(cs.r2);\n        }\n        else if (data.region === 'column-header' || mode == 'column') {\n            grid.scrollToColumn(cs.c2);\n        }\n        else if (mode === 'cell') {\n            grid.scrollToCell(cs.r2, cs.c2);\n        }\n        // Schedule the next call with the current timeout.\n        setTimeout(() => {\n            autoselect(grid, data);\n        }, data.timeout);\n    }\n    Private.autoselect = autoselect;\n    /**\n     * Compute the scroll timeout for the given delta distance.\n     *\n     * @param delta - The delta pixels from the origin.\n     *\n     * @returns The scaled timeout in milliseconds.\n     */\n    function computeTimeout(delta) {\n        return 5 + 120 * (1 - Math.min(128, Math.abs(delta)) / 128);\n    }\n    Private.computeTimeout = computeTimeout;\n    /**\n     * A mapping of resize handle to cursor.\n     */\n    Private.cursorMap = {\n        top: 'ns-resize',\n        left: 'ew-resize',\n        right: 'ew-resize',\n        bottom: 'ns-resize',\n        hyperlink: 'pointer',\n        none: 'default'\n    };\n})(Private$5 || (Private$5 = {}));\n\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * A base class for creating data grid selection models.\n *\n * #### Notes\n * If the predefined selection models are insufficient for a particular\n * use case, a custom model can be defined which derives from this class.\n */\nclass SelectionModel {\n    /**\n     * Construct a new selection model.\n     *\n     * @param options - The options for initializing the model.\n     */\n    constructor(options) {\n        this._changed = new Signal(this);\n        this._selectionMode = 'cell';\n        this.dataModel = options.dataModel;\n        this._selectionMode = options.selectionMode || 'cell';\n        this.dataModel.changed.connect(this.onDataModelChanged, this);\n    }\n    /**\n     * A signal emitted when the selection model has changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Get the selection mode for the model.\n     */\n    get selectionMode() {\n        return this._selectionMode;\n    }\n    /**\n     * Set the selection mode for the model.\n     *\n     * #### Notes\n     * This will clear the selection model.\n     */\n    set selectionMode(value) {\n        // Bail early if the mode does not change.\n        if (this._selectionMode === value) {\n            return;\n        }\n        // Update the internal mode.\n        this._selectionMode = value;\n        // Clear the current selections.\n        this.clear();\n    }\n    /**\n     * Test whether any selection intersects a row.\n     *\n     * @param index - The row index of interest.\n     *\n     * @returns Whether any selection intersects the row.\n     *\n     * #### Notes\n     * This method may be reimplemented in a subclass.\n     */\n    isRowSelected(index) {\n        return some(this.selections(), s => Private$4.containsRow(s, index));\n    }\n    /**\n     * Test whether any selection intersects a column.\n     *\n     * @param index - The column index of interest.\n     *\n     * @returns Whether any selection intersects the column.\n     *\n     * #### Notes\n     * This method may be reimplemented in a subclass.\n     */\n    isColumnSelected(index) {\n        return some(this.selections(), s => Private$4.containsColumn(s, index));\n    }\n    /**\n     * Test whether any selection intersects a cell.\n     *\n     * @param row - The row index of interest.\n     *\n     * @param column - The column index of interest.\n     *\n     * @returns Whether any selection intersects the cell.\n     *\n     * #### Notes\n     * This method may be reimplemented in a subclass.\n     */\n    isCellSelected(row, column) {\n        return some(this.selections(), s => Private$4.containsCell(s, row, column));\n    }\n    /**\n     * A signal handler for the data model `changed` signal.\n     *\n     * @param args - The arguments for the signal.\n     *\n     * #### Notes\n     * Selection model implementations should update their selections\n     * in a manner that is relevant for the changes to the data model.\n     *\n     * The default implementation of this method is a no-op.\n     */\n    onDataModelChanged(sender, args) {\n        // pass\n    }\n    /**\n     * Emit the `changed` signal for the selection model.\n     *\n     * #### Notes\n     * Subclasses should call this method whenever the selection model\n     * has changed so that attached data grids can update themselves.\n     */\n    emitChanged() {\n        this._changed.emit(undefined);\n    }\n}\n/**\n * The namespace for the module implementation details.\n */\nvar Private$4;\n(function (Private) {\n    /**\n     * Test whether a selection contains a given row.\n     */\n    function containsRow(selection, row) {\n        let { r1, r2 } = selection;\n        return (row >= r1 && row <= r2) || (row >= r2 && row <= r1);\n    }\n    Private.containsRow = containsRow;\n    /**\n     * Test whether a selection contains a given column.\n     */\n    function containsColumn(selection, column) {\n        let { c1, c2 } = selection;\n        return (column >= c1 && column <= c2) || (column >= c2 && column <= c1);\n    }\n    Private.containsColumn = containsColumn;\n    /**\n     * Test whether a selection contains a given cell.\n     */\n    function containsCell(selection, row, column) {\n        return containsRow(selection, row) && containsColumn(selection, column);\n    }\n    Private.containsCell = containsCell;\n})(Private$4 || (Private$4 = {}));\n\n/**\n * A basic selection model implementation.\n *\n * #### Notes\n * This selection model is sufficient for most use cases where\n * structural knowledge of the data source is *not* required.\n */\nclass BasicSelectionModel extends SelectionModel {\n    constructor() {\n        super(...arguments);\n        this._cursorRow = -1;\n        this._cursorColumn = -1;\n        this._cursorRectIndex = -1;\n        this._selections = [];\n    }\n    /**\n     * Whether the selection model is empty.\n     */\n    get isEmpty() {\n        return this._selections.length === 0;\n    }\n    /**\n     * The row index of the cursor.\n     */\n    get cursorRow() {\n        return this._cursorRow;\n    }\n    /**\n     * The column index of the cursor.\n     */\n    get cursorColumn() {\n        return this._cursorColumn;\n    }\n    /**\n     * Move cursor down/up/left/right while making sure it remains\n     * within the bounds of selected rectangles\n     *\n     * @param direction - The direction of the movement.\n     */\n    moveCursorWithinSelections(direction) {\n        // Bail early if there are no selections or no existing cursor\n        if (this.isEmpty || this.cursorRow === -1 || this._cursorColumn === -1) {\n            return;\n        }\n        // Bail early if only single cell is selected\n        const firstSelection = this._selections[0];\n        if (this._selections.length === 1 &&\n            firstSelection.r1 === firstSelection.r2 &&\n            firstSelection.c1 === firstSelection.c2) {\n            return;\n        }\n        // start from last selection rectangle\n        if (this._cursorRectIndex === -1) {\n            this._cursorRectIndex = this._selections.length - 1;\n        }\n        let cursorRect = this._selections[this._cursorRectIndex];\n        const dr = direction === 'down' ? 1 : direction === 'up' ? -1 : 0;\n        const dc = direction === 'right' ? 1 : direction === 'left' ? -1 : 0;\n        let newRow = this._cursorRow + dr;\n        let newColumn = this._cursorColumn + dc;\n        const r1 = Math.min(cursorRect.r1, cursorRect.r2);\n        const r2 = Math.max(cursorRect.r1, cursorRect.r2);\n        const c1 = Math.min(cursorRect.c1, cursorRect.c2);\n        const c2 = Math.max(cursorRect.c1, cursorRect.c2);\n        const moveToNextRect = () => {\n            this._cursorRectIndex =\n                (this._cursorRectIndex + 1) % this._selections.length;\n            cursorRect = this._selections[this._cursorRectIndex];\n            newRow = Math.min(cursorRect.r1, cursorRect.r2);\n            newColumn = Math.min(cursorRect.c1, cursorRect.c2);\n        };\n        const moveToPreviousRect = () => {\n            this._cursorRectIndex =\n                this._cursorRectIndex === 0\n                    ? this._selections.length - 1\n                    : this._cursorRectIndex - 1;\n            cursorRect = this._selections[this._cursorRectIndex];\n            newRow = Math.max(cursorRect.r1, cursorRect.r2);\n            newColumn = Math.max(cursorRect.c1, cursorRect.c2);\n        };\n        if (newRow > r2) {\n            newRow = r1;\n            newColumn += 1;\n            if (newColumn > c2) {\n                moveToNextRect();\n            }\n        }\n        else if (newRow < r1) {\n            newRow = r2;\n            newColumn -= 1;\n            if (newColumn < c1) {\n                moveToPreviousRect();\n            }\n        }\n        else if (newColumn > c2) {\n            newColumn = c1;\n            newRow += 1;\n            if (newRow > r2) {\n                moveToNextRect();\n            }\n        }\n        else if (newColumn < c1) {\n            newColumn = c2;\n            newRow -= 1;\n            if (newRow < r1) {\n                moveToPreviousRect();\n            }\n        }\n        this._cursorRow = newRow;\n        this._cursorColumn = newColumn;\n        // Emit the changed signal.\n        this.emitChanged();\n    }\n    /**\n     * Get the current selection in the selection model.\n     *\n     * @returns The current selection or `null`.\n     *\n     * #### Notes\n     * This is the selection which holds the cursor.\n     */\n    currentSelection() {\n        return this._selections[this._selections.length - 1] || null;\n    }\n    /**\n     * Get an iterator of the selections in the model.\n     *\n     * @returns A new iterator of the current selections.\n     *\n     * #### Notes\n     * The data grid will render the selections in order.\n     */\n    *selections() {\n        yield* this._selections;\n    }\n    /**\n     * Select the specified cells.\n     *\n     * @param args - The arguments for the selection.\n     */\n    select(args) {\n        // Fetch the current row and column counts;\n        let rowCount = this.dataModel.rowCount('body');\n        let columnCount = this.dataModel.columnCount('body');\n        // Bail early if there is no content.\n        if (rowCount <= 0 || columnCount <= 0) {\n            return;\n        }\n        // Unpack the arguments.\n        let { r1, c1, r2, c2, cursorRow, cursorColumn, clear } = args;\n        // Clear the necessary selections.\n        if (clear === 'all') {\n            this._selections.length = 0;\n        }\n        else if (clear === 'current') {\n            this._selections.pop();\n        }\n        // Clamp to the data model bounds.\n        r1 = Math.max(0, Math.min(r1, rowCount - 1));\n        r2 = Math.max(0, Math.min(r2, rowCount - 1));\n        c1 = Math.max(0, Math.min(c1, columnCount - 1));\n        c2 = Math.max(0, Math.min(c2, columnCount - 1));\n        // Indicate if a row/column has already been selected.\n        let alreadySelected = false;\n        // Handle the selection mode.\n        if (this.selectionMode === 'row') {\n            c1 = 0;\n            c2 = columnCount - 1;\n            alreadySelected =\n                this._selections.filter(selection => selection.r1 === r1).length !== 0;\n            // Remove from selections if already selected.\n            this._selections = alreadySelected\n                ? this._selections.filter(selection => selection.r1 !== r1)\n                : this._selections;\n        }\n        else if (this.selectionMode === 'column') {\n            r1 = 0;\n            r2 = rowCount - 1;\n            alreadySelected =\n                this._selections.filter(selection => selection.c1 === c1).length !== 0;\n            // Remove from selections if already selected.\n            this._selections = alreadySelected\n                ? this._selections.filter(selection => selection.c1 !== c1)\n                : this._selections;\n        }\n        // Alias the cursor row and column.\n        let cr = cursorRow;\n        let cc = cursorColumn;\n        // Compute the new cursor location.\n        if (cr < 0 || (cr < r1 && cr < r2) || (cr > r1 && cr > r2)) {\n            cr = r1;\n        }\n        if (cc < 0 || (cc < c1 && cc < c2) || (cc > c1 && cc > c2)) {\n            cc = c1;\n        }\n        // Update the cursor.\n        this._cursorRow = cr;\n        this._cursorColumn = cc;\n        this._cursorRectIndex = this._selections.length;\n        // Add the new selection if it wasn't already selected.\n        if (!alreadySelected) {\n            this._selections.push({ r1, c1, r2, c2 });\n        }\n        // Emit the changed signal.\n        this.emitChanged();\n    }\n    /**\n     * Clear all selections in the selection model.\n     */\n    clear() {\n        // Bail early if there are no selections.\n        if (this._selections.length === 0) {\n            return;\n        }\n        // Reset the internal state.\n        this._cursorRow = -1;\n        this._cursorColumn = -1;\n        this._cursorRectIndex = -1;\n        this._selections.length = 0;\n        // Emit the changed signal.\n        this.emitChanged();\n    }\n    /**\n     * A signal handler for the data model `changed` signal.\n     *\n     * @param args - The arguments for the signal.\n     */\n    onDataModelChanged(sender, args) {\n        // Bail early if the model has no current selections.\n        if (this._selections.length === 0) {\n            return;\n        }\n        // Bail early if the cells have changed in place.\n        if (args.type === 'cells-changed') {\n            return;\n        }\n        // Bail early if there is no change to the row or column count.\n        if (args.type === 'rows-moved' || args.type === 'columns-moved') {\n            return;\n        }\n        // Fetch the last row and column index.\n        let lr = sender.rowCount('body') - 1;\n        let lc = sender.columnCount('body') - 1;\n        // Bail early if the data model is empty.\n        if (lr < 0 || lc < 0) {\n            this._selections.length = 0;\n            this.emitChanged();\n            return;\n        }\n        // Fetch the selection mode.\n        let mode = this.selectionMode;\n        // Set up the assignment index variable.\n        let j = 0;\n        // Iterate over the current selections.\n        for (let i = 0, n = this._selections.length; i < n; ++i) {\n            // Unpack the selection.\n            let { r1, c1, r2, c2 } = this._selections[i];\n            // Skip the selection if it will disappear.\n            if ((lr < r1 && lr < r2) || (lc < c1 && lc < c2)) {\n                continue;\n            }\n            // Modify the bounds based on the selection mode.\n            if (mode === 'row') {\n                r1 = Math.max(0, Math.min(r1, lr));\n                r2 = Math.max(0, Math.min(r2, lr));\n                c1 = 0;\n                c2 = lc;\n            }\n            else if (mode === 'column') {\n                r1 = 0;\n                r2 = lr;\n                c1 = Math.max(0, Math.min(c1, lc));\n                c2 = Math.max(0, Math.min(c2, lc));\n            }\n            else {\n                r1 = Math.max(0, Math.min(r1, lr));\n                r2 = Math.max(0, Math.min(r2, lr));\n                c1 = Math.max(0, Math.min(c1, lc));\n                c2 = Math.max(0, Math.min(c2, lc));\n            }\n            // Assign the modified selection to the array.\n            this._selections[j++] = { r1, c1, r2, c2 };\n        }\n        // Remove the stale selections.\n        this._selections.length = j;\n        // Emit the changed signal.\n        this.emitChanged();\n    }\n}\n\n/*\n * Copyright (c) Jupyter Development Team.\n * Distributed under the terms of the Modified BSD License.\n */\n// default validation error message\nconst DEFAULT_INVALID_INPUT_MESSAGE = 'Invalid input!';\n/**\n * A cell input validator object which always returns valid.\n */\nclass PassInputValidator {\n    /**\n     * Validate cell input.\n     *\n     * @param cell - The object holding cell configuration data.\n     *\n     * @param value - The cell value input.\n     *\n     * @returns An object with validation result.\n     */\n    validate(cell, value) {\n        return { valid: true };\n    }\n}\n/**\n * Text cell input validator.\n */\nclass TextInputValidator {\n    constructor() {\n        /**\n         * Minimum text length\n         *\n         * The default is Number.NaN, meaning no minimum constraint\n         */\n        this.minLength = Number.NaN;\n        /**\n         * Maximum text length\n         *\n         * The default is Number.NaN, meaning no maximum constraint\n         */\n        this.maxLength = Number.NaN;\n        /**\n         * Required text pattern as regular expression\n         *\n         * The default is null, meaning no pattern constraint\n         */\n        this.pattern = null;\n    }\n    /**\n     * Validate cell input.\n     *\n     * @param cell - The object holding cell configuration data.\n     *\n     * @param value - The cell value input.\n     *\n     * @returns An object with validation result.\n     */\n    validate(cell, value) {\n        if (value === null) {\n            return { valid: true };\n        }\n        if (typeof value !== 'string') {\n            return {\n                valid: false,\n                message: 'Input must be valid text'\n            };\n        }\n        if (!isNaN(this.minLength) && value.length < this.minLength) {\n            return {\n                valid: false,\n                message: `Text length must be greater than ${this.minLength}`\n            };\n        }\n        if (!isNaN(this.maxLength) && value.length > this.maxLength) {\n            return {\n                valid: false,\n                message: `Text length must be less than ${this.maxLength}`\n            };\n        }\n        if (this.pattern && !this.pattern.test(value)) {\n            return {\n                valid: false,\n                message: `Text doesn't match the required pattern`\n            };\n        }\n        return { valid: true };\n    }\n}\n/**\n * Integer cell input validator.\n */\nclass IntegerInputValidator {\n    constructor() {\n        /**\n         * Minimum value\n         *\n         * The default is Number.NaN, meaning no minimum constraint\n         */\n        this.min = Number.NaN;\n        /**\n         * Maximum value\n         *\n         * The default is Number.NaN, meaning no maximum constraint\n         */\n        this.max = Number.NaN;\n    }\n    /**\n     * Validate cell input.\n     *\n     * @param cell - The object holding cell configuration data.\n     *\n     * @param value - The cell value input.\n     *\n     * @returns An object with validation result.\n     */\n    validate(cell, value) {\n        if (value === null) {\n            return { valid: true };\n        }\n        if (isNaN(value) || value % 1 !== 0) {\n            return {\n                valid: false,\n                message: 'Input must be valid integer'\n            };\n        }\n        if (!isNaN(this.min) && value < this.min) {\n            return {\n                valid: false,\n                message: `Input must be greater than ${this.min}`\n            };\n        }\n        if (!isNaN(this.max) && value > this.max) {\n            return {\n                valid: false,\n                message: `Input must be less than ${this.max}`\n            };\n        }\n        return { valid: true };\n    }\n}\n/**\n * Real number cell input validator.\n */\nclass NumberInputValidator {\n    constructor() {\n        /**\n         * Minimum value\n         *\n         * The default is Number.NaN, meaning no minimum constraint\n         */\n        this.min = Number.NaN;\n        /**\n         * Maximum value\n         *\n         * The default is Number.NaN, meaning no maximum constraint\n         */\n        this.max = Number.NaN;\n    }\n    /**\n     * Validate cell input.\n     *\n     * @param cell - The object holding cell configuration data.\n     *\n     * @param value - The cell value input.\n     *\n     * @returns An object with validation result.\n     */\n    validate(cell, value) {\n        if (value === null) {\n            return { valid: true };\n        }\n        if (isNaN(value)) {\n            return {\n                valid: false,\n                message: 'Input must be valid number'\n            };\n        }\n        if (!isNaN(this.min) && value < this.min) {\n            return {\n                valid: false,\n                message: `Input must be greater than ${this.min}`\n            };\n        }\n        if (!isNaN(this.max) && value > this.max) {\n            return {\n                valid: false,\n                message: `Input must be less than ${this.max}`\n            };\n        }\n        return { valid: true };\n    }\n}\n/**\n * An abstract base class that provides the most of the functionality\n * needed by a cell editor. All of the built-in cell editors\n * for various cell types are derived from this base class. Custom cell editors\n * can be easily implemented by extending this class.\n */\nclass CellEditor {\n    /**\n     * Construct a new cell editor.\n     */\n    constructor() {\n        /**\n         * A signal emitted when input changes.\n         */\n        this.inputChanged = new Signal(this);\n        /**\n         * Notification popup used to show validation error messages.\n         */\n        this.validityNotification = null;\n        /**\n         * Whether the cell editor is disposed.\n         */\n        this._disposed = false;\n        /**\n         * Whether the value input is valid.\n         */\n        this._validInput = true;\n        /**\n         * Grid wheel event handler.\n         */\n        this._gridWheelEventHandler = null;\n        this.inputChanged.connect(() => {\n            this.validate();\n        });\n    }\n    /**\n     * Whether the cell editor is disposed.\n     */\n    get isDisposed() {\n        return this._disposed;\n    }\n    /**\n     * Dispose of the resources held by cell editor.\n     */\n    dispose() {\n        if (this._disposed) {\n            return;\n        }\n        if (this._gridWheelEventHandler) {\n            this.cell.grid.node.removeEventListener('wheel', this._gridWheelEventHandler);\n            this._gridWheelEventHandler = null;\n        }\n        this._closeValidityNotification();\n        this._disposed = true;\n        this.cell.grid.node.removeChild(this.viewportOccluder);\n    }\n    /**\n     * Start editing the cell.\n     *\n     * @param cell - The object holding cell configuration data.\n     *\n     * @param options - The cell editing options.\n     */\n    edit(cell, options) {\n        this.cell = cell;\n        this.onCommit = options && options.onCommit;\n        this.onCancel = options && options.onCancel;\n        this.validator =\n            options && options.validator\n                ? options.validator\n                : this.createValidatorBasedOnType();\n        this._gridWheelEventHandler = () => {\n            this._closeValidityNotification();\n            this.updatePosition();\n        };\n        cell.grid.node.addEventListener('wheel', this._gridWheelEventHandler);\n        this._addContainer();\n        this.updatePosition();\n        this.startEditing();\n    }\n    /**\n     * Cancel editing the cell.\n     */\n    cancel() {\n        if (this._disposed) {\n            return;\n        }\n        this.dispose();\n        if (this.onCancel) {\n            this.onCancel();\n        }\n    }\n    /**\n     * Whether the value input is valid.\n     */\n    get validInput() {\n        return this._validInput;\n    }\n    /**\n     * Validate the cell input. Shows validation error notification when input is invalid.\n     */\n    validate() {\n        let value;\n        try {\n            value = this.getInput();\n        }\n        catch (error) {\n            console.log(`Input error: ${error.message}`);\n            this.setValidity(false, error.message || DEFAULT_INVALID_INPUT_MESSAGE);\n            return;\n        }\n        if (this.validator) {\n            const result = this.validator.validate(this.cell, value);\n            if (result.valid) {\n                this.setValidity(true);\n            }\n            else {\n                this.setValidity(false, result.message || DEFAULT_INVALID_INPUT_MESSAGE);\n            }\n        }\n        else {\n            this.setValidity(true);\n        }\n    }\n    /**\n     * Set validity flag.\n     *\n     * @param valid - Whether the input is valid.\n     *\n     * @param message - Notification message to show.\n     *\n     * If message is set to empty string (which is the default)\n     * existing notification popup is removed if any.\n     */\n    setValidity(valid, message = '') {\n        this._validInput = valid;\n        this._closeValidityNotification();\n        if (valid) {\n            this.editorContainer.classList.remove('lm-mod-invalid');\n        }\n        else {\n            this.editorContainer.classList.add('lm-mod-invalid');\n            // show a notification popup\n            if (message !== '') {\n                this.validityNotification = new CellEditor.Notification({\n                    target: this.editorContainer,\n                    message: message,\n                    placement: 'bottom',\n                    timeout: 5000\n                });\n                this.validityNotification.show();\n            }\n        }\n    }\n    /**\n     * Create and return a cell input validator based on configuration of the\n     * cell being edited. If no suitable validator can be found, it returns undefined.\n     */\n    createValidatorBasedOnType() {\n        const cell = this.cell;\n        const metadata = cell.grid.dataModel.metadata('body', cell.row, cell.column);\n        switch (metadata && metadata.type) {\n            case 'string':\n                {\n                    const validator = new TextInputValidator();\n                    if (typeof metadata.format === 'string') {\n                        const format = metadata.format;\n                        switch (format) {\n                            case 'email':\n                                validator.pattern = new RegExp('^([a-z0-9_.-]+)@([da-z.-]+).([a-z.]{2,6})$');\n                                break;\n                            case 'uuid':\n                                validator.pattern = new RegExp('[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}');\n                                break;\n                        }\n                    }\n                    if (metadata.constraint) {\n                        if (metadata.constraint.minLength !== undefined) {\n                            validator.minLength = metadata.constraint.minLength;\n                        }\n                        if (metadata.constraint.maxLength !== undefined) {\n                            validator.maxLength = metadata.constraint.maxLength;\n                        }\n                        if (typeof metadata.constraint.pattern === 'string') {\n                            validator.pattern = new RegExp(metadata.constraint.pattern);\n                        }\n                    }\n                    return validator;\n                }\n            case 'number':\n                {\n                    const validator = new NumberInputValidator();\n                    if (metadata.constraint) {\n                        if (metadata.constraint.minimum !== undefined) {\n                            validator.min = metadata.constraint.minimum;\n                        }\n                        if (metadata.constraint.maximum !== undefined) {\n                            validator.max = metadata.constraint.maximum;\n                        }\n                    }\n                    return validator;\n                }\n            case 'integer':\n                {\n                    const validator = new IntegerInputValidator();\n                    if (metadata.constraint) {\n                        if (metadata.constraint.minimum !== undefined) {\n                            validator.min = metadata.constraint.minimum;\n                        }\n                        if (metadata.constraint.maximum !== undefined) {\n                            validator.max = metadata.constraint.maximum;\n                        }\n                    }\n                    return validator;\n                }\n        }\n        return undefined;\n    }\n    /**\n     * Compute cell rectangle and return with other cell properties.\n     */\n    getCellInfo(cell) {\n        const { grid, row, column } = cell;\n        let data, columnX, rowY, width, height;\n        const cellGroup = CellGroup.getGroup(grid.dataModel, 'body', row, column);\n        if (cellGroup) {\n            columnX =\n                grid.headerWidth -\n                    grid.scrollX +\n                    grid.columnOffset('body', cellGroup.c1);\n            rowY =\n                grid.headerHeight - grid.scrollY + grid.rowOffset('body', cellGroup.r1);\n            width = 0;\n            height = 0;\n            for (let r = cellGroup.r1; r <= cellGroup.r2; r++) {\n                height += grid.rowSize('body', r);\n            }\n            for (let c = cellGroup.c1; c <= cellGroup.c2; c++) {\n                width += grid.columnSize('body', c);\n            }\n            data = grid.dataModel.data('body', cellGroup.r1, cellGroup.c1);\n        }\n        else {\n            columnX =\n                grid.headerWidth - grid.scrollX + grid.columnOffset('body', column);\n            rowY = grid.headerHeight - grid.scrollY + grid.rowOffset('body', row);\n            width = grid.columnSize('body', column);\n            height = grid.rowSize('body', row);\n            data = grid.dataModel.data('body', row, column);\n        }\n        return {\n            grid: grid,\n            row: row,\n            column: column,\n            data: data,\n            x: columnX,\n            y: rowY,\n            width: width,\n            height: height\n        };\n    }\n    /**\n     * Reposition cell editor by moving viewport occluder and cell editor container.\n     */\n    updatePosition() {\n        const grid = this.cell.grid;\n        const cellInfo = this.getCellInfo(this.cell);\n        const headerHeight = grid.headerHeight;\n        const headerWidth = grid.headerWidth;\n        this.viewportOccluder.style.top = headerHeight + 'px';\n        this.viewportOccluder.style.left = headerWidth + 'px';\n        this.viewportOccluder.style.width = grid.viewportWidth - headerWidth + 'px';\n        this.viewportOccluder.style.height =\n            grid.viewportHeight - headerHeight + 'px';\n        this.viewportOccluder.style.position = 'absolute';\n        this.editorContainer.style.left = cellInfo.x - 1 - headerWidth + 'px';\n        this.editorContainer.style.top = cellInfo.y - 1 - headerHeight + 'px';\n        this.editorContainer.style.width = cellInfo.width + 1 + 'px';\n        this.editorContainer.style.height = cellInfo.height + 1 + 'px';\n        this.editorContainer.style.visibility = 'visible';\n        this.editorContainer.style.position = 'absolute';\n    }\n    /**\n     * Commit the edited value.\n     *\n     * @param cursorMovement - Cursor move direction based on keys pressed to end the edit.\n     *\n     * @returns true on valid input, false otherwise.\n     */\n    commit(cursorMovement = 'none') {\n        this.validate();\n        if (!this._validInput) {\n            return false;\n        }\n        let value;\n        try {\n            value = this.getInput();\n        }\n        catch (error) {\n            console.log(`Input error: ${error.message}`);\n            return false;\n        }\n        this.dispose();\n        if (this.onCommit) {\n            this.onCommit({\n                cell: this.cell,\n                value: value,\n                cursorMovement: cursorMovement\n            });\n        }\n        return true;\n    }\n    /**\n     * Create container elements needed to prevent editor widget overflow\n     * beyond viewport and to position cell editor widget.\n     */\n    _addContainer() {\n        this.viewportOccluder = document.createElement('div');\n        this.viewportOccluder.className = 'lm-DataGrid-cellEditorOccluder';\n        this.cell.grid.node.appendChild(this.viewportOccluder);\n        this.editorContainer = document.createElement('div');\n        this.editorContainer.className = 'lm-DataGrid-cellEditorContainer';\n        this.viewportOccluder.appendChild(this.editorContainer);\n        // update mouse event pass-through state based on input validity\n        this.editorContainer.addEventListener('mouseleave', (event) => {\n            this.viewportOccluder.style.pointerEvents = this._validInput\n                ? 'none'\n                : 'auto';\n        });\n        this.editorContainer.addEventListener('mouseenter', (event) => {\n            this.viewportOccluder.style.pointerEvents = 'none';\n        });\n    }\n    /**\n     * Remove validity notification popup.\n     */\n    _closeValidityNotification() {\n        if (this.validityNotification) {\n            this.validityNotification.close();\n            this.validityNotification = null;\n        }\n    }\n}\n/**\n * Abstract base class with shared functionality\n * for cell editors which use HTML Input widget as editor.\n */\nclass InputCellEditor extends CellEditor {\n    /**\n     * Handle the DOM events for the editor.\n     *\n     * @param event - The DOM event sent to the editor.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'keydown':\n                this._onKeyDown(event);\n                break;\n            case 'blur':\n                this._onBlur(event);\n                break;\n            case 'input':\n                this._onInput(event);\n                break;\n        }\n    }\n    /**\n     * Dispose of the resources held by cell editor.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._unbindEvents();\n        super.dispose();\n    }\n    /**\n     * Start editing the cell.\n     */\n    startEditing() {\n        this.createWidget();\n        const cell = this.cell;\n        const cellInfo = this.getCellInfo(cell);\n        this.input.value = this.deserialize(cellInfo.data);\n        this.editorContainer.appendChild(this.input);\n        this.input.focus();\n        this.input.select();\n        this.bindEvents();\n    }\n    deserialize(value) {\n        if (value === null || value === undefined) {\n            return '';\n        }\n        return value.toString();\n    }\n    createWidget() {\n        const input = document.createElement('input');\n        input.classList.add('lm-DataGrid-cellEditorWidget');\n        input.classList.add('lm-DataGrid-cellEditorInput');\n        input.spellcheck = false;\n        input.type = this.inputType;\n        this.input = input;\n    }\n    bindEvents() {\n        this.input.addEventListener('keydown', this);\n        this.input.addEventListener('blur', this);\n        this.input.addEventListener('input', this);\n    }\n    _unbindEvents() {\n        this.input.removeEventListener('keydown', this);\n        this.input.removeEventListener('blur', this);\n        this.input.removeEventListener('input', this);\n    }\n    _onKeyDown(event) {\n        switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n            case 'Enter':\n                this.commit(event.shiftKey ? 'up' : 'down');\n                break;\n            case 'Tab':\n                this.commit(event.shiftKey ? 'left' : 'right');\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 'Escape':\n                this.cancel();\n                break;\n        }\n    }\n    _onBlur(event) {\n        if (this.isDisposed) {\n            return;\n        }\n        if (!this.commit()) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.input.focus();\n        }\n    }\n    _onInput(event) {\n        this.inputChanged.emit(void 0);\n    }\n}\n/**\n * Cell editor for text cells.\n */\nclass TextCellEditor extends InputCellEditor {\n    constructor() {\n        super(...arguments);\n        this.inputType = 'text';\n    }\n    /**\n     * Return the current text input entered.\n     */\n    getInput() {\n        return this.input.value;\n    }\n}\n/**\n * Cell editor for real number cells.\n */\nclass NumberCellEditor extends InputCellEditor {\n    constructor() {\n        super(...arguments);\n        this.inputType = 'number';\n    }\n    /**\n     * Start editing the cell.\n     */\n    startEditing() {\n        super.startEditing();\n        this.input.step = 'any';\n        const cell = this.cell;\n        const metadata = cell.grid.dataModel.metadata('body', cell.row, cell.column);\n        const constraint = metadata.constraint;\n        if (constraint) {\n            if (constraint.minimum) {\n                this.input.min = constraint.minimum;\n            }\n            if (constraint.maximum) {\n                this.input.max = constraint.maximum;\n            }\n        }\n    }\n    /**\n     * Return the current number input entered. This method throws exception\n     * if input is invalid.\n     */\n    getInput() {\n        let value = this.input.value;\n        if (value.trim() === '') {\n            return null;\n        }\n        const floatValue = parseFloat(value);\n        if (isNaN(floatValue)) {\n            throw new Error('Invalid input');\n        }\n        return floatValue;\n    }\n}\n/**\n * Cell editor for integer cells.\n */\nclass IntegerCellEditor extends InputCellEditor {\n    constructor() {\n        super(...arguments);\n        this.inputType = 'number';\n    }\n    /**\n     * Start editing the cell.\n     */\n    startEditing() {\n        super.startEditing();\n        this.input.step = '1';\n        const cell = this.cell;\n        const metadata = cell.grid.dataModel.metadata('body', cell.row, cell.column);\n        const constraint = metadata.constraint;\n        if (constraint) {\n            if (constraint.minimum) {\n                this.input.min = constraint.minimum;\n            }\n            if (constraint.maximum) {\n                this.input.max = constraint.maximum;\n            }\n        }\n    }\n    /**\n     * Return the current integer input entered. This method throws exception\n     * if input is invalid.\n     */\n    getInput() {\n        let value = this.input.value;\n        if (value.trim() === '') {\n            return null;\n        }\n        let intValue = parseInt(value);\n        if (isNaN(intValue)) {\n            throw new Error('Invalid input');\n        }\n        return intValue;\n    }\n}\n/**\n * Cell editor for date cells.\n */\nclass DateCellEditor extends CellEditor {\n    /**\n     * Handle the DOM events for the editor.\n     *\n     * @param event - The DOM event sent to the editor.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'keydown':\n                this._onKeyDown(event);\n                break;\n            case 'blur':\n                this._onBlur(event);\n                break;\n        }\n    }\n    /**\n     * Dispose of the resources held by cell editor.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._unbindEvents();\n        super.dispose();\n    }\n    /**\n     * Start editing the cell.\n     */\n    startEditing() {\n        this._createWidget();\n        const cell = this.cell;\n        const cellInfo = this.getCellInfo(cell);\n        this._input.value = this._deserialize(cellInfo.data);\n        this.editorContainer.appendChild(this._input);\n        this._input.focus();\n        this._bindEvents();\n    }\n    /**\n     * Return the current date input entered.\n     */\n    getInput() {\n        return this._input.value;\n    }\n    _deserialize(value) {\n        if (value === null || value === undefined) {\n            return '';\n        }\n        return value.toString();\n    }\n    _createWidget() {\n        const input = document.createElement('input');\n        input.type = 'date';\n        input.pattern = 'd{4}-d{2}-d{2}';\n        input.classList.add('lm-DataGrid-cellEditorWidget');\n        input.classList.add('lm-DataGrid-cellEditorInput');\n        this._input = input;\n    }\n    _bindEvents() {\n        this._input.addEventListener('keydown', this);\n        this._input.addEventListener('blur', this);\n    }\n    _unbindEvents() {\n        this._input.removeEventListener('keydown', this);\n        this._input.removeEventListener('blur', this);\n    }\n    _onKeyDown(event) {\n        switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n            case 'Enter':\n                this.commit(event.shiftKey ? 'up' : 'down');\n                break;\n            case 'Tab':\n                this.commit(event.shiftKey ? 'left' : 'right');\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 'Escape':\n                this.cancel();\n                break;\n        }\n    }\n    _onBlur(event) {\n        if (this.isDisposed) {\n            return;\n        }\n        if (!this.commit()) {\n            event.preventDefault();\n            event.stopPropagation();\n            this._input.focus();\n        }\n    }\n}\n/**\n * Cell editor for boolean cells.\n */\nclass BooleanCellEditor extends CellEditor {\n    /**\n     * Handle the DOM events for the editor.\n     *\n     * @param event - The DOM event sent to the editor.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'keydown':\n                this._onKeyDown(event);\n                break;\n            case 'mousedown':\n                // fix focus loss problem in Safari and Firefox\n                this._input.focus();\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 'blur':\n                this._onBlur(event);\n                break;\n        }\n    }\n    /**\n     * Dispose of the resources held by cell editor.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._unbindEvents();\n        super.dispose();\n    }\n    /**\n     * Start editing the cell.\n     */\n    startEditing() {\n        this._createWidget();\n        const cell = this.cell;\n        const cellInfo = this.getCellInfo(cell);\n        this._input.checked = this._deserialize(cellInfo.data);\n        this.editorContainer.appendChild(this._input);\n        this._input.focus();\n        this._bindEvents();\n    }\n    /**\n     * Return the current boolean input entered.\n     */\n    getInput() {\n        return this._input.checked;\n    }\n    _deserialize(value) {\n        if (value === null || value === undefined) {\n            return false;\n        }\n        return value == true;\n    }\n    _createWidget() {\n        const input = document.createElement('input');\n        input.classList.add('lm-DataGrid-cellEditorWidget');\n        input.classList.add('lm-DataGrid-cellEditorCheckbox');\n        input.type = 'checkbox';\n        input.spellcheck = false;\n        this._input = input;\n    }\n    _bindEvents() {\n        this._input.addEventListener('keydown', this);\n        this._input.addEventListener('mousedown', this);\n        this._input.addEventListener('blur', this);\n    }\n    _unbindEvents() {\n        this._input.removeEventListener('keydown', this);\n        this._input.removeEventListener('mousedown', this);\n        this._input.removeEventListener('blur', this);\n    }\n    _onKeyDown(event) {\n        switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n            case 'Enter':\n                this.commit(event.shiftKey ? 'up' : 'down');\n                break;\n            case 'Tab':\n                this.commit(event.shiftKey ? 'left' : 'right');\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 'Escape':\n                this.cancel();\n                break;\n        }\n    }\n    _onBlur(event) {\n        if (this.isDisposed) {\n            return;\n        }\n        if (!this.commit()) {\n            event.preventDefault();\n            event.stopPropagation();\n            this._input.focus();\n        }\n    }\n}\n/**\n * Cell editor for option cells.\n *\n * It supports multiple option selection. If cell metadata contains\n * type attribute 'array', then it behaves as a multi select.\n * In that case cell data is expected to be list of string values.\n */\nclass OptionCellEditor extends CellEditor {\n    constructor() {\n        super(...arguments);\n        this._isMultiSelect = false;\n    }\n    /**\n     * Dispose of the resources held by cell editor.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        super.dispose();\n        if (this._isMultiSelect) {\n            document.body.removeChild(this._select);\n        }\n    }\n    /**\n     * Start editing the cell.\n     */\n    startEditing() {\n        const cell = this.cell;\n        const cellInfo = this.getCellInfo(cell);\n        const metadata = cell.grid.dataModel.metadata('body', cell.row, cell.column);\n        this._isMultiSelect = metadata.type === 'array';\n        this._createWidget();\n        if (this._isMultiSelect) {\n            this._select.multiple = true;\n            const values = this._deserialize(cellInfo.data);\n            for (let i = 0; i < this._select.options.length; ++i) {\n                const option = this._select.options.item(i);\n                option.selected = values.indexOf(option.value) !== -1;\n            }\n            document.body.appendChild(this._select);\n        }\n        else {\n            this._select.value = this._deserialize(cellInfo.data);\n            this.editorContainer.appendChild(this._select);\n        }\n        this._select.focus();\n        this._bindEvents();\n        this.updatePosition();\n    }\n    /**\n     * Return the current option input.\n     */\n    getInput() {\n        if (this._isMultiSelect) {\n            const input = [];\n            for (let i = 0; i < this._select.selectedOptions.length; ++i) {\n                input.push(this._select.selectedOptions.item(i).value);\n            }\n            return input;\n        }\n        else {\n            return this._select.value;\n        }\n    }\n    /**\n     * Reposition cell editor.\n     */\n    updatePosition() {\n        super.updatePosition();\n        if (!this._isMultiSelect) {\n            return;\n        }\n        const cellInfo = this.getCellInfo(this.cell);\n        this._select.style.position = 'absolute';\n        const editorContainerRect = this.editorContainer.getBoundingClientRect();\n        this._select.style.left = editorContainerRect.left + 'px';\n        this._select.style.top = editorContainerRect.top + cellInfo.height + 'px';\n        this._select.style.width = editorContainerRect.width + 'px';\n        this._select.style.maxHeight = '60px';\n        this.editorContainer.style.visibility = 'hidden';\n    }\n    _deserialize(value) {\n        if (value === null || value === undefined) {\n            return '';\n        }\n        if (this._isMultiSelect) {\n            const values = [];\n            if (Array.isArray(value)) {\n                for (let item of value) {\n                    values.push(item.toString());\n                }\n            }\n            return values;\n        }\n        else {\n            return value.toString();\n        }\n    }\n    _createWidget() {\n        const cell = this.cell;\n        const metadata = cell.grid.dataModel.metadata('body', cell.row, cell.column);\n        const items = metadata.constraint.enum;\n        const select = document.createElement('select');\n        select.classList.add('lm-DataGrid-cellEditorWidget');\n        for (let item of items) {\n            const option = document.createElement('option');\n            option.value = item;\n            option.text = item;\n            select.appendChild(option);\n        }\n        this._select = select;\n    }\n    _bindEvents() {\n        this._select.addEventListener('keydown', this._onKeyDown.bind(this));\n        this._select.addEventListener('blur', this._onBlur.bind(this));\n    }\n    _onKeyDown(event) {\n        switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n            case 'Enter':\n                this.commit(event.shiftKey ? 'up' : 'down');\n                break;\n            case 'Tab':\n                this.commit(event.shiftKey ? 'left' : 'right');\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 'Escape':\n                this.cancel();\n                break;\n        }\n    }\n    _onBlur(event) {\n        if (this.isDisposed) {\n            return;\n        }\n        if (!this.commit()) {\n            event.preventDefault();\n            event.stopPropagation();\n            this._select.focus();\n        }\n    }\n}\n/**\n * Cell editor for option cells whose value can be any value\n * from set of pre-defined options or values that can be input by user.\n */\nclass DynamicOptionCellEditor extends CellEditor {\n    /**\n     * Handle the DOM events for the editor.\n     *\n     * @param event - The DOM event sent to the editor.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'keydown':\n                this._onKeyDown(event);\n                break;\n            case 'blur':\n                this._onBlur(event);\n                break;\n        }\n    }\n    /**\n     * Dispose of the resources held by cell editor.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._unbindEvents();\n        super.dispose();\n    }\n    /**\n     * Start editing the cell.\n     */\n    startEditing() {\n        this._createWidget();\n        const cell = this.cell;\n        const cellInfo = this.getCellInfo(cell);\n        this._input.value = this._deserialize(cellInfo.data);\n        this.editorContainer.appendChild(this._input);\n        this._input.focus();\n        this._input.select();\n        this._bindEvents();\n    }\n    /**\n     * Return the current option input.\n     */\n    getInput() {\n        return this._input.value;\n    }\n    _deserialize(value) {\n        if (value === null || value === undefined) {\n            return '';\n        }\n        return value.toString();\n    }\n    _createWidget() {\n        const cell = this.cell;\n        const grid = cell.grid;\n        const dataModel = grid.dataModel;\n        const rowCount = dataModel.rowCount('body');\n        const listId = 'cell-editor-list';\n        const list = document.createElement('datalist');\n        list.id = listId;\n        const input = document.createElement('input');\n        input.classList.add('lm-DataGrid-cellEditorWidget');\n        input.classList.add('lm-DataGrid-cellEditorInput');\n        const valueSet = new Set();\n        for (let r = 0; r < rowCount; ++r) {\n            const data = dataModel.data('body', r, cell.column);\n            if (data) {\n                valueSet.add(data);\n            }\n        }\n        valueSet.forEach((value) => {\n            const option = document.createElement('option');\n            option.value = value;\n            option.text = value;\n            list.appendChild(option);\n        });\n        this.editorContainer.appendChild(list);\n        input.setAttribute('list', listId);\n        this._input = input;\n    }\n    _bindEvents() {\n        this._input.addEventListener('keydown', this);\n        this._input.addEventListener('blur', this);\n    }\n    _unbindEvents() {\n        this._input.removeEventListener('keydown', this);\n        this._input.removeEventListener('blur', this);\n    }\n    _onKeyDown(event) {\n        switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n            case 'Enter':\n                this.commit(event.shiftKey ? 'up' : 'down');\n                break;\n            case 'Tab':\n                this.commit(event.shiftKey ? 'left' : 'right');\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 'Escape':\n                this.cancel();\n                break;\n        }\n    }\n    _onBlur(event) {\n        if (this.isDisposed) {\n            return;\n        }\n        if (!this.commit()) {\n            event.preventDefault();\n            event.stopPropagation();\n            this._input.focus();\n        }\n    }\n}\n/**\n * The namespace for the `CellEditor` class statics.\n */\n(function (CellEditor) {\n    /**\n     * A widget which implements a notification popup.\n     */\n    class Notification extends Widget {\n        /**\n         * Construct a new notification.\n         *\n         * @param options - The options for initializing the notification.\n         */\n        constructor(options) {\n            super({ node: Notification.createNode() });\n            this._message = '';\n            this.addClass('lm-DataGrid-notification');\n            this.setFlag(Widget.Flag.DisallowLayout);\n            this._target = options.target;\n            this._message = options.message || '';\n            this._placement = options.placement || 'bottom';\n            Widget.attach(this, document.body);\n            if (options.timeout && options.timeout > 0) {\n                setTimeout(() => {\n                    this.close();\n                }, options.timeout);\n            }\n        }\n        /**\n         * Handle the DOM events for the notification.\n         *\n         * @param event - The DOM event sent to the notification.\n         *\n         * #### Notes\n         * This method implements the DOM `EventListener` interface and is\n         * called in response to events on the notification's DOM node.\n         *\n         * This should not be called directly by user code.\n         */\n        handleEvent(event) {\n            switch (event.type) {\n                case 'mousedown':\n                    this._evtMouseDown(event);\n                    break;\n                case 'contextmenu':\n                    event.preventDefault();\n                    event.stopPropagation();\n                    break;\n            }\n        }\n        /**\n         * Get the placement of the notification.\n         */\n        get placement() {\n            return this._placement;\n        }\n        /**\n         * Set the placement of the notification.\n         */\n        set placement(value) {\n            // Do nothing if the placement does not change.\n            if (this._placement === value) {\n                return;\n            }\n            // Update the internal placement.\n            this._placement = value;\n            // Schedule an update for notification.\n            this.update();\n        }\n        /**\n         * Get the current value of the message.\n         */\n        get message() {\n            return this._message;\n        }\n        /**\n         * Set the current value of the message.\n         *\n         */\n        set message(value) {\n            // Do nothing if the value does not change.\n            if (this._message === value) {\n                return;\n            }\n            // Update the internal value.\n            this._message = value;\n            // Schedule an update for notification.\n            this.update();\n        }\n        /**\n         * Get the node presenting the message.\n         */\n        get messageNode() {\n            return this.node.getElementsByClassName('lm-DataGrid-notificationMessage')[0];\n        }\n        /**\n         * A method invoked on a 'before-attach' message.\n         */\n        onBeforeAttach(msg) {\n            this.node.addEventListener('mousedown', this);\n            this.update();\n        }\n        /**\n         * A method invoked on an 'after-detach' message.\n         */\n        onAfterDetach(msg) {\n            this.node.removeEventListener('mousedown', this);\n        }\n        /**\n         * A method invoked on an 'update-request' message.\n         */\n        onUpdateRequest(msg) {\n            const targetRect = this._target.getBoundingClientRect();\n            const style = this.node.style;\n            switch (this._placement) {\n                case 'bottom':\n                    style.left = targetRect.left + 'px';\n                    style.top = targetRect.bottom + 'px';\n                    break;\n                case 'top':\n                    style.left = targetRect.left + 'px';\n                    style.height = targetRect.top + 'px';\n                    style.top = '0';\n                    style.alignItems = 'flex-end';\n                    style.justifyContent = 'flex-end';\n                    break;\n                case 'left':\n                    style.left = '0';\n                    style.width = targetRect.left + 'px';\n                    style.top = targetRect.top + 'px';\n                    style.alignItems = 'flex-end';\n                    style.justifyContent = 'flex-end';\n                    break;\n                case 'right':\n                    style.left = targetRect.right + 'px';\n                    style.top = targetRect.top + 'px';\n                    break;\n            }\n            this.messageNode.innerHTML = this._message;\n        }\n        /**\n         * Handle the `'mousedown'` event for the notification.\n         */\n        _evtMouseDown(event) {\n            // Do nothing if it's not a left mouse press.\n            if (event.button !== 0) {\n                return;\n            }\n            event.preventDefault();\n            event.stopPropagation();\n            this.close();\n        }\n    }\n    CellEditor.Notification = Notification;\n    /**\n     * The namespace for the `Notification` class statics.\n     */\n    (function (Notification) {\n        /**\n         * Create the DOM node for notification.\n         */\n        function createNode() {\n            const node = document.createElement('div');\n            const container = document.createElement('div');\n            container.className = 'lm-DataGrid-notificationContainer';\n            const message = document.createElement('span');\n            message.className = 'lm-DataGrid-notificationMessage';\n            container.appendChild(message);\n            node.appendChild(container);\n            return node;\n        }\n        Notification.createNode = createNode;\n    })(Notification = CellEditor.Notification || (CellEditor.Notification = {}));\n})(CellEditor || (CellEditor = {}));\n\n/*\n * Copyright (c) Jupyter Development Team.\n * Distributed under the terms of the Modified BSD License.\n */\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * Resolve a config option for a cell editor.\n *\n * @param option - The config option to resolve.\n *\n * @param config - The cell config object.\n *\n * @returns The resolved value for the option.\n */\nfunction resolveOption(option, config) {\n    return typeof option === 'function'\n        ? option(config)\n        : option;\n}\n/**\n * An object which manages cell editing. It stores editor overrides,\n * decides which editor to use for a cell, makes sure there is only one editor active.\n */\nclass CellEditorController {\n    constructor() {\n        // active cell editor\n        this._editor = null;\n        // active cell being edited\n        this._cell = null;\n        // cell editor overrides based on cell data type identifier\n        this._typeBasedOverrides = new Map();\n        // cell editor overrides based on partial metadata match\n        this._metadataBasedOverrides = new Map();\n    }\n    /**\n     * Override cell editor for the cells matching the identifier.\n     *\n     * @param identifier - Cell identifier to use when matching cells.\n     * if identifier is a CellDataType, then cell matching is done using data type of the cell,\n     * if identifier is a Metadata, then partial match of the cell metadata with identifier is used for match,\n     * if identifier is 'default' then override is used as default editor when no other editor is found suitable\n     *\n     * @param editor - The cell editor to use or resolver to use to get an editor for matching cells.\n     */\n    setEditor(identifier, editor) {\n        if (typeof identifier === 'string') {\n            this._typeBasedOverrides.set(identifier, editor);\n        }\n        else {\n            const key = this._metadataIdentifierToKey(identifier);\n            this._metadataBasedOverrides.set(key, [identifier, editor]);\n        }\n    }\n    /**\n     * Start editing a cell.\n     *\n     * @param cell - The object holding cell configuration data.\n     *\n     * @param options - The cell editing options.\n     */\n    edit(cell, options) {\n        const grid = cell.grid;\n        if (!grid.editable) {\n            console.error('Grid cannot be edited!');\n            return false;\n        }\n        this.cancel();\n        this._cell = cell;\n        options = options || {};\n        options.onCommit = options.onCommit || this._onCommit.bind(this);\n        options.onCancel = options.onCancel || this._onCancel.bind(this);\n        // if an editor is passed in with options, then use it for editing\n        if (options.editor) {\n            this._editor = options.editor;\n            options.editor.edit(cell, options);\n            return true;\n        }\n        // choose an editor based on overrides / cell data type\n        const editor = this._getEditor(cell);\n        if (editor) {\n            this._editor = editor;\n            editor.edit(cell, options);\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Cancel editing.\n     */\n    cancel() {\n        if (this._editor) {\n            this._editor.cancel();\n            this._editor = null;\n        }\n        this._cell = null;\n    }\n    _onCommit(response) {\n        const cell = this._cell;\n        if (!cell) {\n            return;\n        }\n        const grid = cell.grid;\n        const dataModel = grid.dataModel;\n        let row = cell.row;\n        let column = cell.column;\n        const cellGroup = CellGroup.getGroup(grid.dataModel, 'body', row, column);\n        if (cellGroup) {\n            row = cellGroup.r1;\n            column = cellGroup.c1;\n        }\n        dataModel.setData('body', row, column, response.value);\n        grid.viewport.node.focus();\n        if (response.cursorMovement !== 'none') {\n            grid.moveCursor(response.cursorMovement);\n            grid.scrollToCursor();\n        }\n    }\n    _onCancel() {\n        if (!this._cell) {\n            return;\n        }\n        this._cell.grid.viewport.node.focus();\n    }\n    _getDataTypeKey(cell) {\n        const metadata = cell.grid.dataModel\n            ? cell.grid.dataModel.metadata('body', cell.row, cell.column)\n            : null;\n        if (!metadata) {\n            return 'default';\n        }\n        let key = '';\n        if (metadata) {\n            key = metadata.type;\n        }\n        if (metadata.constraint && metadata.constraint.enum) {\n            if (metadata.constraint.enum === 'dynamic') {\n                key += ':dynamic-option';\n            }\n            else {\n                key += ':option';\n            }\n        }\n        return key;\n    }\n    _objectToKey(object) {\n        let str = '';\n        for (let key in object) {\n            const value = object[key];\n            if (typeof value === 'object') {\n                str += `${key}:${this._objectToKey(value)}`;\n            }\n            else {\n                str += `[${key}:${value}]`;\n            }\n        }\n        return str;\n    }\n    _metadataIdentifierToKey(metadata) {\n        return this._objectToKey(metadata);\n    }\n    _metadataMatchesIdentifier(metadata, identifier) {\n        for (let key in identifier) {\n            if (!metadata.hasOwnProperty(key)) {\n                return false;\n            }\n            const identifierValue = identifier[key];\n            const metadataValue = metadata[key];\n            if (typeof identifierValue === 'object') {\n                if (!this._metadataMatchesIdentifier(metadataValue, identifierValue)) {\n                    return false;\n                }\n            }\n            else if (metadataValue !== identifierValue) {\n                return false;\n            }\n        }\n        return true;\n    }\n    _getMetadataBasedEditor(cell) {\n        let editorMatched;\n        const metadata = cell.grid.dataModel.metadata('body', cell.row, cell.column);\n        if (metadata) {\n            this._metadataBasedOverrides.forEach(value => {\n                if (!editorMatched) {\n                    let [identifier, editor] = value;\n                    if (this._metadataMatchesIdentifier(metadata, identifier)) {\n                        editorMatched = resolveOption(editor, cell);\n                    }\n                }\n            });\n        }\n        return editorMatched;\n    }\n    /**\n     * Choose the most appropriate cell editor to use based on overrides / cell data type.\n     *\n     * If no match is found in overrides or based on cell data type, and if cell has a primitive\n     * data type then TextCellEditor is used as default cell editor. If 'default' cell editor\n     * is overridden, then it is used instead of TextCellEditor for default.\n     */\n    _getEditor(cell) {\n        const dtKey = this._getDataTypeKey(cell);\n        // find an editor based on data type based override\n        if (this._typeBasedOverrides.has(dtKey)) {\n            const editor = this._typeBasedOverrides.get(dtKey);\n            return resolveOption(editor, cell);\n        } // find an editor based on metadata match based override\n        else if (this._metadataBasedOverrides.size > 0) {\n            const editor = this._getMetadataBasedEditor(cell);\n            if (editor) {\n                return editor;\n            }\n        }\n        // choose an editor based on data type\n        switch (dtKey) {\n            case 'string':\n                return new TextCellEditor();\n            case 'number':\n                return new NumberCellEditor();\n            case 'integer':\n                return new IntegerCellEditor();\n            case 'boolean':\n                return new BooleanCellEditor();\n            case 'date':\n                return new DateCellEditor();\n            case 'string:option':\n            case 'number:option':\n            case 'integer:option':\n            case 'date:option':\n            case 'array:option':\n                return new OptionCellEditor();\n            case 'string:dynamic-option':\n            case 'number:dynamic-option':\n            case 'integer:dynamic-option':\n            case 'date:dynamic-option':\n                return new DynamicOptionCellEditor();\n        }\n        // if an override exists for 'default', then use it\n        if (this._typeBasedOverrides.has('default')) {\n            const editor = this._typeBasedOverrides.get('default');\n            return resolveOption(editor, cell);\n        }\n        // if cell has a primitive data type then use TextCellEditor\n        const data = cell.grid.dataModel.data('body', cell.row, cell.column);\n        if (!data || typeof data !== 'object') {\n            return new TextCellEditor();\n        }\n        // no suitable editor found for the cell\n        return undefined;\n    }\n}\n\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * An object which provides the data for a data grid.\n *\n * #### Notes\n * If the predefined data models are insufficient for a particular use\n * case, a custom model can be defined which derives from this class.\n */\nclass DataModel {\n    constructor() {\n        this._changed = new Signal(this);\n    }\n    /**\n     * A signal emitted when the data model has changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Get the count of merged cell groups pertaining to a given\n     * cell region.\n     * @param region the target cell region.\n     */\n    groupCount(region) {\n        return 0;\n    }\n    /**\n     * Get the metadata for a cell in the data model.\n     *\n     * @param region - The cell region of interest.\n     *\n     * @param row - The row index of the cell of interest.\n     *\n     * @param column - The column index of the cell of interest.\n     *\n     * @returns The metadata for the specified cell.\n     *\n     * #### Notes\n     * The returned metadata should be treated as immutable.\n     *\n     * This method is called often, and so should be efficient.\n     *\n     * The default implementation returns `{}`.\n     */\n    metadata(region, row, column) {\n        return DataModel.emptyMetadata;\n    }\n    /**\n     * Get the merged cell group corresponding to a region and index number.\n     * @param region the cell region of cell group.\n     * @param groupIndex the group index of the cell group.\n     * @returns a cell group.\n     */\n    group(region, groupIndex) {\n        return null;\n    }\n    /**\n     * Emit the `changed` signal for the data model.\n     *\n     * #### Notes\n     * Subclasses should call this method whenever the data model has\n     * changed so that attached data grids can update themselves.\n     */\n    emitChanged(args) {\n        this._changed.emit(args);\n    }\n}\n/**\n * An object which provides the mutable data for a data grid.\n *\n * #### Notes\n * This object is an extension to `DataModel` and it only adds ability to\n * change data for cells.\n */\nclass MutableDataModel extends DataModel {\n}\n/**\n * The namespace for the `DataModel` class statics.\n */\n(function (DataModel) {\n    /**\n     * A singleton empty metadata object.\n     */\n    DataModel.emptyMetadata = Object.freeze({});\n})(DataModel || (DataModel = {}));\n\n/**\n * A thin caching wrapper around a 2D canvas rendering context.\n *\n * #### Notes\n * This class is mostly a transparent wrapper around a canvas rendering\n * context which improves performance when writing context state.\n *\n * For best performance, avoid reading state from the `gc`. Writes are\n * cached based on the previously written value.\n *\n * Unless otherwise specified, the API and semantics of this class are\n * identical to the builtin 2D canvas rendering context:\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\n *\n * The wrapped canvas context should not be manipulated externally\n * until the wrapping `GraphicsContext` object is disposed.\n */\nclass GraphicsContext {\n    /**\n     * Create a new graphics context object.\n     *\n     * @param context - The 2D canvas rendering context to wrap.\n     */\n    constructor(context) {\n        this._disposed = false;\n        this._context = context;\n        this._state = Private$3.State.create(context);\n    }\n    dispose() {\n        // Bail if the gc is already disposed.\n        if (this._disposed) {\n            return;\n        }\n        // Mark the gc as disposed.\n        this._disposed = true;\n        // Pop any unrestored saves.\n        while (this._state.next) {\n            this._state = this._state.next;\n            this._context.restore();\n        }\n    }\n    get isDisposed() {\n        return this._disposed;\n    }\n    get fillStyle() {\n        return this._context.fillStyle;\n    }\n    set fillStyle(value) {\n        if (this._state.fillStyle !== value) {\n            this._state.fillStyle = value;\n            this._context.fillStyle = value;\n        }\n    }\n    get strokeStyle() {\n        return this._context.strokeStyle;\n    }\n    set strokeStyle(value) {\n        if (this._state.strokeStyle !== value) {\n            this._state.strokeStyle = value;\n            this._context.strokeStyle = value;\n        }\n    }\n    get font() {\n        return this._context.font;\n    }\n    set font(value) {\n        if (this._state.font !== value) {\n            this._state.font = value;\n            this._context.font = value;\n        }\n    }\n    get textAlign() {\n        return this._context.textAlign;\n    }\n    set textAlign(value) {\n        if (this._state.textAlign !== value) {\n            this._state.textAlign = value;\n            this._context.textAlign = value;\n        }\n    }\n    get textBaseline() {\n        return this._context.textBaseline;\n    }\n    set textBaseline(value) {\n        if (this._state.textBaseline !== value) {\n            this._state.textBaseline = value;\n            this._context.textBaseline = value;\n        }\n    }\n    get lineCap() {\n        return this._context.lineCap;\n    }\n    set lineCap(value) {\n        if (this._state.lineCap !== value) {\n            this._state.lineCap = value;\n            this._context.lineCap = value;\n        }\n    }\n    get lineDashOffset() {\n        return this._context.lineDashOffset;\n    }\n    set lineDashOffset(value) {\n        if (this._state.lineDashOffset !== value) {\n            this._state.lineDashOffset = value;\n            this._context.lineDashOffset = value;\n        }\n    }\n    get lineJoin() {\n        return this._context.lineJoin;\n    }\n    set lineJoin(value) {\n        if (this._state.lineJoin !== value) {\n            this._state.lineJoin = value;\n            this._context.lineJoin = value;\n        }\n    }\n    get lineWidth() {\n        return this._context.lineWidth;\n    }\n    set lineWidth(value) {\n        if (this._state.lineWidth !== value) {\n            this._state.lineWidth = value;\n            this._context.lineWidth = value;\n        }\n    }\n    get miterLimit() {\n        return this._context.miterLimit;\n    }\n    set miterLimit(value) {\n        if (this._state.miterLimit !== value) {\n            this._state.miterLimit = value;\n            this._context.miterLimit = value;\n        }\n    }\n    get shadowBlur() {\n        return this._context.shadowBlur;\n    }\n    set shadowBlur(value) {\n        if (this._state.shadowBlur !== value) {\n            this._state.shadowBlur = value;\n            this._context.shadowBlur = value;\n        }\n    }\n    get shadowColor() {\n        return this._context.shadowColor;\n    }\n    set shadowColor(value) {\n        if (this._state.shadowColor !== value) {\n            this._state.shadowColor = value;\n            this._context.shadowColor = value;\n        }\n    }\n    get shadowOffsetX() {\n        return this._context.shadowOffsetX;\n    }\n    set shadowOffsetX(value) {\n        if (this._state.shadowOffsetX !== value) {\n            this._state.shadowOffsetX = value;\n            this._context.shadowOffsetX = value;\n        }\n    }\n    get shadowOffsetY() {\n        return this._context.shadowOffsetY;\n    }\n    set shadowOffsetY(value) {\n        if (this._state.shadowOffsetY !== value) {\n            this._state.shadowOffsetY = value;\n            this._context.shadowOffsetY = value;\n        }\n    }\n    get imageSmoothingEnabled() {\n        return this._context.imageSmoothingEnabled;\n    }\n    set imageSmoothingEnabled(value) {\n        if (this._state.imageSmoothingEnabled !== value) {\n            this._state.imageSmoothingEnabled = value;\n            this._context.imageSmoothingEnabled = value;\n        }\n    }\n    get globalAlpha() {\n        return this._context.globalAlpha;\n    }\n    set globalAlpha(value) {\n        if (this._state.globalAlpha !== value) {\n            this._state.globalAlpha = value;\n            this._context.globalAlpha = value;\n        }\n    }\n    get globalCompositeOperation() {\n        return this._context.globalCompositeOperation;\n    }\n    set globalCompositeOperation(value) {\n        if (this._state.globalCompositeOperation !== value) {\n            this._state.globalCompositeOperation = value;\n            this._context.globalCompositeOperation = value;\n        }\n    }\n    getLineDash() {\n        return this._context.getLineDash();\n    }\n    setLineDash(segments) {\n        this._context.setLineDash(segments);\n    }\n    rotate(angle) {\n        this._context.rotate(angle);\n    }\n    scale(x, y) {\n        this._context.scale(x, y);\n    }\n    transform(m11, m12, m21, m22, dx, dy) {\n        this._context.transform(m11, m12, m21, m22, dx, dy);\n    }\n    translate(x, y) {\n        this._context.translate(x, y);\n    }\n    setTransform(m11, m12, m21, m22, dx, dy) {\n        this._context.setTransform(m11, m12, m21, m22, dx, dy);\n    }\n    save() {\n        // Clone an push the current state to the stack.\n        this._state = Private$3.State.push(this._state);\n        // Save the wrapped context state.\n        this._context.save();\n    }\n    restore() {\n        // Bail if there is no state to restore.\n        if (!this._state.next) {\n            return;\n        }\n        // Pop the saved state from the stack.\n        this._state = Private$3.State.pop(this._state);\n        // Restore the wrapped context state.\n        this._context.restore();\n    }\n    beginPath() {\n        return this._context.beginPath();\n    }\n    closePath() {\n        this._context.closePath();\n    }\n    isPointInPath(x, y, fillRule) {\n        let result;\n        if (arguments.length === 2) {\n            result = this._context.isPointInPath(x, y);\n        }\n        else {\n            result = this._context.isPointInPath(x, y, fillRule);\n        }\n        return result;\n    }\n    arc(x, y, radius, startAngle, endAngle, anticlockwise) {\n        if (arguments.length === 5) {\n            this._context.arc(x, y, radius, startAngle, endAngle);\n        }\n        else {\n            this._context.arc(x, y, radius, startAngle, endAngle, anticlockwise);\n        }\n    }\n    arcTo(x1, y1, x2, y2, radius) {\n        this._context.arcTo(x1, y1, x2, y2, radius);\n    }\n    bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {\n        this._context.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n    }\n    ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise) {\n        if (arguments.length === 7) {\n            this._context.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle);\n        }\n        else {\n            this._context.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise);\n        }\n    }\n    lineTo(x, y) {\n        this._context.lineTo(x, y);\n    }\n    moveTo(x, y) {\n        this._context.moveTo(x, y);\n    }\n    quadraticCurveTo(cpx, cpy, x, y) {\n        this._context.quadraticCurveTo(cpx, cpy, x, y);\n    }\n    rect(x, y, w, h) {\n        this._context.rect(x, y, w, h);\n    }\n    clip(fillRule) {\n        if (arguments.length === 0) {\n            this._context.clip();\n        }\n        else {\n            this._context.clip(fillRule);\n        }\n    }\n    fill(fillRule) {\n        if (arguments.length === 0) {\n            this._context.fill();\n        }\n        else {\n            this._context.fill(fillRule);\n        }\n    }\n    stroke() {\n        this._context.stroke();\n    }\n    clearRect(x, y, w, h) {\n        return this._context.clearRect(x, y, w, h);\n    }\n    fillRect(x, y, w, h) {\n        this._context.fillRect(x, y, w, h);\n    }\n    fillText(text, x, y, maxWidth) {\n        if (arguments.length === 3) {\n            this._context.fillText(text, x, y);\n        }\n        else {\n            this._context.fillText(text, x, y, maxWidth);\n        }\n    }\n    strokeRect(x, y, w, h) {\n        this._context.strokeRect(x, y, w, h);\n    }\n    strokeText(text, x, y, maxWidth) {\n        if (arguments.length === 3) {\n            this._context.strokeText(text, x, y);\n        }\n        else {\n            this._context.strokeText(text, x, y, maxWidth);\n        }\n    }\n    measureText(text) {\n        return this._context.measureText(text);\n    }\n    createLinearGradient(x0, y0, x1, y1) {\n        return this._context.createLinearGradient(x0, y0, x1, y1);\n    }\n    createRadialGradient(x0, y0, r0, x1, y1, r1) {\n        return this._context.createRadialGradient(x0, y0, r0, x1, y1, r1);\n    }\n    createPattern(image, repetition) {\n        return this._context.createPattern(image, repetition);\n    }\n    createImageData() {\n        // eslint-disable-next-line prefer-spread, prefer-rest-params\n        return this._context.createImageData.apply(this._context, arguments);\n    }\n    getImageData(sx, sy, sw, sh) {\n        return this._context.getImageData(sx, sy, sw, sh);\n    }\n    putImageData() {\n        // eslint-disable-next-line prefer-spread, prefer-rest-params\n        this._context.putImageData.apply(this._context, arguments);\n    }\n    drawImage() {\n        // eslint-disable-next-line prefer-spread, prefer-rest-params\n        this._context.drawImage.apply(this._context, arguments);\n    }\n    drawFocusIfNeeded(element) {\n        this._context.drawFocusIfNeeded(element);\n    }\n}\n/**\n * The namespace for the module implementation details.\n */\nvar Private$3;\n(function (Private) {\n    /**\n     * The index of next valid pool object.\n     */\n    let pi = -1;\n    /**\n     * A state object allocation pool.\n     */\n    const pool = [];\n    /**\n     * An object which holds the state for a gc.\n     */\n    class State {\n        /**\n         * Create a gc state object from a 2D canvas context.\n         */\n        static create(context) {\n            let state = pi < 0 ? new State() : pool[pi--];\n            state.next = null;\n            state.fillStyle = context.fillStyle;\n            state.font = context.font;\n            state.globalAlpha = context.globalAlpha;\n            state.globalCompositeOperation = context.globalCompositeOperation;\n            state.imageSmoothingEnabled = context.imageSmoothingEnabled;\n            state.lineCap = context.lineCap;\n            state.lineDashOffset = context.lineDashOffset;\n            state.lineJoin = context.lineJoin;\n            state.lineWidth = context.lineWidth;\n            state.miterLimit = context.miterLimit;\n            state.shadowBlur = context.shadowBlur;\n            state.shadowColor = context.shadowColor;\n            state.shadowOffsetX = context.shadowOffsetX;\n            state.shadowOffsetY = context.shadowOffsetY;\n            state.strokeStyle = context.strokeStyle;\n            state.textAlign = context.textAlign;\n            state.textBaseline = context.textBaseline;\n            return state;\n        }\n        /**\n         * Clone an existing gc state object and add it to the state stack.\n         */\n        static push(other) {\n            let state = pi < 0 ? new State() : pool[pi--];\n            state.next = other;\n            state.fillStyle = other.fillStyle;\n            state.font = other.font;\n            state.globalAlpha = other.globalAlpha;\n            state.globalCompositeOperation = other.globalCompositeOperation;\n            state.imageSmoothingEnabled = other.imageSmoothingEnabled;\n            state.lineCap = other.lineCap;\n            state.lineDashOffset = other.lineDashOffset;\n            state.lineJoin = other.lineJoin;\n            state.lineWidth = other.lineWidth;\n            state.miterLimit = other.miterLimit;\n            state.shadowBlur = other.shadowBlur;\n            state.shadowColor = other.shadowColor;\n            state.shadowOffsetX = other.shadowOffsetX;\n            state.shadowOffsetY = other.shadowOffsetY;\n            state.strokeStyle = other.strokeStyle;\n            state.textAlign = other.textAlign;\n            state.textBaseline = other.textBaseline;\n            return state;\n        }\n        /**\n         * Pop the next state object and return the current to the pool\n         */\n        static pop(state) {\n            state.fillStyle = '';\n            state.strokeStyle = '';\n            pool[++pi] = state;\n            return state.next;\n        }\n    }\n    Private.State = State;\n})(Private$3 || (Private$3 = {}));\n\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * A class which manages the mapping of cell renderers.\n */\nclass RendererMap {\n    /**\n     * Construct a new renderer map.\n     *\n     * @param values - The initial values for the map.\n     *\n     * @param fallback - The renderer of last resort.\n     */\n    constructor(values = {}, fallback) {\n        this._changed = new Signal(this);\n        this._values = { ...values };\n        this._fallback = fallback || new TextRenderer();\n    }\n    /**\n     * A signal emitted when the renderer map has changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Get the cell renderer to use for the given cell config.\n     *\n     * @param config - The cell config of interest.\n     *\n     * @returns The renderer to use for the cell.\n     */\n    get(config) {\n        // Fetch the renderer from the values map.\n        let renderer = this._values[config.region];\n        // Execute a resolver function if necessary.\n        if (typeof renderer === 'function') {\n            try {\n                renderer = renderer(config);\n            }\n            catch (err) {\n                renderer = undefined;\n                console.error(err);\n            }\n        }\n        // Return the renderer or the fallback.\n        return renderer || this._fallback;\n    }\n    /**\n     * Update the renderer map with new values\n     *\n     * @param values - The updated values for the map.\n     *\n     * @param fallback - The renderer of last resort.\n     *\n     * #### Notes\n     * This method always emits the `changed` signal.\n     */\n    update(values = {}, fallback) {\n        this._values = { ...this._values, ...values };\n        this._fallback = fallback || this._fallback;\n        this._changed.emit(undefined);\n    }\n}\n\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n/**\n * An object which manages a collection of variable sized sections.\n *\n * #### Notes\n * This class is an implementation detail. It is designed to manage\n * the variable row and column sizes for a data grid. User code will\n * not interact with this class directly.\n */\nclass SectionList {\n    /**\n     * Construct a new section list.\n     *\n     * @param options - The options for initializing the list.\n     */\n    constructor(options) {\n        this._count = 0;\n        this._length = 0;\n        this._sections = [];\n        this._minimumSize = options.minimumSize || 2;\n        this._defaultSize = Math.max(this._minimumSize, Math.floor(options.defaultSize));\n    }\n    /**\n     * The total size of all sections in the list.\n     *\n     * #### Complexity\n     * Constant.\n     */\n    get length() {\n        return this._length;\n    }\n    /**\n     * The total number of sections in the list.\n     *\n     * #### Complexity\n     * Constant.\n     */\n    get count() {\n        return this._count;\n    }\n    /**\n     * Get the minimum size of sections in the list.\n     *\n     * #### Complexity\n     * Constant.\n     */\n    get minimumSize() {\n        return this._minimumSize;\n    }\n    /**\n     * Set the minimum size of sections in the list.\n     *\n     * #### Complexity\n     * Linear on the number of resized sections.\n     */\n    set minimumSize(value) {\n        // Normalize the value.\n        value = Math.max(2, Math.floor(value));\n        // Bail early if the value does not change.\n        if (this._minimumSize === value) {\n            return;\n        }\n        // Update the internal minimum size.\n        this._minimumSize = value;\n        // Update default size if larger than minimum size\n        if (value > this._defaultSize) {\n            this.defaultSize = value;\n        }\n    }\n    /**\n     * Get the default size of sections in the list.\n     *\n     * #### Complexity\n     * Constant.\n     */\n    get defaultSize() {\n        return this._defaultSize;\n    }\n    /**\n     * Set the default size of sections in the list.\n     *\n     * #### Complexity\n     * Linear on the number of resized sections.\n     */\n    set defaultSize(value) {\n        // Normalize the value.\n        value = Math.max(this._minimumSize, Math.floor(value));\n        // Bail early if the value does not change.\n        if (this._defaultSize === value) {\n            return;\n        }\n        // Compute the delta default size.\n        let delta = value - this._defaultSize;\n        // Update the internal default size.\n        this._defaultSize = value;\n        // Update the length.\n        this._length += delta * (this._count - this._sections.length);\n        // Bail early if there are no modified sections.\n        if (this._sections.length === 0) {\n            return;\n        }\n        // Recompute the offsets of the modified sections.\n        for (let i = 0, n = this._sections.length; i < n; ++i) {\n            // Look up the previous and current modified sections.\n            let prev = this._sections[i - 1];\n            let curr = this._sections[i];\n            // Adjust the offset for the current section.\n            if (prev) {\n                let count = curr.index - prev.index - 1;\n                curr.offset = prev.offset + prev.size + count * value;\n            }\n            else {\n                curr.offset = curr.index * value;\n            }\n        }\n    }\n    /**\n     * Clamp a size to the minimum section size\n     *\n     * @param size - The size to clamp.\n     *\n     * @returns The size or the section minimum size, whichever is larger\n     */\n    clampSize(size) {\n        return Math.max(this._minimumSize, Math.floor(size));\n    }\n    /**\n     * Find the index of the section which covers the given offset.\n     *\n     * @param offset - The offset of the section of interest.\n     *\n     * @returns The index of the section which covers the given offset,\n     *   or `-1` if the offset is out of range.\n     *\n     * #### Complexity\n     * Logarithmic on the number of resized sections.\n     */\n    indexOf(offset) {\n        // Bail early if the offset is out of range.\n        if (offset < 0 || offset >= this._length || this._count === 0) {\n            return -1;\n        }\n        // Handle the simple case of no modified sections.\n        if (this._sections.length === 0) {\n            return Math.floor(offset / this._defaultSize);\n        }\n        // Find the modified section for the given offset.\n        let i = ArrayExt.lowerBound(this._sections, offset, Private$2.offsetCmp);\n        // Return the index of an exact match.\n        if (i < this._sections.length && this._sections[i].offset <= offset) {\n            return this._sections[i].index;\n        }\n        // Handle the case of no modified sections before the offset.\n        if (i === 0) {\n            return Math.floor(offset / this._defaultSize);\n        }\n        // Compute the index from the previous modified section.\n        let section = this._sections[i - 1];\n        let span = offset - (section.offset + section.size);\n        return section.index + Math.floor(span / this._defaultSize) + 1;\n    }\n    /**\n     * Find the offset of the section at the given index.\n     *\n     * @param index - The index of the section of interest.\n     *\n     * @returns The offset of the section at the given index, or `-1`\n     *   if the index is out of range.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     *\n     * #### Complexity\n     * Logarithmic on the number of resized sections.\n     */\n    offsetOf(index) {\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= this._count) {\n            return -1;\n        }\n        // Handle the simple case of no modified sections.\n        if (this._sections.length === 0) {\n            return index * this._defaultSize;\n        }\n        // Find the modified section for the given index.\n        let i = ArrayExt.lowerBound(this._sections, index, Private$2.indexCmp);\n        // Return the offset of an exact match.\n        if (i < this._sections.length && this._sections[i].index === index) {\n            return this._sections[i].offset;\n        }\n        // Handle the case of no modified sections before the index.\n        if (i === 0) {\n            return index * this._defaultSize;\n        }\n        // Compute the offset from the previous modified section.\n        let section = this._sections[i - 1];\n        let span = index - section.index - 1;\n        return section.offset + section.size + span * this._defaultSize;\n    }\n    /**\n     * Find the extent of the section at the given index.\n     *\n     * @param index - The index of the section of interest.\n     *\n     * @returns The extent of the section at the given index, or `-1`\n     *   if the index is out of range.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     *\n     * #### Complexity\n     * Logarithmic on the number of resized sections.\n     */\n    extentOf(index) {\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= this._count) {\n            return -1;\n        }\n        // Handle the simple case of no modified sections.\n        if (this._sections.length === 0) {\n            return (index + 1) * this._defaultSize - 1;\n        }\n        // Find the modified section for the given index.\n        let i = ArrayExt.lowerBound(this._sections, index, Private$2.indexCmp);\n        // Return the offset of an exact match.\n        if (i < this._sections.length && this._sections[i].index === index) {\n            return this._sections[i].offset + this._sections[i].size - 1;\n        }\n        // Handle the case of no modified sections before the index.\n        if (i === 0) {\n            return (index + 1) * this._defaultSize - 1;\n        }\n        // Compute the offset from the previous modified section.\n        let section = this._sections[i - 1];\n        let span = index - section.index;\n        return section.offset + section.size + span * this._defaultSize - 1;\n    }\n    /**\n     * Find the size of the section at the given index.\n     *\n     * @param index - The index of the section of interest.\n     *\n     * @returns The size of the section at the given index, or `-1`\n     *   if the index is out of range.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     *\n     * #### Complexity\n     * Logarithmic on the number of resized sections.\n     */\n    sizeOf(index) {\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= this._count) {\n            return -1;\n        }\n        // Handle the simple case of no modified sections.\n        if (this._sections.length === 0) {\n            return this._defaultSize;\n        }\n        // Find the modified section for the given index.\n        let i = ArrayExt.lowerBound(this._sections, index, Private$2.indexCmp);\n        // Return the size of an exact match.\n        if (i < this._sections.length && this._sections[i].index === index) {\n            return this._sections[i].size;\n        }\n        // Return the default size for all other cases.\n        return this._defaultSize;\n    }\n    /**\n     * Resize a section in the list.\n     *\n     * @param index - The index of the section to resize. This method\n     *   is a no-op if this value is out of range.\n     *\n     * @param size - The new size of the section. This value will be\n     *   clamped to an integer `>= 0`.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     *\n     * #### Complexity\n     * Linear on the number of resized sections.\n     */\n    resize(index, size) {\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= this._count) {\n            return;\n        }\n        // Clamp the size to an integer >= minimum size.\n        size = Math.max(this._minimumSize, Math.floor(size));\n        // Find the modified section for the given index.\n        let i = ArrayExt.lowerBound(this._sections, index, Private$2.indexCmp);\n        // Update or create the modified section as needed.\n        let delta;\n        if (i < this._sections.length && this._sections[i].index === index) {\n            let section = this._sections[i];\n            delta = size - section.size;\n            section.size = size;\n        }\n        else if (i === 0) {\n            let offset = index * this._defaultSize;\n            ArrayExt.insert(this._sections, i, { index, offset, size });\n            delta = size - this._defaultSize;\n        }\n        else {\n            let section = this._sections[i - 1];\n            let span = index - section.index - 1;\n            let offset = section.offset + section.size + span * this._defaultSize;\n            ArrayExt.insert(this._sections, i, { index, offset, size });\n            delta = size - this._defaultSize;\n        }\n        // Adjust the length.\n        this._length += delta;\n        // Update all modified sections after the resized section.\n        for (let j = i + 1, n = this._sections.length; j < n; ++j) {\n            this._sections[j].offset += delta;\n        }\n    }\n    /**\n     * Insert sections into the list.\n     *\n     * @param index - The index at which to insert the sections. This\n     *   value will be clamped to the bounds of the list.\n     *\n     * @param count - The number of sections to insert. This method\n     *   is a no-op if this value is `<= 0`.\n     *\n     * #### Undefined Behavior\n     * An `index` or `count` which is non-integral.\n     *\n     * #### Complexity\n     * Linear on the number of resized sections.\n     */\n    insert(index, count) {\n        // Bail early if there are no sections to insert.\n        if (count <= 0) {\n            return;\n        }\n        // Clamp the index to the bounds of the list.\n        index = Math.max(0, Math.min(index, this._count));\n        // Add the new sections to the totals.\n        let span = count * this._defaultSize;\n        this._count += count;\n        this._length += span;\n        // Bail early if there are no modified sections to update.\n        if (this._sections.length === 0) {\n            return;\n        }\n        // Find the modified section for the given index.\n        let i = ArrayExt.lowerBound(this._sections, index, Private$2.indexCmp);\n        // Update all modified sections after the insert location.\n        for (let n = this._sections.length; i < n; ++i) {\n            let section = this._sections[i];\n            section.index += count;\n            section.offset += span;\n        }\n    }\n    /**\n     * Remove sections from the list.\n     *\n     * @param index - The index of the first section to remove. This\n     *   method is a no-op if this value is out of range.\n     *\n     * @param count - The number of sections to remove. This method\n     *   is a no-op if this value is `<= 0`.\n     *\n     * #### Undefined Behavior\n     * An `index` or `count` which is non-integral.\n     *\n     * #### Complexity\n     * Linear on the number of resized sections.\n     */\n    remove(index, count) {\n        // Bail early if there is nothing to remove.\n        if (index < 0 || index >= this._count || count <= 0) {\n            return;\n        }\n        // Clamp the count to the bounds of the list.\n        count = Math.min(this._count - index, count);\n        // Handle the simple case of no modified sections to update.\n        if (this._sections.length === 0) {\n            this._count -= count;\n            this._length -= count * this._defaultSize;\n            return;\n        }\n        // Handle the simple case of removing all sections.\n        if (count === this._count) {\n            this._length = 0;\n            this._count = 0;\n            this._sections.length = 0;\n            return;\n        }\n        // Find the modified section for the start index.\n        let i = ArrayExt.lowerBound(this._sections, index, Private$2.indexCmp);\n        // Find the modified section for the end index.\n        let j = ArrayExt.lowerBound(this._sections, index + count, Private$2.indexCmp);\n        // Remove the relevant modified sections.\n        let removed = this._sections.splice(i, j - i);\n        // Compute the total removed span.\n        let span = (count - removed.length) * this._defaultSize;\n        for (let k = 0, n = removed.length; k < n; ++k) {\n            span += removed[k].size;\n        }\n        // Adjust the totals.\n        this._count -= count;\n        this._length -= span;\n        // Update all modified sections after the removed span.\n        for (let k = i, n = this._sections.length; k < n; ++k) {\n            let section = this._sections[k];\n            section.index -= count;\n            section.offset -= span;\n        }\n    }\n    /**\n     * Move sections within the list.\n     *\n     * @param index - The index of the first section to move. This method\n     *   is a no-op if this value is out of range.\n     *\n     * @param count - The number of sections to move. This method is a\n     *   no-op if this value is `<= 0`.\n     *\n     * @param destination - The destination index for the first section.\n     *   This value will be clamped to the allowable range.\n     *\n     * #### Undefined Behavior\n     * An `index`, `count`, or `destination` which is non-integral.\n     *\n     * #### Complexity\n     * Linear on the number of moved resized sections.\n     */\n    move(index, count, destination) {\n        // Bail early if there is nothing to move.\n        if (index < 0 || index >= this._count || count <= 0) {\n            return;\n        }\n        // Handle the simple case of no modified sections.\n        if (this._sections.length === 0) {\n            return;\n        }\n        // Clamp the move count to the limit.\n        count = Math.min(count, this._count - index);\n        // Clamp the destination index to the limit.\n        destination = Math.min(Math.max(0, destination), this._count - count);\n        // Bail early if there is no effective move.\n        if (index === destination) {\n            return;\n        }\n        // Compute the first affected index.\n        let i1 = Math.min(index, destination);\n        // Look up the first affected modified section.\n        let k1 = ArrayExt.lowerBound(this._sections, i1, Private$2.indexCmp);\n        // Bail early if there are no affected modified sections.\n        if (k1 === this._sections.length) {\n            return;\n        }\n        // Compute the last affected index.\n        let i2 = Math.max(index + count - 1, destination + count - 1);\n        // Look up the last affected modified section.\n        let k2 = ArrayExt.upperBound(this._sections, i2, Private$2.indexCmp) - 1;\n        // Bail early if there are no affected modified sections.\n        if (k2 < k1) {\n            return;\n        }\n        // Compute the pivot index.\n        let pivot = destination < index ? index : index + count;\n        // Compute the count for each side of the pivot.\n        let count1 = pivot - i1;\n        let count2 = i2 - pivot + 1;\n        // Compute the span for each side of the pivot.\n        let span1 = count1 * this._defaultSize;\n        let span2 = count2 * this._defaultSize;\n        // Adjust the spans for the modified sections.\n        for (let j = k1; j <= k2; ++j) {\n            let section = this._sections[j];\n            if (section.index < pivot) {\n                span1 += section.size - this._defaultSize;\n            }\n            else {\n                span2 += section.size - this._defaultSize;\n            }\n        }\n        // Look up the pivot section.\n        let k3 = ArrayExt.lowerBound(this._sections, pivot, Private$2.indexCmp);\n        // Rotate the modified sections if needed.\n        if (k1 <= k3 && k3 <= k2) {\n            ArrayExt.rotate(this._sections, k3 - k1, k1, k2);\n        }\n        // Adjust the modified section indices and offsets.\n        for (let j = k1; j <= k2; ++j) {\n            let section = this._sections[j];\n            if (section.index < pivot) {\n                section.index += count2;\n                section.offset += span2;\n            }\n            else {\n                section.index -= count1;\n                section.offset -= span1;\n            }\n        }\n    }\n    /**\n     * Reset all modified sections to the default size.\n     *\n     * #### Complexity\n     * Constant.\n     */\n    reset() {\n        this._sections.length = 0;\n        this._length = this._count * this._defaultSize;\n    }\n    /**\n     * Remove all sections from the list.\n     *\n     * #### Complexity\n     * Constant.\n     */\n    clear() {\n        this._count = 0;\n        this._length = 0;\n        this._sections.length = 0;\n    }\n}\n/**\n * The namespace for the module implementation details.\n */\nvar Private$2;\n(function (Private) {\n    /**\n     * A comparison function for searching by offset.\n     */\n    function offsetCmp(section, offset) {\n        if (offset < section.offset) {\n            return 1;\n        }\n        if (section.offset + section.size <= offset) {\n            return -1;\n        }\n        return 0;\n    }\n    Private.offsetCmp = offsetCmp;\n    /**\n     * A comparison function for searching by index.\n     */\n    function indexCmp(section, index) {\n        return section.index - index;\n    }\n    Private.indexCmp = indexCmp;\n})(Private$2 || (Private$2 = {}));\n\n/**\n * A widget which implements a high-performance tabular data grid.\n *\n * #### Notes\n * A data grid is implemented as a composition of child widgets. These\n * child widgets are considered an implementation detail. Manipulating\n * the child widgets of a data grid directly is undefined behavior.\n *\n * This class is not designed to be subclassed.\n */\nclass DataGrid extends Widget {\n    /**\n     * Construct a new data grid.\n     *\n     * @param options - The options for initializing the data grid.\n     */\n    constructor(options = {}) {\n        super();\n        this._scrollX = 0;\n        this._scrollY = 0;\n        this._viewportWidth = 0;\n        this._viewportHeight = 0;\n        this._mousedown = false;\n        this._keyHandler = null;\n        this._mouseHandler = null;\n        this._vScrollBarMinWidth = 0;\n        this._hScrollBarMinHeight = 0;\n        this._dpiRatio = Math.ceil(window.devicePixelRatio);\n        this._dataModel = null;\n        this._selectionModel = null;\n        this._editingEnabled = false;\n        this.addClass('lm-DataGrid');\n        // Parse the simple options.\n        this._style = options.style || DataGrid.defaultStyle;\n        this._stretchLastRow = options.stretchLastRow || false;\n        this._stretchLastColumn = options.stretchLastColumn || false;\n        this._headerVisibility = options.headerVisibility || 'all';\n        this._cellRenderers = options.cellRenderers || new RendererMap();\n        this._copyConfig = options.copyConfig || DataGrid.defaultCopyConfig;\n        // Connect to the renderer map changed signal.\n        this._cellRenderers.changed.connect(this._onRenderersChanged, this);\n        // Parse the default sizes.\n        let defaultSizes = options.defaultSizes || DataGrid.defaultSizes;\n        let minimumSizes = options.minimumSizes || DataGrid.minimumSizes;\n        // Set up the sections lists.\n        this._rowSections = new SectionList({\n            defaultSize: defaultSizes.rowHeight,\n            minimumSize: minimumSizes.rowHeight\n        });\n        this._columnSections = new SectionList({\n            defaultSize: defaultSizes.columnWidth,\n            minimumSize: minimumSizes.columnWidth\n        });\n        this._rowHeaderSections = new SectionList({\n            defaultSize: defaultSizes.rowHeaderWidth,\n            minimumSize: minimumSizes.rowHeaderWidth\n        });\n        this._columnHeaderSections = new SectionList({\n            defaultSize: defaultSizes.columnHeaderHeight,\n            minimumSize: minimumSizes.columnHeaderHeight\n        });\n        // Create the canvas, buffer, and overlay objects.\n        this._canvas = Private$1.createCanvas();\n        this._buffer = Private$1.createCanvas();\n        this._overlay = Private$1.createCanvas();\n        // Get the graphics contexts for the canvases.\n        this._canvasGC = this._canvas.getContext('2d');\n        this._bufferGC = this._buffer.getContext('2d');\n        this._overlayGC = this._overlay.getContext('2d');\n        // Set up the on-screen canvas.\n        this._canvas.style.position = 'absolute';\n        this._canvas.style.top = '0px';\n        this._canvas.style.left = '0px';\n        this._canvas.style.width = '0px';\n        this._canvas.style.height = '0px';\n        // Set up the on-screen overlay.\n        this._overlay.style.position = 'absolute';\n        this._overlay.style.top = '0px';\n        this._overlay.style.left = '0px';\n        this._overlay.style.width = '0px';\n        this._overlay.style.height = '0px';\n        // Create the internal widgets for the data grid.\n        this._viewport = new Widget();\n        this._viewport.node.tabIndex = -1;\n        this._viewport.node.style.outline = 'none';\n        this._vScrollBar = new ScrollBar({ orientation: 'vertical' });\n        this._hScrollBar = new ScrollBar({ orientation: 'horizontal' });\n        this._scrollCorner = new Widget();\n        this._editorController = new CellEditorController();\n        // Add the extra class names to the child widgets.\n        this._viewport.addClass('lm-DataGrid-viewport');\n        this._vScrollBar.addClass('lm-DataGrid-scrollBar');\n        this._hScrollBar.addClass('lm-DataGrid-scrollBar');\n        this._scrollCorner.addClass('lm-DataGrid-scrollCorner');\n        // Add the on-screen canvas to the viewport node.\n        this._viewport.node.appendChild(this._canvas);\n        // Add the on-screen overlay to the viewport node.\n        this._viewport.node.appendChild(this._overlay);\n        // Install the message hooks.\n        MessageLoop.installMessageHook(this._viewport, this);\n        MessageLoop.installMessageHook(this._hScrollBar, this);\n        MessageLoop.installMessageHook(this._vScrollBar, this);\n        // Hide the scroll bars and corner from the outset.\n        this._vScrollBar.hide();\n        this._hScrollBar.hide();\n        this._scrollCorner.hide();\n        // Connect to the scroll bar signals.\n        this._vScrollBar.thumbMoved.connect(this._onThumbMoved, this);\n        this._hScrollBar.thumbMoved.connect(this._onThumbMoved, this);\n        this._vScrollBar.pageRequested.connect(this._onPageRequested, this);\n        this._hScrollBar.pageRequested.connect(this._onPageRequested, this);\n        this._vScrollBar.stepRequested.connect(this._onStepRequested, this);\n        this._hScrollBar.stepRequested.connect(this._onStepRequested, this);\n        // Set the layout cell config for the child widgets.\n        GridLayout.setCellConfig(this._viewport, { row: 0, column: 0 });\n        GridLayout.setCellConfig(this._vScrollBar, { row: 0, column: 1 });\n        GridLayout.setCellConfig(this._hScrollBar, { row: 1, column: 0 });\n        GridLayout.setCellConfig(this._scrollCorner, { row: 1, column: 1 });\n        // Create the layout for the data grid.\n        let layout = new GridLayout({\n            rowCount: 2,\n            columnCount: 2,\n            rowSpacing: 0,\n            columnSpacing: 0,\n            fitPolicy: 'set-no-constraint'\n        });\n        // Set the stretch factors for the grid.\n        layout.setRowStretch(0, 1);\n        layout.setRowStretch(1, 0);\n        layout.setColumnStretch(0, 1);\n        layout.setColumnStretch(1, 0);\n        // Add the child widgets to the layout.\n        layout.addWidget(this._viewport);\n        layout.addWidget(this._vScrollBar);\n        layout.addWidget(this._hScrollBar);\n        layout.addWidget(this._scrollCorner);\n        // Install the layout on the data grid.\n        this.layout = layout;\n    }\n    /**\n     * Dispose of the resources held by the widgets.\n     */\n    dispose() {\n        // Release the mouse.\n        this._releaseMouse();\n        // Dispose of the handlers.\n        if (this._keyHandler) {\n            this._keyHandler.dispose();\n        }\n        if (this._mouseHandler) {\n            this._mouseHandler.dispose();\n        }\n        this._keyHandler = null;\n        this._mouseHandler = null;\n        // Clear the models.\n        this._dataModel = null;\n        this._selectionModel = null;\n        // Clear the section lists.\n        this._rowSections.clear();\n        this._columnSections.clear();\n        this._rowHeaderSections.clear();\n        this._columnHeaderSections.clear();\n        // Dispose of the base class.\n        super.dispose();\n    }\n    /**\n     * Get the data model for the data grid.\n     */\n    get dataModel() {\n        return this._dataModel;\n    }\n    /**\n     * Set the data model for the data grid.\n     *\n     * #### Notes\n     * This will automatically remove the current selection model.\n     */\n    set dataModel(value) {\n        // Do nothing if the model does not change.\n        if (this._dataModel === value) {\n            return;\n        }\n        // Release the mouse.\n        this._releaseMouse();\n        // Clear the selection model.\n        this.selectionModel = null;\n        // Disconnect the change handler from the old model.\n        if (this._dataModel) {\n            this._dataModel.changed.disconnect(this._onDataModelChanged, this);\n        }\n        // Connect the change handler for the new model.\n        if (value) {\n            value.changed.connect(this._onDataModelChanged, this);\n        }\n        // Update the internal model reference.\n        this._dataModel = value;\n        // Clear the section lists.\n        this._rowSections.clear();\n        this._columnSections.clear();\n        this._rowHeaderSections.clear();\n        this._columnHeaderSections.clear();\n        // Populate the section lists.\n        if (value) {\n            this._rowSections.insert(0, value.rowCount('body'));\n            this._columnSections.insert(0, value.columnCount('body'));\n            this._rowHeaderSections.insert(0, value.columnCount('row-header'));\n            this._columnHeaderSections.insert(0, value.rowCount('column-header'));\n        }\n        // Reset the scroll position.\n        this._scrollX = 0;\n        this._scrollY = 0;\n        // Sync the viewport.\n        this._syncViewport();\n    }\n    /**\n     * Get the selection model for the data grid.\n     */\n    get selectionModel() {\n        return this._selectionModel;\n    }\n    /**\n     * Set the selection model for the data grid.\n     */\n    set selectionModel(value) {\n        // Do nothing if the selection model does not change.\n        if (this._selectionModel === value) {\n            return;\n        }\n        // Release the mouse.\n        this._releaseMouse();\n        // Ensure the data models are a match.\n        if (value && value.dataModel !== this._dataModel) {\n            throw new Error('SelectionModel.dataModel !== DataGrid.dataModel');\n        }\n        // Disconnect the change handler from the old model.\n        if (this._selectionModel) {\n            this._selectionModel.changed.disconnect(this._onSelectionsChanged, this);\n        }\n        // Connect the change handler for the new model.\n        if (value) {\n            value.changed.connect(this._onSelectionsChanged, this);\n        }\n        // Update the internal selection model reference.\n        this._selectionModel = value;\n        // Schedule a repaint of the overlay.\n        this.repaintOverlay();\n    }\n    /**\n     * Get the key handler for the data grid.\n     */\n    get keyHandler() {\n        return this._keyHandler;\n    }\n    /**\n     * Set the key handler for the data grid.\n     */\n    set keyHandler(value) {\n        this._keyHandler = value;\n    }\n    /**\n     * Get the mouse handler for the data grid.\n     */\n    get mouseHandler() {\n        return this._mouseHandler;\n    }\n    /**\n     * Set the mouse handler for the data grid.\n     */\n    set mouseHandler(value) {\n        // Bail early if the mouse handler does not change.\n        if (this._mouseHandler === value) {\n            return;\n        }\n        // Release the mouse.\n        this._releaseMouse();\n        // Update the internal mouse handler.\n        this._mouseHandler = value;\n    }\n    /**\n     * Get the style for the data grid.\n     */\n    get style() {\n        return this._style;\n    }\n    /**\n     * Set the style for the data grid.\n     */\n    set style(value) {\n        // Bail if the style does not change.\n        if (this._style === value) {\n            return;\n        }\n        // Update the internal style.\n        this._style = { ...value };\n        // Schedule a repaint of the content.\n        this.repaintContent();\n        // Schedule a repaint of the overlay.\n        this.repaintOverlay();\n    }\n    /**\n     * Get the cell renderer map for the data grid.\n     */\n    get cellRenderers() {\n        return this._cellRenderers;\n    }\n    /**\n     * Set the cell renderer map for the data grid.\n     */\n    set cellRenderers(value) {\n        // Bail if the renderer map does not change.\n        if (this._cellRenderers === value) {\n            return;\n        }\n        // Disconnect the old map.\n        this._cellRenderers.changed.disconnect(this._onRenderersChanged, this);\n        // Connect the new map.\n        value.changed.connect(this._onRenderersChanged, this);\n        // Update the internal renderer map.\n        this._cellRenderers = value;\n        // Schedule a repaint of the grid content.\n        this.repaintContent();\n    }\n    /**\n     * Get the header visibility for the data grid.\n     */\n    get headerVisibility() {\n        return this._headerVisibility;\n    }\n    /**\n     * Set the header visibility for the data grid.\n     */\n    set headerVisibility(value) {\n        // Bail if the visibility does not change.\n        if (this._headerVisibility === value) {\n            return;\n        }\n        // Update the internal visibility.\n        this._headerVisibility = value;\n        // Sync the viewport.\n        this._syncViewport();\n    }\n    /**\n     * Get the default sizes for the various sections of the data grid.\n     */\n    get defaultSizes() {\n        let rowHeight = this._rowSections.defaultSize;\n        let columnWidth = this._columnSections.defaultSize;\n        let rowHeaderWidth = this._rowHeaderSections.defaultSize;\n        let columnHeaderHeight = this._columnHeaderSections.defaultSize;\n        return { rowHeight, columnWidth, rowHeaderWidth, columnHeaderHeight };\n    }\n    /**\n     * Set the default sizes for the various sections of the data grid.\n     */\n    set defaultSizes(value) {\n        // Update the section default sizes.\n        this._rowSections.defaultSize = value.rowHeight;\n        this._columnSections.defaultSize = value.columnWidth;\n        this._rowHeaderSections.defaultSize = value.rowHeaderWidth;\n        this._columnHeaderSections.defaultSize = value.columnHeaderHeight;\n        // Sync the viewport.\n        this._syncViewport();\n    }\n    /**\n     * Get the minimum sizes for the various sections of the data grid.\n     */\n    get minimumSizes() {\n        let rowHeight = this._rowSections.minimumSize;\n        let columnWidth = this._columnSections.minimumSize;\n        let rowHeaderWidth = this._rowHeaderSections.minimumSize;\n        let columnHeaderHeight = this._columnHeaderSections.minimumSize;\n        return { rowHeight, columnWidth, rowHeaderWidth, columnHeaderHeight };\n    }\n    /**\n     * Set the minimum sizes for the various sections of the data grid.\n     */\n    set minimumSizes(value) {\n        // Update the section default sizes.\n        this._rowSections.minimumSize = value.rowHeight;\n        this._columnSections.minimumSize = value.columnWidth;\n        this._rowHeaderSections.minimumSize = value.rowHeaderWidth;\n        this._columnHeaderSections.minimumSize = value.columnHeaderHeight;\n        // Sync the viewport.\n        this._syncViewport();\n    }\n    /**\n     * Get the copy configuration for the data grid.\n     */\n    get copyConfig() {\n        return this._copyConfig;\n    }\n    /**\n     * Set the copy configuration for the data grid.\n     */\n    set copyConfig(value) {\n        this._copyConfig = value;\n    }\n    /**\n     * Get whether the last row is stretched.\n     */\n    get stretchLastRow() {\n        return this._stretchLastRow;\n    }\n    /**\n     * Set whether the last row is stretched.\n     */\n    set stretchLastRow(value) {\n        // Bail early if the value does not change.\n        if (value === this._stretchLastRow) {\n            return;\n        }\n        // Update the internal value.\n        this._stretchLastRow = value;\n        // Sync the viewport\n        this._syncViewport();\n    }\n    /**\n     * Get whether the last column is stretched.\n     */\n    get stretchLastColumn() {\n        return this._stretchLastColumn;\n    }\n    /**\n     * Set whether the last column is stretched.\n     */\n    set stretchLastColumn(value) {\n        // Bail early if the value does not change.\n        if (value === this._stretchLastColumn) {\n            return;\n        }\n        // Update the internal value.\n        this._stretchLastColumn = value;\n        // Sync the viewport\n        this._syncViewport();\n    }\n    /**\n     * The virtual width of the row headers.\n     */\n    get headerWidth() {\n        if (this._headerVisibility === 'none') {\n            return 0;\n        }\n        if (this._headerVisibility === 'column') {\n            return 0;\n        }\n        return this._rowHeaderSections.length;\n    }\n    /**\n     * The virtual height of the column headers.\n     */\n    get headerHeight() {\n        if (this._headerVisibility === 'none') {\n            return 0;\n        }\n        if (this._headerVisibility === 'row') {\n            return 0;\n        }\n        return this._columnHeaderSections.length;\n    }\n    /**\n     * The virtual width of the grid body.\n     *\n     * #### Notes\n     * This does *not* account for a stretched last column.\n     */\n    get bodyWidth() {\n        return this._columnSections.length;\n    }\n    /**\n     * The virtual height of the grid body.\n     *\n     * #### Notes\n     * This does *not* account for a stretched last row.\n     */\n    get bodyHeight() {\n        return this._rowSections.length;\n    }\n    /**\n     * The virtual width of the entire grid.\n     *\n     * #### Notes\n     * This does *not* account for a stretched last column.\n     */\n    get totalWidth() {\n        return this.headerWidth + this.bodyWidth;\n    }\n    /**\n     * The virtual height of the entire grid.\n     *\n     * #### Notes\n     * This does *not* account for a stretched last row.\n     */\n    get totalHeight() {\n        return this.headerHeight + this.bodyHeight;\n    }\n    /**\n     * The actual width of the viewport.\n     */\n    get viewportWidth() {\n        return this._viewportWidth;\n    }\n    /**\n     * The actual height of the viewport.\n     */\n    get viewportHeight() {\n        return this._viewportHeight;\n    }\n    /**\n     * The width of the visible portion of the grid body.\n     */\n    get pageWidth() {\n        return Math.max(0, this.viewportWidth - this.headerWidth);\n    }\n    /**\n     * The height of the visible portion of the grid body.\n     */\n    get pageHeight() {\n        return Math.max(0, this.viewportHeight - this.headerHeight);\n    }\n    /**\n     * The current scroll X position of the viewport.\n     */\n    get scrollX() {\n        return this._hScrollBar.value;\n    }\n    /**\n     * The current scroll Y position of the viewport.\n     */\n    get scrollY() {\n        return this._vScrollBar.value;\n    }\n    /**\n     * The maximum scroll X position for the grid.\n     */\n    get maxScrollX() {\n        return Math.max(0, this.bodyWidth - this.pageWidth - 1);\n    }\n    /**\n     * The maximum scroll Y position for the grid.\n     */\n    get maxScrollY() {\n        return Math.max(0, this.bodyHeight - this.pageHeight - 1);\n    }\n    /**\n     * The viewport widget for the data grid.\n     */\n    get viewport() {\n        return this._viewport;\n    }\n    /**\n     * The cell editor controller object for the data grid.\n     */\n    get editorController() {\n        return this._editorController;\n    }\n    set editorController(controller) {\n        this._editorController = controller;\n    }\n    /**\n     * Whether the cell editing is enabled for the data grid.\n     */\n    get editingEnabled() {\n        return this._editingEnabled;\n    }\n    set editingEnabled(enabled) {\n        this._editingEnabled = enabled;\n    }\n    /**\n     * Whether the grid cells are editable.\n     *\n     * `editingEnabled` flag must be on and grid must have required\n     * selection model, editor controller and data model properties.\n     */\n    get editable() {\n        return (this._editingEnabled &&\n            this._selectionModel !== null &&\n            this._editorController !== null &&\n            this.dataModel instanceof MutableDataModel);\n    }\n    /**\n     * The rendering context for painting the data grid.\n     */\n    get canvasGC() {\n        return this._canvasGC;\n    }\n    /**\n     * The row sections of the data grid.\n     */\n    get rowSections() {\n        return this._rowSections;\n    }\n    /**\n     * The column sections of the data grid.\n     */\n    get columnSections() {\n        return this._columnSections;\n    }\n    /**\n     * The row header sections of the data grid.\n     */\n    get rowHeaderSections() {\n        return this._rowHeaderSections;\n    }\n    /**\n     * The column header sections of the data grid.\n     */\n    get columnHeaderSections() {\n        return this._columnHeaderSections;\n    }\n    /**\n     * Scroll the grid to the specified row.\n     *\n     * @param row - The row index of the cell.\n     *\n     * #### Notes\n     * This is a no-op if the row is already visible.\n     */\n    scrollToRow(row) {\n        // Fetch the row count.\n        let nr = this._rowSections.count;\n        // Bail early if there is no content.\n        if (nr === 0) {\n            return;\n        }\n        // Floor the row index.\n        row = Math.floor(row);\n        // Clamp the row index.\n        row = Math.max(0, Math.min(row, nr - 1));\n        // Get the virtual bounds of the row.\n        let y1 = this._rowSections.offsetOf(row);\n        let y2 = this._rowSections.extentOf(row);\n        // Get the virtual bounds of the viewport.\n        let vy1 = this._scrollY;\n        let vy2 = this._scrollY + this.pageHeight - 1;\n        // Set up the delta variables.\n        let dy = 0;\n        // Compute the delta Y scroll.\n        if (y1 < vy1) {\n            dy = y1 - vy1 - 10;\n        }\n        else if (y2 > vy2) {\n            dy = y2 - vy2 + 10;\n        }\n        // Bail early if no scroll is needed.\n        if (dy === 0) {\n            return;\n        }\n        // Scroll by the computed delta.\n        this.scrollBy(0, dy);\n    }\n    /**\n     * Scroll the grid to the specified column.\n     *\n     * @param column - The column index of the cell.\n     *\n     * #### Notes\n     * This is a no-op if the column is already visible.\n     */\n    scrollToColumn(column) {\n        // Fetch the column count.\n        let nc = this._columnSections.count;\n        // Bail early if there is no content.\n        if (nc === 0) {\n            return;\n        }\n        // Floor the column index.\n        column = Math.floor(column);\n        // Clamp the column index.\n        column = Math.max(0, Math.min(column, nc - 1));\n        // Get the virtual bounds of the column.\n        let x1 = this._columnSections.offsetOf(column);\n        let x2 = this._columnSections.extentOf(column);\n        // Get the virtual bounds of the viewport.\n        let vx1 = this._scrollX;\n        let vx2 = this._scrollX + this.pageWidth - 1;\n        // Set up the delta variables.\n        let dx = 0;\n        // Compute the delta X scroll.\n        if (x1 < vx1) {\n            dx = x1 - vx1 - 10;\n        }\n        else if (x2 > vx2) {\n            dx = x2 - vx2 + 10;\n        }\n        // Bail early if no scroll is needed.\n        if (dx === 0) {\n            return;\n        }\n        // Scroll by the computed delta.\n        this.scrollBy(dx, 0);\n    }\n    /**\n     * Scroll the grid to the specified cell.\n     *\n     * @param row - The row index of the cell.\n     *\n     * @param column - The column index of the cell.\n     *\n     * #### Notes\n     * This is a no-op if the cell is already visible.\n     */\n    scrollToCell(row, column) {\n        // Fetch the row and column count.\n        let nr = this._rowSections.count;\n        let nc = this._columnSections.count;\n        // Bail early if there is no content.\n        if (nr === 0 || nc === 0) {\n            return;\n        }\n        // Floor the cell index.\n        row = Math.floor(row);\n        column = Math.floor(column);\n        // Clamp the cell index.\n        row = Math.max(0, Math.min(row, nr - 1));\n        column = Math.max(0, Math.min(column, nc - 1));\n        // Get the virtual bounds of the cell.\n        let x1 = this._columnSections.offsetOf(column);\n        let x2 = this._columnSections.extentOf(column);\n        let y1 = this._rowSections.offsetOf(row);\n        let y2 = this._rowSections.extentOf(row);\n        // Get the virtual bounds of the viewport.\n        let vx1 = this._scrollX;\n        let vx2 = this._scrollX + this.pageWidth - 1;\n        let vy1 = this._scrollY;\n        let vy2 = this._scrollY + this.pageHeight - 1;\n        // Set up the delta variables.\n        let dx = 0;\n        let dy = 0;\n        // Compute the delta X scroll.\n        if (x1 < vx1) {\n            dx = x1 - vx1 - 10;\n        }\n        else if (x2 > vx2) {\n            dx = x2 - vx2 + 10;\n        }\n        // Compute the delta Y scroll.\n        if (y1 < vy1) {\n            dy = y1 - vy1 - 10;\n        }\n        else if (y2 > vy2) {\n            dy = y2 - vy2 + 10;\n        }\n        // Bail early if no scroll is needed.\n        if (dx === 0 && dy === 0) {\n            return;\n        }\n        // Scroll by the computed delta.\n        this.scrollBy(dx, dy);\n    }\n    /**\n     * Move cursor down/up/left/right while making sure it remains\n     * within the bounds of selected rectangles\n     *\n     * @param direction - The direction of the movement.\n     */\n    moveCursor(direction) {\n        // Bail early if there is no selection\n        if (!this.dataModel ||\n            !this._selectionModel ||\n            this._selectionModel.isEmpty) {\n            return;\n        }\n        const iter = this._selectionModel.selections();\n        const onlyOne = iter.next() && !iter.next();\n        // if there is a single selection that is a single cell selection\n        // then move the selection and cursor within grid bounds\n        if (onlyOne) {\n            const currentSel = this._selectionModel.currentSelection();\n            if (currentSel.r1 === currentSel.r2 && currentSel.c1 === currentSel.c2) {\n                const dr = direction === 'down' ? 1 : direction === 'up' ? -1 : 0;\n                const dc = direction === 'right' ? 1 : direction === 'left' ? -1 : 0;\n                let newRow = currentSel.r1 + dr;\n                let newColumn = currentSel.c1 + dc;\n                const rowCount = this.dataModel.rowCount('body');\n                const columnCount = this.dataModel.columnCount('body');\n                if (newRow >= rowCount) {\n                    newRow = 0;\n                    newColumn += 1;\n                }\n                else if (newRow === -1) {\n                    newRow = rowCount - 1;\n                    newColumn -= 1;\n                }\n                if (newColumn >= columnCount) {\n                    newColumn = 0;\n                    newRow += 1;\n                    if (newRow >= rowCount) {\n                        newRow = 0;\n                    }\n                }\n                else if (newColumn === -1) {\n                    newColumn = columnCount - 1;\n                    newRow -= 1;\n                    if (newRow === -1) {\n                        newRow = rowCount - 1;\n                    }\n                }\n                this._selectionModel.select({\n                    r1: newRow,\n                    c1: newColumn,\n                    r2: newRow,\n                    c2: newColumn,\n                    cursorRow: newRow,\n                    cursorColumn: newColumn,\n                    clear: 'all'\n                });\n                return;\n            }\n        }\n        // if there are multiple selections, move cursor\n        // within selection rectangles\n        this._selectionModel.moveCursorWithinSelections(direction);\n    }\n    /**\n     * Scroll the grid to the current cursor position.\n     *\n     * #### Notes\n     * This is a no-op if the cursor is already visible or\n     * if there is no selection model installed on the grid.\n     */\n    scrollToCursor() {\n        // Bail early if there is no selection model.\n        if (!this._selectionModel) {\n            return;\n        }\n        // Fetch the cursor row and column.\n        let row = this._selectionModel.cursorRow;\n        let column = this._selectionModel.cursorColumn;\n        // Scroll to the cursor cell.\n        this.scrollToCell(row, column);\n    }\n    /**\n     * Scroll the viewport by the specified amount.\n     *\n     * @param dx - The X scroll amount.\n     *\n     * @param dy - The Y scroll amount.\n     */\n    scrollBy(dx, dy) {\n        this.scrollTo(this.scrollX + dx, this.scrollY + dy);\n    }\n    /**\n     * Scroll the viewport by one page.\n     *\n     * @param dir - The desired direction of the scroll.\n     */\n    scrollByPage(dir) {\n        let dx = 0;\n        let dy = 0;\n        switch (dir) {\n            case 'up':\n                dy = -this.pageHeight;\n                break;\n            case 'down':\n                dy = this.pageHeight;\n                break;\n            case 'left':\n                dx = -this.pageWidth;\n                break;\n            case 'right':\n                dx = this.pageWidth;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        this.scrollTo(this.scrollX + dx, this.scrollY + dy);\n    }\n    /**\n     * Scroll the viewport by one cell-aligned step.\n     *\n     * @param dir - The desired direction of the scroll.\n     */\n    scrollByStep(dir) {\n        let r;\n        let c;\n        let x = this.scrollX;\n        let y = this.scrollY;\n        let rows = this._rowSections;\n        let columns = this._columnSections;\n        switch (dir) {\n            case 'up':\n                r = rows.indexOf(y - 1);\n                y = r < 0 ? y : rows.offsetOf(r);\n                break;\n            case 'down':\n                r = rows.indexOf(y);\n                y = r < 0 ? y : rows.offsetOf(r) + rows.sizeOf(r);\n                break;\n            case 'left':\n                c = columns.indexOf(x - 1);\n                x = c < 0 ? x : columns.offsetOf(c);\n                break;\n            case 'right':\n                c = columns.indexOf(x);\n                x = c < 0 ? x : columns.offsetOf(c) + columns.sizeOf(c);\n                break;\n            default:\n                throw 'unreachable';\n        }\n        this.scrollTo(x, y);\n    }\n    /**\n     * Scroll to the specified offset position.\n     *\n     * @param x - The desired X position.\n     *\n     * @param y - The desired Y position.\n     */\n    scrollTo(x, y) {\n        // Floor and clamp the position to the allowable range.\n        x = Math.max(0, Math.min(Math.floor(x), this.maxScrollX));\n        y = Math.max(0, Math.min(Math.floor(y), this.maxScrollY));\n        // Update the scroll bar values with the desired position.\n        this._hScrollBar.value = x;\n        this._vScrollBar.value = y;\n        // Post a scroll request message to the viewport.\n        MessageLoop.postMessage(this._viewport, Private$1.ScrollRequest);\n    }\n    /**\n     * Get the row count for a particular region in the data grid.\n     *\n     * @param region - The row region of interest.\n     *\n     * @returns The row count for the specified region.\n     */\n    rowCount(region) {\n        let count;\n        if (region === 'body') {\n            count = this._rowSections.count;\n        }\n        else {\n            count = this._columnHeaderSections.count;\n        }\n        return count;\n    }\n    /**\n     * Get the column count for a particular region in the data grid.\n     *\n     * @param region - The column region of interest.\n     *\n     * @returns The column count for the specified region.\n     */\n    columnCount(region) {\n        let count;\n        if (region === 'body') {\n            count = this._columnSections.count;\n        }\n        else {\n            count = this._rowHeaderSections.count;\n        }\n        return count;\n    }\n    /**\n     * Get the row at a virtual offset in the data grid.\n     *\n     * @param region - The region which holds the row of interest.\n     *\n     * @param offset - The virtual offset of the row of interest.\n     *\n     * @returns The index of the row, or `-1` if the offset is out of range.\n     *\n     * #### Notes\n     * This method accounts for a stretched last row.\n     */\n    rowAt(region, offset) {\n        // Bail early if the offset is negative.\n        if (offset < 0) {\n            return -1;\n        }\n        // Return early for the column header region.\n        if (region === 'column-header') {\n            return this._columnHeaderSections.indexOf(offset);\n        }\n        // Fetch the index.\n        let index = this._rowSections.indexOf(offset);\n        // Return early if the section is found.\n        if (index >= 0) {\n            return index;\n        }\n        // Bail early if the last row is not stretched.\n        if (!this._stretchLastRow) {\n            return -1;\n        }\n        // Fetch the geometry.\n        let bh = this.bodyHeight;\n        let ph = this.pageHeight;\n        // Bail early if no row stretching is required.\n        if (ph <= bh) {\n            return -1;\n        }\n        // Bail early if the offset is out of bounds.\n        if (offset >= ph) {\n            return -1;\n        }\n        // Otherwise, return the last row.\n        return this._rowSections.count - 1;\n    }\n    /**\n     * Get the column at a virtual offset in the data grid.\n     *\n     * @param region - The region which holds the column of interest.\n     *\n     * @param offset - The virtual offset of the column of interest.\n     *\n     * @returns The index of the column, or `-1` if the offset is out of range.\n     *\n     * #### Notes\n     * This method accounts for a stretched last column.\n     */\n    columnAt(region, offset) {\n        if (offset < 0) {\n            return -1;\n        }\n        // Return early for the row header region.\n        if (region === 'row-header') {\n            return this._rowHeaderSections.indexOf(offset);\n        }\n        // Fetch the index.\n        let index = this._columnSections.indexOf(offset);\n        // Return early if the section is found.\n        if (index >= 0) {\n            return index;\n        }\n        // Bail early if the last column is not stretched.\n        if (!this._stretchLastColumn) {\n            return -1;\n        }\n        // Fetch the geometry.\n        let bw = this.bodyWidth;\n        let pw = this.pageWidth;\n        // Bail early if no column stretching is required.\n        if (pw <= bw) {\n            return -1;\n        }\n        // Bail early if the offset is out of bounds.\n        if (offset >= pw) {\n            return -1;\n        }\n        // Otherwise, return the last column.\n        return this._columnSections.count - 1;\n    }\n    /**\n     * Get the offset of a row in the data grid.\n     *\n     * @param region - The region which holds the row of interest.\n     *\n     * @param index - The index of the row of interest.\n     *\n     * @returns The offset of the row, or `-1` if the index is out of range.\n     *\n     * #### Notes\n     * A stretched last row has no effect on the return value.\n     */\n    rowOffset(region, index) {\n        let offset;\n        if (region === 'body') {\n            offset = this._rowSections.offsetOf(index);\n        }\n        else {\n            offset = this._columnHeaderSections.offsetOf(index);\n        }\n        return offset;\n    }\n    /**\n     * Get the offset of a column in the data grid.\n     *\n     * @param region - The region which holds the column of interest.\n     *\n     * @param index - The index of the column of interest.\n     *\n     * @returns The offset of the column, or `-1` if the index is out of range.\n     *\n     * #### Notes\n     * A stretched last column has no effect on the return value.\n     */\n    columnOffset(region, index) {\n        let offset;\n        if (region === 'body') {\n            offset = this._columnSections.offsetOf(index);\n        }\n        else {\n            offset = this._rowHeaderSections.offsetOf(index);\n        }\n        return offset;\n    }\n    /**\n     * Get the size of a row in the data grid.\n     *\n     * @param region - The region which holds the row of interest.\n     *\n     * @param index - The index of the row of interest.\n     *\n     * @returns The size of the row, or `-1` if the index is out of range.\n     *\n     * #### Notes\n     * This method accounts for a stretched last row.\n     */\n    rowSize(region, index) {\n        // Return early for the column header region.\n        if (region === 'column-header') {\n            return this._columnHeaderSections.sizeOf(index);\n        }\n        // Fetch the row size.\n        let size = this._rowSections.sizeOf(index);\n        // Bail early if the index is out of bounds.\n        if (size < 0) {\n            return size;\n        }\n        // Return early if the last row is not stretched.\n        if (!this._stretchLastRow) {\n            return size;\n        }\n        // Return early if its not the last row.\n        if (index < this._rowSections.count - 1) {\n            return size;\n        }\n        // Fetch the geometry.\n        let bh = this.bodyHeight;\n        let ph = this.pageHeight;\n        // Return early if no stretching is needed.\n        if (ph <= bh) {\n            return size;\n        }\n        // Return the adjusted size.\n        return size + (ph - bh);\n    }\n    /**\n     * Get the size of a column in the data grid.\n     *\n     * @param region - The region which holds the column of interest.\n     *\n     * @param index - The index of the column of interest.\n     *\n     * @returns The size of the column, or `-1` if the index is out of range.\n     *\n     * #### Notes\n     * This method accounts for a stretched last column.\n     */\n    columnSize(region, index) {\n        // Return early for the row header region.\n        if (region === 'row-header') {\n            return this._rowHeaderSections.sizeOf(index);\n        }\n        // Fetch the column size.\n        let size = this._columnSections.sizeOf(index);\n        // Bail early if the index is out of bounds.\n        if (size < 0) {\n            return size;\n        }\n        // Return early if the last column is not stretched.\n        if (!this._stretchLastColumn) {\n            return size;\n        }\n        // Return early if its not the last column.\n        if (index < this._columnSections.count - 1) {\n            return size;\n        }\n        // Fetch the geometry.\n        let bw = this.bodyWidth;\n        let pw = this.pageWidth;\n        // Return early if no stretching is needed.\n        if (pw <= bw) {\n            return size;\n        }\n        // Return the adjusted size.\n        return size + (pw - bw);\n    }\n    /**\n     * Resize a row in the data grid.\n     *\n     * @param region - The region which holds the row of interest.\n     *\n     * @param index - The index of the row of interest.\n     *\n     * @param size - The desired size of the row.\n     */\n    resizeRow(region, index, size) {\n        let msg = new Private$1.RowResizeRequest(region, index, size);\n        MessageLoop.postMessage(this._viewport, msg);\n    }\n    /**\n     * Resize a column in the data grid.\n     *\n     * @param region - The region which holds the column of interest.\n     *\n     * @param index - The index of the column of interest.\n     *\n     * @param size - The desired size of the column.\n     */\n    resizeColumn(region, index, size) {\n        let msg = new Private$1.ColumnResizeRequest(region, index, size);\n        MessageLoop.postMessage(this._viewport, msg);\n    }\n    /**\n     * Reset modified rows to their default size.\n     *\n     * @param region - The row region of interest.\n     */\n    resetRows(region) {\n        switch (region) {\n            case 'all':\n                this._rowSections.reset();\n                this._columnHeaderSections.reset();\n                break;\n            case 'body':\n                this._rowSections.reset();\n                break;\n            case 'column-header':\n                this._columnHeaderSections.reset();\n                break;\n            default:\n                throw 'unreachable';\n        }\n        this.repaintContent();\n        this.repaintOverlay();\n    }\n    /**\n     * Reset modified columns to their default size.\n     *\n     * @param region - The column region of interest.\n     */\n    resetColumns(region) {\n        switch (region) {\n            case 'all':\n                this._columnSections.reset();\n                this._rowHeaderSections.reset();\n                break;\n            case 'body':\n                this._columnSections.reset();\n                break;\n            case 'row-header':\n                this._rowHeaderSections.reset();\n                break;\n            default:\n                throw 'unreachable';\n        }\n        this.repaintContent();\n        this.repaintOverlay();\n    }\n    /**\n     * Auto sizes column-header widths based on their text content.\n     * @param area which area to resize: 'body', 'row-header' or 'all'.\n     * @param padding padding added to resized columns (pixels).\n     * @param numCols specify cap on the number of column resizes (optional).\n     */\n    fitColumnNames(area = 'all', padding = 15, numCols) {\n        // Attempt resizing only if a data model is present.\n        if (this.dataModel) {\n            // Tracking remaining columns to be resized if numCols arg passed.\n            let colsRemaining = numCols === undefined || numCols < 0 ? undefined : numCols;\n            if (area === 'row-header' || area === 'all') {\n                // Respecting any column resize cap, if one has been passed.\n                if (colsRemaining !== undefined) {\n                    const rowColumnCount = this.dataModel.columnCount('row-header');\n                    /*\n                      If we have more row-header columns than columns available\n                      for resize, resize only remaining columns as per allowance\n                      and set remaining resize allowance number to 0.\n                    */\n                    if (colsRemaining - rowColumnCount < 0) {\n                        this._fitRowColumnHeaders(this.dataModel, padding, colsRemaining);\n                        colsRemaining = 0;\n                    }\n                    else {\n                        /*\n                          Otherwise the entire row-header column count can be resized.\n                          Resize all row-header columns and subtract from remaining\n                          column resize allowance.\n                        */\n                        this._fitRowColumnHeaders(this.dataModel, padding, rowColumnCount);\n                        colsRemaining = colsRemaining - rowColumnCount;\n                    }\n                }\n                else {\n                    // No column resize cap passed - resizing all columns.\n                    this._fitRowColumnHeaders(this.dataModel, padding);\n                }\n            }\n            if (area === 'body' || area === 'all') {\n                // Respecting any column resize cap, if one has been passed.\n                if (colsRemaining !== undefined) {\n                    const bodyColumnCount = this.dataModel.columnCount('body');\n                    /*\n                      If we have more body columns than columns available\n                      for resize, resize only remaining columns as per allowance\n                      and set remaining resize allowance number to 0.\n                    */\n                    if (colsRemaining - bodyColumnCount < 0) {\n                        this._fitBodyColumnHeaders(this.dataModel, padding, colsRemaining);\n                    }\n                    else {\n                        /*\n                          Otherwise the entire body column count can be resized.\n                          Resize based on the smallest number between remaining\n                          resize allowance and body column count.\n                        */\n                        this._fitBodyColumnHeaders(this.dataModel, padding, Math.min(colsRemaining, bodyColumnCount));\n                    }\n                }\n                else {\n                    // No column resize cap passed - resizing all columns.\n                    this._fitBodyColumnHeaders(this.dataModel, padding);\n                }\n            }\n        }\n    }\n    /**\n     * Map a client position to local viewport coordinates.\n     *\n     * @param clientX - The client X position of the mouse.\n     *\n     * @param clientY - The client Y position of the mouse.\n     *\n     * @returns The local viewport coordinates for the position.\n     */\n    mapToLocal(clientX, clientY) {\n        // Fetch the viewport rect.\n        let rect = this._viewport.node.getBoundingClientRect();\n        // Extract the rect coordinates.\n        let { left, top } = rect;\n        // Round the rect coordinates for sub-pixel positioning.\n        left = Math.floor(left);\n        top = Math.floor(top);\n        // Convert to local coordinates.\n        let lx = clientX - left;\n        let ly = clientY - top;\n        // Return the local coordinates.\n        return { lx, ly };\n    }\n    /**\n     * Map a client position to virtual grid coordinates.\n     *\n     * @param clientX - The client X position of the mouse.\n     *\n     * @param clientY - The client Y position of the mouse.\n     *\n     * @returns The virtual grid coordinates for the position.\n     */\n    mapToVirtual(clientX, clientY) {\n        // Convert to local coordiates.\n        let { lx, ly } = this.mapToLocal(clientX, clientY);\n        // Convert to virtual coordinates.\n        let vx = lx + this.scrollX - this.headerWidth;\n        let vy = ly + this.scrollY - this.headerHeight;\n        // Return the local coordinates.\n        return { vx, vy };\n    }\n    /**\n     * Hit test the viewport for the given client position.\n     *\n     * @param clientX - The client X position of the mouse.\n     *\n     * @param clientY - The client Y position of the mouse.\n     *\n     * @returns The hit test result, or `null` if the client\n     *   position is out of bounds.\n     *\n     * #### Notes\n     * This method accounts for a stretched last row and/or column.\n     */\n    hitTest(clientX, clientY) {\n        // Convert the mouse position into local coordinates.\n        let { lx, ly } = this.mapToLocal(clientX, clientY);\n        // Fetch the header and body dimensions.\n        let hw = this.headerWidth;\n        let hh = this.headerHeight;\n        let bw = this.bodyWidth;\n        let bh = this.bodyHeight;\n        let ph = this.pageHeight;\n        let pw = this.pageWidth;\n        // Adjust the body width for a stretched last column.\n        if (this._stretchLastColumn && pw > bw) {\n            bw = pw;\n        }\n        // Adjust the body height for a stretched last row.\n        if (this._stretchLastRow && ph > bh) {\n            bh = ph;\n        }\n        // Check for a corner header hit.\n        if (lx >= 0 && lx < hw && ly >= 0 && ly < hh) {\n            // Convert to unscrolled virtual coordinates.\n            let vx = lx;\n            let vy = ly;\n            // Fetch the row and column index.\n            let row = this.rowAt('column-header', vy);\n            let column = this.columnAt('row-header', vx);\n            // Fetch the cell offset position.\n            let ox = this.columnOffset('row-header', column);\n            let oy = this.rowOffset('column-header', row);\n            // Fetch cell width and height.\n            let width = this.columnSize('row-header', column);\n            let height = this.rowSize('column-header', row);\n            // Compute the leading and trailing positions.\n            let x = vx - ox;\n            let y = vy - oy;\n            // Return the hit test result.\n            return { region: 'corner-header', row, column, x, y, width, height };\n        }\n        // Check for a column header hit.\n        if (ly >= 0 && ly < hh && lx >= 0 && lx < hw + bw) {\n            // Convert to unscrolled virtual coordinates.\n            let vx = lx + this._scrollX - hw;\n            let vy = ly;\n            // Fetch the row and column index.\n            let row = this.rowAt('column-header', vy);\n            let column = this.columnAt('body', vx);\n            // Fetch the cell offset position.\n            let ox = this.columnOffset('body', column);\n            let oy = this.rowOffset('column-header', row);\n            // Fetch the cell width and height.\n            let width = this.columnSize('body', column);\n            let height = this.rowSize('column-header', row);\n            // Compute the leading and trailing positions.\n            let x = vx - ox;\n            let y = vy - oy;\n            // Return the hit test result.\n            return { region: 'column-header', row, column, x, y, width, height };\n        }\n        // Check for a row header hit.\n        if (lx >= 0 && lx < hw && ly >= 0 && ly < hh + bh) {\n            // Convert to unscrolled virtual coordinates.\n            let vx = lx;\n            let vy = ly + this._scrollY - hh;\n            // Fetch the row and column index.\n            let row = this.rowAt('body', vy);\n            let column = this.columnAt('row-header', vx);\n            // Fetch the cell offset position.\n            let ox = this.columnOffset('row-header', column);\n            let oy = this.rowOffset('body', row);\n            // Fetch the cell width and height.\n            let width = this.columnSize('row-header', column);\n            let height = this.rowSize('body', row);\n            // Compute the leading and trailing positions.\n            let x = vx - ox;\n            let y = vy - oy;\n            // Return the hit test result.\n            return { region: 'row-header', row, column, x, y, width, height };\n        }\n        // Check for a body hit.\n        if (lx >= hw && lx < hw + bw && ly >= hh && ly < hh + bh) {\n            // Convert to unscrolled virtual coordinates.\n            let vx = lx + this._scrollX - hw;\n            let vy = ly + this._scrollY - hh;\n            // Fetch the row and column index.\n            let row = this.rowAt('body', vy);\n            let column = this.columnAt('body', vx);\n            // Fetch the cell offset position.\n            let ox = this.columnOffset('body', column);\n            let oy = this.rowOffset('body', row);\n            // Fetch the cell width and height.\n            let width = this.columnSize('body', column);\n            let height = this.rowSize('body', row);\n            // Compute the part coordinates.\n            let x = vx - ox;\n            let y = vy - oy;\n            // Return the result.\n            return { region: 'body', row, column, x, y, width, height };\n        }\n        // Otherwise, it's a void space hit.\n        let row = -1;\n        let column = -1;\n        let x = -1;\n        let y = -1;\n        let width = -1;\n        let height = -1;\n        // Return the hit test result.\n        return { region: 'void', row, column, x, y, width, height };\n    }\n    /**\n     * Copy the current selection to the system clipboard.\n     *\n     * #### Notes\n     * The grid must have a data model and a selection model.\n     *\n     * The behavior can be configured via `DataGrid.copyConfig`.\n     */\n    copyToClipboard() {\n        // Fetch the data model.\n        let dataModel = this._dataModel;\n        // Bail early if there is no data model.\n        if (!dataModel) {\n            return;\n        }\n        // Fetch the selection model.\n        let selectionModel = this._selectionModel;\n        // Bail early if there is no selection model.\n        if (!selectionModel) {\n            return;\n        }\n        // Coerce the selections to an array.\n        let selections = Array.from(selectionModel.selections());\n        // Bail early if there are no selections.\n        if (selections.length === 0) {\n            return;\n        }\n        // Alert that multiple selections cannot be copied.\n        if (selections.length > 1) {\n            alert('Cannot copy multiple grid selections.');\n            return;\n        }\n        // Fetch the model counts.\n        let br = dataModel.rowCount('body');\n        let bc = dataModel.columnCount('body');\n        // Bail early if there is nothing to copy.\n        if (br === 0 || bc === 0) {\n            return;\n        }\n        // Unpack the selection.\n        let { r1, c1, r2, c2 } = selections[0];\n        // Clamp the selection to the model bounds.\n        r1 = Math.max(0, Math.min(r1, br - 1));\n        c1 = Math.max(0, Math.min(c1, bc - 1));\n        r2 = Math.max(0, Math.min(r2, br - 1));\n        c2 = Math.max(0, Math.min(c2, bc - 1));\n        // Ensure the limits are well-orderd.\n        if (r2 < r1)\n            [r1, r2] = [r2, r1];\n        if (c2 < c1)\n            [c1, c2] = [c2, c1];\n        // Fetch the header counts.\n        let rhc = dataModel.columnCount('row-header');\n        let chr = dataModel.rowCount('column-header');\n        // Unpack the copy config.\n        let separator = this._copyConfig.separator;\n        let format = this._copyConfig.format;\n        let headers = this._copyConfig.headers;\n        let warningThreshold = this._copyConfig.warningThreshold;\n        // Compute the number of cells to be copied.\n        let rowCount = r2 - r1 + 1;\n        let colCount = c2 - c1 + 1;\n        switch (headers) {\n            case 'none':\n                rhc = 0;\n                chr = 0;\n                break;\n            case 'row':\n                chr = 0;\n                colCount += rhc;\n                break;\n            case 'column':\n                rhc = 0;\n                rowCount += chr;\n                break;\n            case 'all':\n                rowCount += chr;\n                colCount += rhc;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Compute the total cell count.\n        let cellCount = rowCount * colCount;\n        // Allow the user to cancel a large copy request.\n        if (cellCount > warningThreshold) {\n            let msg = `Copying ${cellCount} cells may take a while. Continue?`;\n            if (!window.confirm(msg)) {\n                return;\n            }\n        }\n        // Set up the format args.\n        let args = {\n            region: 'body',\n            row: 0,\n            column: 0,\n            value: null,\n            metadata: {}\n        };\n        // Allocate the array of rows.\n        let rows = new Array(rowCount);\n        // Iterate over the rows.\n        for (let j = 0; j < rowCount; ++j) {\n            // Allocate the array of cells.\n            let cells = new Array(colCount);\n            // Iterate over the columns.\n            for (let i = 0; i < colCount; ++i) {\n                // Set up the format variables.\n                let region;\n                let row;\n                let column;\n                // Populate the format variables.\n                if (j < chr && i < rhc) {\n                    region = 'corner-header';\n                    row = j;\n                    column = i;\n                }\n                else if (j < chr) {\n                    region = 'column-header';\n                    row = j;\n                    column = i - rhc + c1;\n                }\n                else if (i < rhc) {\n                    region = 'row-header';\n                    row = j - chr + r1;\n                    column = i;\n                }\n                else {\n                    region = 'body';\n                    row = j - chr + r1;\n                    column = i - rhc + c1;\n                }\n                // Populate the format args.\n                args.region = region;\n                args.row = row;\n                args.column = column;\n                args.value = dataModel.data(region, row, column);\n                args.metadata = dataModel.metadata(region, row, column);\n                // Format the cell.\n                cells[i] = format(args);\n            }\n            // Save the row of cells.\n            rows[j] = cells;\n        }\n        // Convert the cells into lines.\n        let lines = rows.map(cells => cells.join(separator));\n        // Convert the lines into text.\n        let text = lines.join('\\n');\n        // Copy the text to the clipboard.\n        ClipboardExt.copyText(text);\n    }\n    /**\n     * Process a message sent to the widget.\n     *\n     * @param msg - The message sent to the widget.\n     */\n    processMessage(msg) {\n        // Ignore child show/hide messages. The data grid controls the\n        // visibility of its children, and will manually dispatch the\n        // fit-request messages as a result of visibility change.\n        if (msg.type === 'child-shown' || msg.type === 'child-hidden') {\n            return;\n        }\n        // Recompute the scroll bar minimums before the layout refits.\n        if (msg.type === 'fit-request') {\n            let vsbLimits = ElementExt.sizeLimits(this._vScrollBar.node);\n            let hsbLimits = ElementExt.sizeLimits(this._hScrollBar.node);\n            this._vScrollBarMinWidth = vsbLimits.minWidth;\n            this._hScrollBarMinHeight = hsbLimits.minHeight;\n        }\n        // Process all other messages as normal.\n        super.processMessage(msg);\n    }\n    /**\n     * Intercept a message sent to a message handler.\n     *\n     * @param handler - The target handler of the message.\n     *\n     * @param msg - The message to be sent to the handler.\n     *\n     * @returns `true` if the message should continue to be processed\n     *   as normal, or `false` if processing should cease immediately.\n     */\n    messageHook(handler, msg) {\n        // Process viewport messages.\n        if (handler === this._viewport) {\n            this._processViewportMessage(msg);\n            return true;\n        }\n        // Process horizontal scroll bar messages.\n        if (handler === this._hScrollBar && msg.type === 'activate-request') {\n            this.activate();\n            return false;\n        }\n        // Process vertical scroll bar messages.\n        if (handler === this._vScrollBar && msg.type === 'activate-request') {\n            this.activate();\n            return false;\n        }\n        // Ignore all other messages.\n        return true;\n    }\n    /**\n     * Handle the DOM events for the data grid.\n     *\n     * @param event - The DOM event sent to the data grid.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the data grid's DOM node. It\n     * should not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'keydown':\n                this._evtKeyDown(event);\n                break;\n            case 'mousedown':\n                this._evtMouseDown(event);\n                break;\n            case 'mousemove':\n                this._evtMouseMove(event);\n                break;\n            case 'mouseup':\n                this._evtMouseUp(event);\n                break;\n            case 'dblclick':\n                this._evtMouseDoubleClick(event);\n                break;\n            case 'mouseleave':\n                this._evtMouseLeave(event);\n                break;\n            case 'contextmenu':\n                this._evtContextMenu(event);\n                break;\n            case 'wheel':\n                this._evtWheel(event);\n                break;\n            case 'resize':\n                this._refreshDPI();\n                break;\n        }\n    }\n    /**\n     * A message handler invoked on an `'activate-request'` message.\n     */\n    onActivateRequest(msg) {\n        this.viewport.node.focus({ preventScroll: true });\n    }\n    /**\n     * A message handler invoked on a `'before-attach'` message.\n     */\n    onBeforeAttach(msg) {\n        window.addEventListener('resize', this);\n        this.node.addEventListener('wheel', this);\n        this._viewport.node.addEventListener('keydown', this);\n        this._viewport.node.addEventListener('mousedown', this);\n        this._viewport.node.addEventListener('mousemove', this);\n        this._viewport.node.addEventListener('dblclick', this);\n        this._viewport.node.addEventListener('mouseleave', this);\n        this._viewport.node.addEventListener('contextmenu', this);\n        this.repaintContent();\n        this.repaintOverlay();\n    }\n    /**\n     * A message handler invoked on an `'after-detach'` message.\n     */\n    onAfterDetach(msg) {\n        window.removeEventListener('resize', this);\n        this.node.removeEventListener('wheel', this);\n        this._viewport.node.removeEventListener('keydown', this);\n        this._viewport.node.removeEventListener('mousedown', this);\n        this._viewport.node.removeEventListener('mousemove', this);\n        this._viewport.node.removeEventListener('mouseleave', this);\n        this._viewport.node.removeEventListener('dblclick', this);\n        this._viewport.node.removeEventListener('contextmenu', this);\n        this._releaseMouse();\n    }\n    /**\n     * A message handler invoked on a `'before-show'` message.\n     */\n    onBeforeShow(msg) {\n        this.repaintContent();\n        this.repaintOverlay();\n    }\n    /**\n     * A message handler invoked on a `'resize'` message.\n     */\n    onResize(msg) {\n        if (this._editorController) {\n            this._editorController.cancel();\n        }\n        this._syncScrollState();\n    }\n    /**\n     * Schedule a repaint of all of the grid content.\n     */\n    repaintContent() {\n        let msg = new Private$1.PaintRequest('all', 0, 0, 0, 0);\n        MessageLoop.postMessage(this._viewport, msg);\n    }\n    /**\n     * Schedule a repaint of specific grid content.\n     */\n    repaintRegion(region, r1, c1, r2, c2) {\n        let msg = new Private$1.PaintRequest(region, r1, c1, r2, c2);\n        MessageLoop.postMessage(this._viewport, msg);\n    }\n    /**\n     * Schedule a repaint of the overlay.\n     */\n    repaintOverlay() {\n        MessageLoop.postMessage(this._viewport, Private$1.OverlayPaintRequest);\n    }\n    _getMaxWidthInColumn(index, columnRegion) {\n        const dataModel = this.dataModel;\n        if (!dataModel) {\n            return null;\n        }\n        const columnHeaderRegion = columnRegion == 'row-header' ? 'corner-header' : 'column-header';\n        return Math.max(this._getMaxWidthInArea(dataModel, index, columnHeaderRegion, 'column-header'), this._getMaxWidthInArea(dataModel, index, columnRegion, 'body'));\n    }\n    _getMaxWidthInArea(dataModel, index, region, rowRegion) {\n        const numRows = dataModel.rowCount(rowRegion);\n        // Will only allocate up to 1_000_000 elements otherwise performance can tank.\n        const configs = Array.from({ length: Math.min(numRows, 1000000) }, (_val, idx) => DataGrid._getConfig(dataModel, idx, index, region));\n        // Heuristic: Sort by the length of the text to render and only fully calculate the text width\n        // for the top 100_000 rows by text length\n        if (numRows > 100000) {\n            // Sort by descending length\n            configs.sort(x => -this._getTextToRender(x).length);\n        }\n        let maxWidth = 0;\n        for (let i = 0; i < numRows && i < 100000; ++i) {\n            const textWidth = this._getCellTextWidth(configs[i]);\n            maxWidth = Math.max(maxWidth, textWidth);\n        }\n        return maxWidth;\n    }\n    static _getConfig(dataModel, row, col, location) {\n        return {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0,\n            region: location,\n            row: row,\n            column: col,\n            value: DataGrid._getCellValue(dataModel, location, row, col),\n            metadata: DataGrid._getCellMetadata(dataModel, location, row, col)\n        };\n    }\n    _getTextToRender(config) {\n        const renderer = this.cellRenderers.get(config);\n        return renderer.getText(config);\n    }\n    _getCellTextWidth(config) {\n        // Get the renderer for the given cell.\n        const renderer = this.cellRenderers.get(config);\n        // Use the canvas context to measure the cell's text width\n        const gc = this.canvasGC;\n        gc.font = CellRenderer.resolveOption(renderer.font, config);\n        gc.fillStyle = CellRenderer.resolveOption(renderer.textColor, config);\n        gc.textAlign = CellRenderer.resolveOption(renderer.horizontalAlignment, config);\n        gc.textBaseline = 'bottom';\n        const text = this._getTextToRender(config);\n        return gc.measureText(text).width + 2 * renderer.horizontalPadding;\n    }\n    /**\n     * Ensure the canvas is at least the specified size.\n     *\n     * This method will retain the valid canvas content.\n     */\n    _resizeCanvasIfNeeded(width, height) {\n        // Scale the size by the dpi ratio.\n        width = width * this._dpiRatio;\n        height = height * this._dpiRatio;\n        // Compute the maximum canvas size for the given width and height.\n        let maxW = (Math.ceil((width + 1) / 512) + 1) * 512;\n        let maxH = (Math.ceil((height + 1) / 512) + 1) * 512;\n        // Get the current size of the canvas.\n        let curW = this._canvas.width;\n        let curH = this._canvas.height;\n        // Bail early if the canvas size is within bounds.\n        if (curW >= width && curH >= height && curW <= maxW && curH <= maxH) {\n            return;\n        }\n        // Compute the expanded canvas size.\n        let expW = maxW - 512;\n        let expH = maxH - 512;\n        // Set the transforms to the identity matrix.\n        this._canvasGC.setTransform(1, 0, 0, 1, 0, 0);\n        this._bufferGC.setTransform(1, 0, 0, 1, 0, 0);\n        this._overlayGC.setTransform(1, 0, 0, 1, 0, 0);\n        // Resize the buffer if needed.\n        if (curW < width) {\n            this._buffer.width = expW;\n        }\n        else if (curW > maxW) {\n            this._buffer.width = maxW;\n        }\n        // Resize the buffer height if needed.\n        if (curH < height) {\n            this._buffer.height = expH;\n        }\n        else if (curH > maxH) {\n            this._buffer.height = maxH;\n        }\n        // Test whether there is content to blit.\n        let needBlit = curW > 0 && curH > 0 && width > 0 && height > 0;\n        // Copy the valid canvas content into the buffer if needed.\n        if (needBlit) {\n            this._bufferGC.drawImage(this._canvas, 0, 0);\n        }\n        // Resize the canvas width if needed.\n        if (curW < width) {\n            this._canvas.width = expW;\n            this._canvas.style.width = `${expW / this._dpiRatio}px`;\n        }\n        else if (curW > maxW) {\n            this._canvas.width = maxW;\n            this._canvas.style.width = `${maxW / this._dpiRatio}px`;\n        }\n        // Resize the canvas height if needed.\n        if (curH < height) {\n            this._canvas.height = expH;\n            this._canvas.style.height = `${expH / this._dpiRatio}px`;\n        }\n        else if (curH > maxH) {\n            this._canvas.height = maxH;\n            this._canvas.style.height = `${maxH / this._dpiRatio}px`;\n        }\n        // Copy the valid canvas content from the buffer if needed.\n        if (needBlit) {\n            this._canvasGC.drawImage(this._buffer, 0, 0);\n        }\n        // Copy the valid overlay content into the buffer if needed.\n        if (needBlit) {\n            this._bufferGC.drawImage(this._overlay, 0, 0);\n        }\n        // Resize the overlay width if needed.\n        if (curW < width) {\n            this._overlay.width = expW;\n            this._overlay.style.width = `${expW / this._dpiRatio}px`;\n        }\n        else if (curW > maxW) {\n            this._overlay.width = maxW;\n            this._overlay.style.width = `${maxW / this._dpiRatio}px`;\n        }\n        // Resize the overlay height if needed.\n        if (curH < height) {\n            this._overlay.height = expH;\n            this._overlay.style.height = `${expH / this._dpiRatio}px`;\n        }\n        else if (curH > maxH) {\n            this._overlay.height = maxH;\n            this._overlay.style.height = `${maxH / this._dpiRatio}px`;\n        }\n        // Copy the valid overlay content from the buffer if needed.\n        if (needBlit) {\n            this._overlayGC.drawImage(this._buffer, 0, 0);\n        }\n    }\n    /**\n     * Sync the scroll bars and scroll state with the viewport.\n     *\n     * #### Notes\n     * If the visibility of either scroll bar changes, a synchronous\n     * fit-request will be dispatched to the data grid to immediately\n     * resize the viewport.\n     */\n    _syncScrollState() {\n        // Fetch the viewport dimensions.\n        let bw = this.bodyWidth;\n        let bh = this.bodyHeight;\n        let pw = this.pageWidth;\n        let ph = this.pageHeight;\n        // Get the current scroll bar visibility.\n        let hasVScroll = !this._vScrollBar.isHidden;\n        let hasHScroll = !this._hScrollBar.isHidden;\n        // Get the minimum sizes of the scroll bars.\n        let vsw = this._vScrollBarMinWidth;\n        let hsh = this._hScrollBarMinHeight;\n        // Get the page size as if no scroll bars are visible.\n        let apw = pw + (hasVScroll ? vsw : 0);\n        let aph = ph + (hasHScroll ? hsh : 0);\n        // Test whether scroll bars are needed for the adjusted size.\n        let needVScroll = aph < bh - 1;\n        let needHScroll = apw < bw - 1;\n        // Re-test the horizontal scroll if a vertical scroll is needed.\n        if (needVScroll && !needHScroll) {\n            needHScroll = apw - vsw < bw - 1;\n        }\n        // Re-test the vertical scroll if a horizontal scroll is needed.\n        if (needHScroll && !needVScroll) {\n            needVScroll = aph - hsh < bh - 1;\n        }\n        // If the visibility changes, immediately refit the grid.\n        if (needVScroll !== hasVScroll || needHScroll !== hasHScroll) {\n            this._vScrollBar.setHidden(!needVScroll);\n            this._hScrollBar.setHidden(!needHScroll);\n            this._scrollCorner.setHidden(!needVScroll || !needHScroll);\n            MessageLoop.sendMessage(this, Widget.Msg.FitRequest);\n        }\n        // Update the scroll bar limits.\n        this._vScrollBar.maximum = this.maxScrollY;\n        this._vScrollBar.page = this.pageHeight;\n        this._hScrollBar.maximum = this.maxScrollX;\n        this._hScrollBar.page = this.pageWidth;\n        // Re-clamp the scroll position.\n        this._scrollTo(this._scrollX, this._scrollY);\n    }\n    /**\n     * Sync the viewport to the given scroll position.\n     *\n     * #### Notes\n     * This schedules a full repaint and syncs the scroll state.\n     */\n    _syncViewport() {\n        this.repaintContent();\n        this.repaintOverlay();\n        this._syncScrollState();\n    }\n    /**\n     * Process a message sent to the viewport\n     */\n    _processViewportMessage(msg) {\n        switch (msg.type) {\n            case 'resize':\n                this._onViewportResize(msg);\n                break;\n            case 'scroll-request':\n                this._onViewportScrollRequest(msg);\n                break;\n            case 'paint-request':\n                this._onViewportPaintRequest(msg);\n                break;\n            case 'overlay-paint-request':\n                this._onViewportOverlayPaintRequest(msg);\n                break;\n            case 'row-resize-request':\n                this._onViewportRowResizeRequest(msg);\n                break;\n            case 'column-resize-request':\n                this._onViewportColumnResizeRequest(msg);\n                break;\n        }\n    }\n    /**\n     * A message hook invoked on a viewport `'resize'` message.\n     */\n    _onViewportResize(msg) {\n        // Bail early if the viewport is not visible.\n        if (!this._viewport.isVisible) {\n            return;\n        }\n        // Unpack the message data.\n        let { width, height } = msg;\n        // Measure the viewport node if the dimensions are unknown.\n        if (width === -1) {\n            width = this._viewport.node.offsetWidth;\n        }\n        if (height === -1) {\n            height = this._viewport.node.offsetHeight;\n        }\n        // Round the dimensions to the nearest pixel.\n        width = Math.round(width);\n        height = Math.round(height);\n        // Get the current size of the viewport.\n        let oldWidth = this._viewportWidth;\n        let oldHeight = this._viewportHeight;\n        // Updated internal viewport size.\n        this._viewportWidth = width;\n        this._viewportHeight = height;\n        // Resize the canvas if needed.\n        this._resizeCanvasIfNeeded(width, height);\n        // Bail early if there is nothing to paint.\n        if (width === 0 || height === 0) {\n            return;\n        }\n        // Paint the whole grid if the old size was zero.\n        if (oldWidth === 0 || oldHeight === 0) {\n            this.paintContent(0, 0, width, height);\n            this._paintOverlay();\n            return;\n        }\n        // Paint the right edge as needed.\n        if (this._stretchLastColumn && this.pageWidth > this.bodyWidth) {\n            let bx = this._columnSections.offsetOf(this._columnSections.count - 1);\n            let x = Math.min(this.headerWidth + bx, oldWidth);\n            this.paintContent(x, 0, width - x, height);\n        }\n        else if (width > oldWidth) {\n            this.paintContent(oldWidth, 0, width - oldWidth + 1, height);\n        }\n        // Paint the bottom edge as needed.\n        if (this._stretchLastRow && this.pageHeight > this.bodyHeight) {\n            let by = this._rowSections.offsetOf(this._rowSections.count - 1);\n            let y = Math.min(this.headerHeight + by, oldHeight);\n            this.paintContent(0, y, width, height - y);\n        }\n        else if (height > oldHeight) {\n            this.paintContent(0, oldHeight, width, height - oldHeight + 1);\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n    }\n    /**\n     * A message hook invoked on a viewport `'scroll-request'` message.\n     */\n    _onViewportScrollRequest(msg) {\n        this._scrollTo(this._hScrollBar.value, this._vScrollBar.value);\n    }\n    /**\n     * A message hook invoked on a viewport `'paint-request'` message.\n     */\n    _onViewportPaintRequest(msg) {\n        // Bail early if the viewport is not visible.\n        if (!this._viewport.isVisible) {\n            return;\n        }\n        // Bail early if the viewport has zero area.\n        if (this._viewportWidth === 0 || this._viewportHeight === 0) {\n            return;\n        }\n        // Set up the paint limits.\n        let xMin = 0;\n        let yMin = 0;\n        let xMax = this._viewportWidth - 1;\n        let yMax = this._viewportHeight - 1;\n        // Fetch the scroll position.\n        let sx = this._scrollX;\n        let sy = this._scrollY;\n        // Fetch the header dimensions.\n        let hw = this.headerWidth;\n        let hh = this.headerHeight;\n        // Fetch the section lists.\n        let rs = this._rowSections;\n        let cs = this._columnSections;\n        let rhs = this._rowHeaderSections;\n        let chs = this._columnHeaderSections;\n        // Unpack the message data.\n        let { region, r1, c1, r2, c2 } = msg;\n        // Set up the paint variables.\n        let x1;\n        let y1;\n        let x2;\n        let y2;\n        // Fill the paint variables based on the paint region.\n        switch (region) {\n            case 'all':\n                x1 = xMin;\n                y1 = yMin;\n                x2 = xMax;\n                y2 = yMax;\n                break;\n            case 'body':\n                r1 = Math.max(0, Math.min(r1, rs.count));\n                c1 = Math.max(0, Math.min(c1, cs.count));\n                r2 = Math.max(0, Math.min(r2, rs.count));\n                c2 = Math.max(0, Math.min(c2, cs.count));\n                x1 = cs.offsetOf(c1) - sx + hw;\n                y1 = rs.offsetOf(r1) - sy + hh;\n                x2 = cs.extentOf(c2) - sx + hw;\n                y2 = rs.extentOf(r2) - sy + hh;\n                break;\n            case 'row-header':\n                r1 = Math.max(0, Math.min(r1, rs.count));\n                c1 = Math.max(0, Math.min(c1, rhs.count));\n                r2 = Math.max(0, Math.min(r2, rs.count));\n                c2 = Math.max(0, Math.min(c2, rhs.count));\n                x1 = rhs.offsetOf(c1);\n                y1 = rs.offsetOf(r1) - sy + hh;\n                x2 = rhs.extentOf(c2);\n                y2 = rs.extentOf(r2) - sy + hh;\n                break;\n            case 'column-header':\n                r1 = Math.max(0, Math.min(r1, chs.count));\n                c1 = Math.max(0, Math.min(c1, cs.count));\n                r2 = Math.max(0, Math.min(r2, chs.count));\n                c2 = Math.max(0, Math.min(c2, cs.count));\n                x1 = cs.offsetOf(c1) - sx + hw;\n                y1 = chs.offsetOf(r1);\n                x2 = cs.extentOf(c2) - sx + hw;\n                y2 = chs.extentOf(r2);\n                break;\n            case 'corner-header':\n                r1 = Math.max(0, Math.min(r1, chs.count));\n                c1 = Math.max(0, Math.min(c1, rhs.count));\n                r2 = Math.max(0, Math.min(r2, chs.count));\n                c2 = Math.max(0, Math.min(c2, rhs.count));\n                x1 = rhs.offsetOf(c1);\n                y1 = chs.offsetOf(r1);\n                x2 = rhs.extentOf(c2);\n                y2 = chs.extentOf(r2);\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Bail early if the dirty rect is outside the bounds.\n        if (x2 < xMin || y2 < yMin || x1 > xMax || y1 > yMax) {\n            return;\n        }\n        // Clamp the dirty rect to the paint bounds.\n        x1 = Math.max(xMin, Math.min(x1, xMax));\n        y1 = Math.max(yMin, Math.min(y1, yMax));\n        x2 = Math.max(xMin, Math.min(x2, xMax));\n        y2 = Math.max(yMin, Math.min(y2, yMax));\n        // Paint the content of the dirty rect.\n        this.paintContent(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n    }\n    /**\n     * A message hook invoked on a viewport `'overlay-paint-request'` message.\n     */\n    _onViewportOverlayPaintRequest(msg) {\n        // Bail early if the viewport is not visible.\n        if (!this._viewport.isVisible) {\n            return;\n        }\n        // Bail early if the viewport has zero area.\n        if (this._viewportWidth === 0 || this._viewportHeight === 0) {\n            return;\n        }\n        // Paint the content of the overlay.\n        this._paintOverlay();\n    }\n    /**\n     * A message hook invoked on a viewport `'row-resize-request'` message.\n     */\n    _onViewportRowResizeRequest(msg) {\n        if (msg.region === 'body') {\n            this._resizeRow(msg.index, msg.size);\n        }\n        else {\n            this._resizeColumnHeader(msg.index, msg.size);\n        }\n    }\n    /**\n     * A message hook invoked on a viewport `'column-resize-request'` message.\n     */\n    _onViewportColumnResizeRequest(msg) {\n        if (msg.region === 'body') {\n            this._resizeColumn(msg.index, msg.size);\n        }\n        else {\n            this._resizeRowHeader(msg.index, msg.size);\n        }\n    }\n    /**\n     * Handle the `thumbMoved` signal from a scroll bar.\n     */\n    _onThumbMoved(sender) {\n        MessageLoop.postMessage(this._viewport, Private$1.ScrollRequest);\n    }\n    /**\n     * Handle the `pageRequested` signal from a scroll bar.\n     */\n    _onPageRequested(sender, dir) {\n        if (sender === this._vScrollBar) {\n            this.scrollByPage(dir === 'decrement' ? 'up' : 'down');\n        }\n        else {\n            this.scrollByPage(dir === 'decrement' ? 'left' : 'right');\n        }\n    }\n    /**\n     * Handle the `stepRequested` signal from a scroll bar.\n     */\n    _onStepRequested(sender, dir) {\n        if (sender === this._vScrollBar) {\n            this.scrollByStep(dir === 'decrement' ? 'up' : 'down');\n        }\n        else {\n            this.scrollByStep(dir === 'decrement' ? 'left' : 'right');\n        }\n    }\n    /**\n     * A signal handler for the data model `changed` signal.\n     */\n    _onDataModelChanged(sender, args) {\n        switch (args.type) {\n            case 'rows-inserted':\n                this._onRowsInserted(args);\n                break;\n            case 'columns-inserted':\n                this._onColumnsInserted(args);\n                break;\n            case 'rows-removed':\n                this._onRowsRemoved(args);\n                break;\n            case 'columns-removed':\n                this._onColumnsRemoved(args);\n                break;\n            case 'rows-moved':\n                this._onRowsMoved(args);\n                break;\n            case 'columns-moved':\n                this._onColumnsMoved(args);\n                break;\n            case 'cells-changed':\n                this._onCellsChanged(args);\n                break;\n            case 'model-reset':\n                this._onModelReset(args);\n                break;\n            default:\n                throw 'unreachable';\n        }\n    }\n    /**\n     * A signal handler for the selection model `changed` signal.\n     */\n    _onSelectionsChanged(sender) {\n        this.repaintOverlay();\n    }\n    /**\n     * Handle rows being inserted in the data model.\n     */\n    _onRowsInserted(args) {\n        // Unpack the arg data.\n        let { region, index, span } = args;\n        // Bail early if there are no sections to insert.\n        if (span <= 0) {\n            return;\n        }\n        // Look up the relevant section list.\n        let list;\n        if (region === 'body') {\n            list = this._rowSections;\n        }\n        else {\n            list = this._columnHeaderSections;\n        }\n        // Insert the span, maintaining the scroll position as needed.\n        if (this._scrollY === this.maxScrollY && this.maxScrollY > 0) {\n            list.insert(index, span);\n            this._scrollY = this.maxScrollY;\n        }\n        else {\n            list.insert(index, span);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    }\n    /**\n     * Handle columns being inserted into the data model.\n     */\n    _onColumnsInserted(args) {\n        // Unpack the arg data.\n        let { region, index, span } = args;\n        // Bail early if there are no sections to insert.\n        if (span <= 0) {\n            return;\n        }\n        // Look up the relevant section list.\n        let list;\n        if (region === 'body') {\n            list = this._columnSections;\n        }\n        else {\n            list = this._rowHeaderSections;\n        }\n        // Insert the span, maintaining the scroll position as needed.\n        if (this._scrollX === this.maxScrollX && this.maxScrollX > 0) {\n            list.insert(index, span);\n            this._scrollX = this.maxScrollX;\n        }\n        else {\n            list.insert(index, span);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    }\n    /**\n     * Handle rows being removed from the data model.\n     */\n    _onRowsRemoved(args) {\n        // Unpack the arg data.\n        let { region, index, span } = args;\n        // Bail early if there are no sections to remove.\n        if (span <= 0) {\n            return;\n        }\n        // Look up the relevant section list.\n        let list;\n        if (region === 'body') {\n            list = this._rowSections;\n        }\n        else {\n            list = this._columnHeaderSections;\n        }\n        // Bail if the index or is invalid\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Remove the span, maintaining the scroll position as needed.\n        if (this._scrollY === this.maxScrollY && this.maxScrollY > 0) {\n            list.remove(index, span);\n            this._scrollY = this.maxScrollY;\n        }\n        else {\n            list.remove(index, span);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    }\n    /**\n     * Handle columns being removed from the data model.\n     */\n    _onColumnsRemoved(args) {\n        // Unpack the arg data.\n        let { region, index, span } = args;\n        // Bail early if there are no sections to remove.\n        if (span <= 0) {\n            return;\n        }\n        // Look up the relevant section list.\n        let list;\n        if (region === 'body') {\n            list = this._columnSections;\n        }\n        else {\n            list = this._rowHeaderSections;\n        }\n        // Bail if the index or is invalid\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Remove the span, maintaining the scroll position as needed.\n        if (this._scrollX === this.maxScrollX && this.maxScrollX > 0) {\n            list.remove(index, span);\n            this._scrollX = this.maxScrollX;\n        }\n        else {\n            list.remove(index, span);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    }\n    /**\n     * Handle rows moving in the data model.\n     */\n    _onRowsMoved(args) {\n        // Unpack the arg data.\n        let { region, index, span, destination } = args;\n        // Bail early if there are no sections to move.\n        if (span <= 0) {\n            return;\n        }\n        // Look up the relevant section list.\n        let list;\n        if (region === 'body') {\n            list = this._rowSections;\n        }\n        else {\n            list = this._columnHeaderSections;\n        }\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Clamp the move span to the limit.\n        span = Math.min(span, list.count - index);\n        // Clamp the destination index to the limit.\n        destination = Math.min(Math.max(0, destination), list.count - span);\n        // Bail early if there is no effective move.\n        if (index === destination) {\n            return;\n        }\n        // Compute the first affected index.\n        let r1 = Math.min(index, destination);\n        // Compute the last affected index.\n        let r2 = Math.max(index + span - 1, destination + span - 1);\n        // Move the sections in the list.\n        list.move(index, span, destination);\n        // Schedule a repaint of the dirty cells.\n        if (region === 'body') {\n            this.repaintRegion('body', r1, 0, r2, Infinity);\n            this.repaintRegion('row-header', r1, 0, r2, Infinity);\n        }\n        else {\n            this.repaintRegion('column-header', r1, 0, r2, Infinity);\n            this.repaintRegion('corner-header', r1, 0, r2, Infinity);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    }\n    /**\n     * Handle columns moving in the data model.\n     */\n    _onColumnsMoved(args) {\n        // Unpack the arg data.\n        let { region, index, span, destination } = args;\n        // Bail early if there are no sections to move.\n        if (span <= 0) {\n            return;\n        }\n        // Look up the relevant section list.\n        let list;\n        if (region === 'body') {\n            list = this._columnSections;\n        }\n        else {\n            list = this._rowHeaderSections;\n        }\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Clamp the move span to the limit.\n        span = Math.min(span, list.count - index);\n        // Clamp the destination index to the limit.\n        destination = Math.min(Math.max(0, destination), list.count - span);\n        // Bail early if there is no effective move.\n        if (index === destination) {\n            return;\n        }\n        // Move the sections in the list.\n        list.move(index, span, destination);\n        // Compute the first affected index.\n        let c1 = Math.min(index, destination);\n        // Compute the last affected index.\n        let c2 = Math.max(index + span - 1, destination + span - 1);\n        // Schedule a repaint of the dirty cells.\n        if (region === 'body') {\n            this.repaintRegion('body', 0, c1, Infinity, c2);\n            this.repaintRegion('column-header', 0, c1, Infinity, c2);\n        }\n        else {\n            this.repaintRegion('row-header', 0, c1, Infinity, c2);\n            this.repaintRegion('corner-header', 0, c1, Infinity, c2);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    }\n    /**\n     * Handle cells changing in the data model.\n     */\n    _onCellsChanged(args) {\n        // Unpack the arg data.\n        let { region, row, column, rowSpan, columnSpan } = args;\n        // Bail early if there are no cells to modify.\n        if (rowSpan <= 0 && columnSpan <= 0) {\n            return;\n        }\n        // Compute the changed cell bounds.\n        let r1 = row;\n        let c1 = column;\n        let r2 = r1 + rowSpan - 1;\n        let c2 = c1 + columnSpan - 1;\n        // Schedule a repaint of the cell content.\n        this.repaintRegion(region, r1, c1, r2, c2);\n    }\n    /**\n     * Handle a full data model reset.\n     */\n    _onModelReset(args) {\n        // Look up the various current section counts.\n        let nr = this._rowSections.count;\n        let nc = this._columnSections.count;\n        let nrh = this._rowHeaderSections.count;\n        let nch = this._columnHeaderSections.count;\n        // Compute the delta count for each region.\n        let dr = this._dataModel.rowCount('body') - nr;\n        let dc = this._dataModel.columnCount('body') - nc;\n        let drh = this._dataModel.columnCount('row-header') - nrh;\n        let dch = this._dataModel.rowCount('column-header') - nch;\n        // Update the row sections, if needed.\n        if (dr > 0) {\n            this._rowSections.insert(nr, dr);\n        }\n        else if (dr < 0) {\n            this._rowSections.remove(nr + dr, -dr);\n        }\n        // Update the column sections, if needed.\n        if (dc > 0) {\n            this._columnSections.insert(nc, dc);\n        }\n        else if (dc < 0) {\n            this._columnSections.remove(nc + dc, -dc);\n        }\n        // Update the row header sections, if needed.\n        if (drh > 0) {\n            this._rowHeaderSections.insert(nrh, drh);\n        }\n        else if (drh < 0) {\n            this._rowHeaderSections.remove(nrh + drh, -drh);\n        }\n        // Update the column header sections, if needed.\n        if (dch > 0) {\n            this._columnHeaderSections.insert(nch, dch);\n        }\n        else if (dch < 0) {\n            this._columnHeaderSections.remove(nch + dch, -dch);\n        }\n        // Sync the viewport.\n        this._syncViewport();\n    }\n    /**\n     * A signal handler for the renderer map `changed` signal.\n     */\n    _onRenderersChanged() {\n        this.repaintContent();\n    }\n    /**\n     * Handle the `'keydown'` event for the data grid.\n     */\n    _evtKeyDown(event) {\n        if (this._mousedown) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        else if (this._keyHandler) {\n            this._keyHandler.onKeyDown(this, event);\n        }\n    }\n    /**\n     * Handle the `'mousedown'` event for the data grid.\n     */\n    _evtMouseDown(event) {\n        // Ignore everything except the left mouse button.\n        if (event.button !== 0) {\n            return;\n        }\n        // Activate the grid.\n        this.activate();\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Add the extra document listeners.\n        document.addEventListener('keydown', this, true);\n        document.addEventListener('mouseup', this, true);\n        document.addEventListener('mousedown', this, true);\n        document.addEventListener('mousemove', this, true);\n        document.addEventListener('contextmenu', this, true);\n        // Flip the mousedown flag.\n        this._mousedown = true;\n        // Dispatch to the mouse handler.\n        if (this._mouseHandler) {\n            this._mouseHandler.onMouseDown(this, event);\n        }\n    }\n    /**\n     * Handle the `'mousemove'` event for the data grid.\n     */\n    _evtMouseMove(event) {\n        // Stop the event propagation if the mouse is down.\n        if (this._mousedown) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        // Bail if there is no mouse handler.\n        if (!this._mouseHandler) {\n            return;\n        }\n        // Dispatch to the mouse handler.\n        if (this._mousedown) {\n            this._mouseHandler.onMouseMove(this, event);\n        }\n        else {\n            this._mouseHandler.onMouseHover(this, event);\n        }\n    }\n    /**\n     * Handle the `'mouseup'` event for the data grid.\n     */\n    _evtMouseUp(event) {\n        // Ignore everything except the left mouse button.\n        if (event.button !== 0) {\n            return;\n        }\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Dispatch to the mouse handler.\n        if (this._mouseHandler) {\n            this._mouseHandler.onMouseUp(this, event);\n        }\n        // Release the mouse.\n        this._releaseMouse();\n    }\n    /**\n     * Handle the `'dblclick'` event for the data grid.\n     */\n    _evtMouseDoubleClick(event) {\n        // Ignore everything except the left mouse button.\n        if (event.button !== 0) {\n            return;\n        }\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        // Dispatch to the mouse handler.\n        if (this._mouseHandler) {\n            this._mouseHandler.onMouseDoubleClick(this, event);\n        }\n        // Release the mouse.\n        this._releaseMouse();\n    }\n    /**\n     * Handle the `'mouseleave'` event for the data grid.\n     */\n    _evtMouseLeave(event) {\n        if (this._mousedown) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        else if (this._mouseHandler) {\n            this._mouseHandler.onMouseLeave(this, event);\n        }\n    }\n    /**\n     * Handle the `'contextmenu'` event for the data grid.\n     */\n    _evtContextMenu(event) {\n        if (this._mousedown) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        else if (this._mouseHandler) {\n            this._mouseHandler.onContextMenu(this, event);\n        }\n    }\n    /**\n     * Handle the `'wheel'` event for the data grid.\n     */\n    _evtWheel(event) {\n        // Ignore the event if `accel` is held.\n        if (Platform.accelKey(event)) {\n            return;\n        }\n        // Bail early if there is no mouse handler.\n        if (!this._mouseHandler) {\n            return;\n        }\n        // Dispatch to the mouse handler.\n        this._mouseHandler.onWheel(this, event);\n    }\n    /**\n     * Release the mouse grab.\n     */\n    _releaseMouse() {\n        // Clear the mousedown flag.\n        this._mousedown = false;\n        // Relase the mouse handler.\n        if (this._mouseHandler) {\n            this._mouseHandler.release();\n        }\n        // Remove the document listeners.\n        document.removeEventListener('keydown', this, true);\n        document.removeEventListener('mouseup', this, true);\n        document.removeEventListener('mousedown', this, true);\n        document.removeEventListener('mousemove', this, true);\n        document.removeEventListener('contextmenu', this, true);\n    }\n    /**\n     * Refresh the dpi ratio.\n     */\n    _refreshDPI() {\n        // Get the best integral value for the dpi ratio.\n        let dpiRatio = Math.ceil(window.devicePixelRatio);\n        // Bail early if the computed dpi ratio has not changed.\n        if (this._dpiRatio === dpiRatio) {\n            return;\n        }\n        // Update the internal dpi ratio.\n        this._dpiRatio = dpiRatio;\n        // Schedule a repaint of the content.\n        this.repaintContent();\n        // Schedule a repaint of the overlay.\n        this.repaintOverlay();\n        // Update the canvas size for the new dpi ratio.\n        this._resizeCanvasIfNeeded(this._viewportWidth, this._viewportHeight);\n        // Ensure the canvas style is scaled for the new ratio.\n        this._canvas.style.width = `${this._canvas.width / this._dpiRatio}px`;\n        this._canvas.style.height = `${this._canvas.height / this._dpiRatio}px`;\n        // Ensure the overlay style is scaled for the new ratio.\n        this._overlay.style.width = `${this._overlay.width / this._dpiRatio}px`;\n        this._overlay.style.height = `${this._overlay.height / this._dpiRatio}px`;\n    }\n    /**\n     * Resize a row section immediately.\n     */\n    _resizeRow(index, size) {\n        // Look up the target section list.\n        let list = this._rowSections;\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Look up the old size of the section.\n        let oldSize = list.sizeOf(index);\n        // Normalize the new size of the section.\n        let newSize = list.clampSize(size);\n        // Bail early if the size does not change.\n        if (oldSize === newSize) {\n            return;\n        }\n        // Resize the section in the list.\n        list.resize(index, newSize);\n        // Get the current size of the viewport.\n        let vw = this._viewportWidth;\n        let vh = this._viewportHeight;\n        // If there is nothing to paint, sync the scroll state.\n        if (!this._viewport.isVisible || vw === 0 || vh === 0) {\n            this._syncScrollState();\n            return;\n        }\n        // Compute the size delta.\n        let delta = newSize - oldSize;\n        // Look up the column header height.\n        let hh = this.headerHeight;\n        // Compute the viewport offset of the section.\n        let offset = list.offsetOf(index) + hh - this._scrollY;\n        // Bail early if there is nothing to paint.\n        if (hh >= vh || offset >= vh) {\n            this._syncScrollState();\n            return;\n        }\n        // Update the scroll position if the section is not visible.\n        if (offset + oldSize <= hh) {\n            this._scrollY += delta;\n            this._syncScrollState();\n            return;\n        }\n        // Compute the paint origin of the section.\n        let pos = Math.max(hh, offset);\n        // Paint from the section onward if it spans the viewport.\n        if (offset + oldSize >= vh || offset + newSize >= vh) {\n            this.paintContent(0, pos, vw, vh - pos);\n            this._paintOverlay();\n            this._syncScrollState();\n            return;\n        }\n        // Compute the X blit dimensions.\n        let sx = 0;\n        let sw = vw;\n        let dx = 0;\n        // Compute the Y blit dimensions.\n        let sy;\n        let sh;\n        let dy;\n        if (offset + newSize <= hh) {\n            sy = hh - delta;\n            sh = vh - sy;\n            dy = hh;\n        }\n        else {\n            sy = offset + oldSize;\n            sh = vh - sy;\n            dy = sy + delta;\n        }\n        // Blit the valid content to the destination.\n        this._blitContent(this._canvas, sx, sy, sw, sh, dx, dy);\n        // Repaint the section if needed.\n        if (newSize > 0 && offset + newSize > hh) {\n            this.paintContent(0, pos, vw, offset + newSize - pos);\n        }\n        // Paint the trailing space as needed.\n        if (this._stretchLastRow && this.pageHeight > this.bodyHeight) {\n            let r = this._rowSections.count - 1;\n            let y = hh + this._rowSections.offsetOf(r);\n            this.paintContent(0, y, vw, vh - y);\n        }\n        else if (delta < 0) {\n            this.paintContent(0, vh + delta, vw, -delta);\n        }\n        // Repaint merged cells that are intersected by the resized row\n        // Otherwise it will be cut in two by the valid content, and drawn incorrectly\n        for (const rgn of ['body', 'row-header']) {\n            const cellGroups = CellGroup.getCellGroupsAtRow(this.dataModel, rgn, index);\n            let paintRgn = {\n                region: rgn,\n                xMin: 0,\n                xMax: 0,\n                yMin: 0,\n                yMax: 0\n            };\n            let backgroundColor = undefined;\n            switch (rgn) {\n                case 'body':\n                    paintRgn.xMin = this.headerWidth;\n                    paintRgn.xMax = this.headerWidth + this.bodyWidth;\n                    paintRgn.yMin = this.headerHeight;\n                    paintRgn.yMax = this.headerHeight + this.bodyHeight;\n                    backgroundColor = this._style.backgroundColor;\n                    break;\n                case 'row-header':\n                    paintRgn.xMin = 0;\n                    paintRgn.xMax = this.headerWidth;\n                    paintRgn.yMin = this.headerHeight;\n                    paintRgn.yMax = this.headerHeight + this.bodyHeight;\n                    backgroundColor = this._style.headerBackgroundColor;\n                    break;\n            }\n            this._paintMergedCells(cellGroups, paintRgn, backgroundColor);\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n        // Sync the scroll state.\n        this._syncScrollState();\n    }\n    /**\n     * Resize a column section immediately.\n     */\n    _resizeColumn(index, size) {\n        // Look up the target section list.\n        let list = this._columnSections;\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        const adjustedSize = size !== null && size !== void 0 ? size : this._getMaxWidthInColumn(index, 'body');\n        if (!adjustedSize || adjustedSize == 0) {\n            return;\n        }\n        // Look up the old size of the section.\n        let oldSize = list.sizeOf(index);\n        // Normalize the new size of the section.\n        let newSize = list.clampSize(adjustedSize);\n        // Bail early if the size does not change.\n        if (oldSize === newSize) {\n            return;\n        }\n        // Resize the section in the list.\n        list.resize(index, newSize);\n        // Get the current size of the viewport.\n        let vw = this._viewportWidth;\n        let vh = this._viewportHeight;\n        // If there is nothing to paint, sync the scroll state.\n        if (!this._viewport.isVisible || vw === 0 || vh === 0) {\n            this._syncScrollState();\n            return;\n        }\n        // Compute the size delta.\n        let delta = newSize - oldSize;\n        // Look up the row header width.\n        let hw = this.headerWidth;\n        // Compute the viewport offset of the section.\n        let offset = list.offsetOf(index) + hw - this._scrollX;\n        // Bail early if there is nothing to paint.\n        if (hw >= vw || offset >= vw) {\n            this._syncScrollState();\n            return;\n        }\n        // Update the scroll position if the section is not visible.\n        if (offset + oldSize <= hw) {\n            this._scrollX += delta;\n            this._syncScrollState();\n            return;\n        }\n        // Compute the paint origin of the section.\n        let pos = Math.max(hw, offset);\n        // Paint from the section onward if it spans the viewport.\n        if (offset + oldSize >= vw || offset + newSize >= vw) {\n            this.paintContent(pos, 0, vw - pos, vh);\n            this._paintOverlay();\n            this._syncScrollState();\n            return;\n        }\n        // Compute the Y blit dimensions.\n        let sy = 0;\n        let sh = vh;\n        let dy = 0;\n        // Compute the X blit dimensions.\n        let sx;\n        let sw;\n        let dx;\n        if (offset + newSize <= hw) {\n            sx = hw - delta;\n            sw = vw - sx;\n            dx = hw;\n        }\n        else {\n            sx = offset + oldSize;\n            sw = vw - sx;\n            dx = sx + delta;\n        }\n        // Blit the valid content to the destination.\n        this._blitContent(this._canvas, sx, sy, sw, sh, dx, dy);\n        // Repaint the section if needed.\n        if (newSize > 0 && offset + newSize > hw) {\n            this.paintContent(pos, 0, offset + newSize - pos, vh);\n        }\n        // Paint the trailing space as needed.\n        if (this._stretchLastColumn && this.pageWidth > this.bodyWidth) {\n            let c = this._columnSections.count - 1;\n            let x = hw + this._columnSections.offsetOf(c);\n            this.paintContent(x, 0, vw - x, vh);\n        }\n        else if (delta < 0) {\n            this.paintContent(vw + delta, 0, -delta, vh);\n        }\n        // Repaint merged cells that are intersected by the resized column\n        // Otherwise it will be cut in two by the valid content, and drawn incorrectly\n        for (const rgn of ['body', 'column-header']) {\n            const cellGroups = CellGroup.getCellGroupsAtColumn(this.dataModel, rgn, index);\n            let paintRgn = {\n                region: rgn,\n                xMin: 0,\n                xMax: 0,\n                yMin: 0,\n                yMax: 0\n            };\n            let backgroundColor = undefined;\n            switch (rgn) {\n                case 'body':\n                    paintRgn.xMin = this.headerWidth;\n                    paintRgn.xMax = this.headerWidth + this.bodyWidth;\n                    paintRgn.yMin = this.headerHeight;\n                    paintRgn.yMax = this.headerHeight + this.bodyHeight;\n                    backgroundColor = this._style.backgroundColor;\n                    break;\n                case 'column-header':\n                    paintRgn.xMin = this.headerWidth;\n                    paintRgn.xMax = this.headerWidth + this.bodyWidth;\n                    paintRgn.yMin = 0;\n                    paintRgn.yMax = this.headerHeight;\n                    backgroundColor = this._style.headerBackgroundColor;\n                    break;\n            }\n            this._paintMergedCells(cellGroups, paintRgn, backgroundColor);\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n        // Sync the scroll state after painting.\n        this._syncScrollState();\n    }\n    /**\n     * Resize a row header section immediately.\n     */\n    _resizeRowHeader(index, size) {\n        // Look up the target section list.\n        let list = this._rowHeaderSections;\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        const adjustedSize = size !== null && size !== void 0 ? size : this._getMaxWidthInColumn(index, 'row-header');\n        if (!adjustedSize || adjustedSize == 0) {\n            return;\n        }\n        // Look up the old size of the section.\n        let oldSize = list.sizeOf(index);\n        // Normalize the new size of the section.\n        let newSize = list.clampSize(adjustedSize);\n        // Bail early if the size does not change.\n        if (oldSize === newSize) {\n            return;\n        }\n        // Resize the section in the list.\n        list.resize(index, newSize);\n        // Get the current size of the viewport.\n        let vw = this._viewportWidth;\n        let vh = this._viewportHeight;\n        // If there is nothing to paint, sync the scroll state.\n        if (!this._viewport.isVisible || vw === 0 || vh === 0) {\n            this._syncScrollState();\n            return;\n        }\n        // Compute the size delta.\n        let delta = newSize - oldSize;\n        // Look up the offset of the section.\n        let offset = list.offsetOf(index);\n        // Bail early if the section is fully outside the viewport.\n        if (offset >= vw) {\n            this._syncScrollState();\n            return;\n        }\n        // Paint the entire tail if the section spans the viewport.\n        if (offset + oldSize >= vw || offset + newSize >= vw) {\n            this.paintContent(offset, 0, vw - offset, vh);\n            this._paintOverlay();\n            this._syncScrollState();\n            return;\n        }\n        // Compute the blit content dimensions.\n        let sx = offset + oldSize;\n        let sy = 0;\n        let sw = vw - sx;\n        let sh = vh;\n        let dx = sx + delta;\n        let dy = 0;\n        // Blit the valid content to the destination.\n        this._blitContent(this._canvas, sx, sy, sw, sh, dx, dy);\n        // Repaint the header section if needed.\n        if (newSize > 0) {\n            this.paintContent(offset, 0, newSize, vh);\n        }\n        // Paint the trailing space as needed.\n        if (this._stretchLastColumn && this.pageWidth > this.bodyWidth) {\n            let c = this._columnSections.count - 1;\n            let x = this.headerWidth + this._columnSections.offsetOf(c);\n            this.paintContent(x, 0, vw - x, vh);\n        }\n        else if (delta < 0) {\n            this.paintContent(vw + delta, 0, -delta, vh);\n        }\n        // Repaint merged cells that are intersected by the resized row\n        // Otherwise it will be cut in two by the valid content, and drawn incorrectly\n        for (const rgn of [\n            'corner-header',\n            'row-header'\n        ]) {\n            const cellGroups = CellGroup.getCellGroupsAtColumn(this.dataModel, rgn, index);\n            let paintRgn = {\n                region: rgn,\n                xMin: 0,\n                xMax: 0,\n                yMin: 0,\n                yMax: 0\n            };\n            switch (rgn) {\n                case 'corner-header':\n                    paintRgn.xMin = 0;\n                    paintRgn.xMax = this.headerWidth;\n                    paintRgn.yMin = 0;\n                    paintRgn.yMax = this.headerHeight;\n                    break;\n                case 'row-header':\n                    paintRgn.xMin = 0;\n                    paintRgn.xMax = this.headerWidth;\n                    paintRgn.yMin = this.headerHeight;\n                    paintRgn.yMax = this.headerHeight + this.bodyHeight;\n                    break;\n            }\n            this._paintMergedCells(cellGroups, paintRgn, this._style.headerBackgroundColor);\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n        // Sync the scroll state after painting.\n        this._syncScrollState();\n    }\n    /**\n     * Resize a column header section immediately.\n     */\n    _resizeColumnHeader(index, size) {\n        // Look up the target section list.\n        let list = this._columnHeaderSections;\n        // Bail early if the index is out of range.\n        if (index < 0 || index >= list.count) {\n            return;\n        }\n        // Look up the old size of the section.\n        let oldSize = list.sizeOf(index);\n        // Normalize the new size of the section.\n        let newSize = list.clampSize(size);\n        // Bail early if the size does not change.\n        if (oldSize === newSize) {\n            return;\n        }\n        // Resize the section in the list.\n        list.resize(index, newSize);\n        // Get the current size of the viewport.\n        let vw = this._viewportWidth;\n        let vh = this._viewportHeight;\n        // If there is nothing to paint, sync the scroll state.\n        if (!this._viewport.isVisible || vw === 0 || vh === 0) {\n            this._syncScrollState();\n            return;\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n        // Compute the size delta.\n        let delta = newSize - oldSize;\n        // Look up the offset of the section.\n        let offset = list.offsetOf(index);\n        // Bail early if the section is fully outside the viewport.\n        if (offset >= vh) {\n            this._syncScrollState();\n            return;\n        }\n        // Paint the entire tail if the section spans the viewport.\n        if (offset + oldSize >= vh || offset + newSize >= vh) {\n            this.paintContent(0, offset, vw, vh - offset);\n            this._paintOverlay();\n            this._syncScrollState();\n            return;\n        }\n        // Compute the blit content dimensions.\n        let sx = 0;\n        let sy = offset + oldSize;\n        let sw = vw;\n        let sh = vh - sy;\n        let dx = 0;\n        let dy = sy + delta;\n        // Blit the valid contents to the destination.\n        this._blitContent(this._canvas, sx, sy, sw, sh, dx, dy);\n        // Repaint the header section if needed.\n        if (newSize > 0) {\n            this.paintContent(0, offset, vw, newSize);\n        }\n        // Paint the trailing space as needed.\n        if (this._stretchLastRow && this.pageHeight > this.bodyHeight) {\n            let r = this._rowSections.count - 1;\n            let y = this.headerHeight + this._rowSections.offsetOf(r);\n            this.paintContent(0, y, vw, vh - y);\n        }\n        else if (delta < 0) {\n            this.paintContent(0, vh + delta, vw, -delta);\n        }\n        // Repaint merged cells that are intersected by the resized row\n        // Otherwise it will be cut in two by the valid content, and drawn incorrectly\n        for (const rgn of [\n            'corner-header',\n            'column-header'\n        ]) {\n            const cellGroups = CellGroup.getCellGroupsAtRow(this.dataModel, rgn, index);\n            let paintRgn = {\n                region: rgn,\n                xMin: 0,\n                xMax: 0,\n                yMin: 0,\n                yMax: 0\n            };\n            switch (rgn) {\n                case 'corner-header':\n                    paintRgn.xMin = 0;\n                    paintRgn.xMax = this.headerWidth;\n                    paintRgn.yMin = 0;\n                    paintRgn.yMax = this.headerHeight;\n                    break;\n                case 'column-header':\n                    paintRgn.xMin = this.headerWidth;\n                    paintRgn.xMax = this.headerWidth + this.bodyWidth;\n                    paintRgn.yMin = 0;\n                    paintRgn.yMax = this.headerHeight;\n                    break;\n            }\n            this._paintMergedCells(cellGroups, paintRgn, this._style.headerBackgroundColor);\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n        // Sync the scroll state after painting.\n        this._syncScrollState();\n    }\n    /**\n     * Scroll immediately to the specified offset position.\n     */\n    _scrollTo(x, y) {\n        // Bail if no data model found.\n        if (!this.dataModel) {\n            return;\n        }\n        // Floor and clamp the position to the allowable range.\n        x = Math.max(0, Math.min(Math.floor(x), this.maxScrollX));\n        y = Math.max(0, Math.min(Math.floor(y), this.maxScrollY));\n        // Synchronize the scroll bar values.\n        this._hScrollBar.value = x;\n        this._vScrollBar.value = y;\n        // Compute the delta scroll amount.\n        let dx = x - this._scrollX;\n        let dy = y - this._scrollY;\n        // Bail early if there is no effective scroll.\n        if (dx === 0 && dy === 0) {\n            return;\n        }\n        // Bail early if the viewport is not visible.\n        if (!this._viewport.isVisible) {\n            this._scrollX = x;\n            this._scrollY = y;\n            return;\n        }\n        // Get the current size of the viewport.\n        let width = this._viewportWidth;\n        let height = this._viewportHeight;\n        // Bail early if the viewport is empty.\n        if (width === 0 || height === 0) {\n            this._scrollX = x;\n            this._scrollY = y;\n            return;\n        }\n        // Get the visible content origin.\n        let contentX = this.headerWidth;\n        let contentY = this.headerHeight;\n        // Get the visible content dimensions.\n        let contentWidth = width - contentX;\n        let contentHeight = height - contentY;\n        // Bail early if there is no content to draw.\n        if (contentWidth <= 0 && contentHeight <= 0) {\n            this._scrollX = x;\n            this._scrollY = y;\n            return;\n        }\n        // Compute the area which needs painting for the `dx` scroll.\n        let dxArea = 0;\n        if (dx !== 0 && contentWidth > 0) {\n            if (Math.abs(dx) >= contentWidth) {\n                dxArea = contentWidth * height;\n            }\n            else {\n                dxArea = Math.abs(dx) * height;\n            }\n        }\n        // Compute the area which needs painting for the `dy` scroll.\n        let dyArea = 0;\n        if (dy !== 0 && contentHeight > 0) {\n            if (Math.abs(dy) >= contentHeight) {\n                dyArea = width * contentHeight;\n            }\n            else {\n                dyArea = width * Math.abs(dy);\n            }\n        }\n        // If the area sum is larger than the total, paint everything.\n        if (dxArea + dyArea >= width * height) {\n            this._scrollX = x;\n            this._scrollY = y;\n            this.paintContent(0, 0, width, height);\n            this._paintOverlay();\n            return;\n        }\n        // Update the internal Y scroll position.\n        this._scrollY = y;\n        // Scroll the Y axis if needed. If the scroll distance exceeds\n        // the visible height, paint everything. Otherwise, blit the\n        // valid content and paint the dirty region.\n        if (dy !== 0 && contentHeight > 0) {\n            if (Math.abs(dy) >= contentHeight) {\n                this.paintContent(0, contentY, width, contentHeight);\n            }\n            else {\n                const x = 0;\n                const y = dy < 0 ? contentY : contentY + dy;\n                const w = width;\n                const h = contentHeight - Math.abs(dy);\n                this._blitContent(this._canvas, x, y, w, h, x, y - dy);\n                this.paintContent(0, dy < 0 ? contentY : height - dy, width, Math.abs(dy));\n                // Repaint merged cells that are intersected by the scroll level\n                // Otherwise it will be cut in two by the valid content, and drawn incorrectly\n                for (const rgn of ['body', 'row-header']) {\n                    const cellgroups = CellGroup.getCellGroupsAtRegion(this.dataModel, rgn);\n                    let paintRgn = {\n                        region: rgn,\n                        xMin: 0,\n                        xMax: 0,\n                        yMin: 0,\n                        yMax: 0\n                    };\n                    let backgroundColor = undefined;\n                    switch (rgn) {\n                        case 'body':\n                            paintRgn.xMin = this.headerWidth;\n                            paintRgn.xMax = this.headerWidth + this.bodyWidth;\n                            paintRgn.yMin = this.headerHeight;\n                            paintRgn.yMax = this.headerHeight + this.bodyHeight;\n                            backgroundColor = this._style.backgroundColor;\n                            break;\n                        case 'row-header':\n                            paintRgn.xMin = 0;\n                            paintRgn.xMax = this.headerWidth;\n                            paintRgn.yMin = this.headerHeight;\n                            paintRgn.yMax = this.headerHeight + this.bodyHeight;\n                            backgroundColor = this._style.headerBackgroundColor;\n                            break;\n                    }\n                    this._paintMergedCells(cellgroups, paintRgn, backgroundColor);\n                }\n            }\n        }\n        // Update the internal X scroll position.\n        this._scrollX = x;\n        // Scroll the X axis if needed. If the scroll distance exceeds\n        // the visible width, paint everything. Otherwise, blit the\n        // valid content and paint the dirty region.\n        if (dx !== 0 && contentWidth > 0) {\n            if (Math.abs(dx) >= contentWidth) {\n                this.paintContent(contentX, 0, contentWidth, height);\n            }\n            else {\n                const x = dx < 0 ? contentX : contentX + dx;\n                const y = 0;\n                const w = contentWidth - Math.abs(dx);\n                const h = height;\n                this._blitContent(this._canvas, x, y, w, h, x - dx, y);\n                this.paintContent(dx < 0 ? contentX : width - dx, 0, Math.abs(dx), height);\n                // Repaint merged cells that are intersected by the scroll level\n                // Otherwise it will be cut in two by the valid content, and drawn incorrectly\n                for (const rgn of ['body', 'column-header']) {\n                    const cellGroups = CellGroup.getCellGroupsAtRegion(this.dataModel, rgn);\n                    let paintRgn = {\n                        region: rgn,\n                        xMin: 0,\n                        xMax: 0,\n                        yMin: 0,\n                        yMax: 0\n                    };\n                    let backgroundColor = undefined;\n                    switch (rgn) {\n                        case 'body':\n                            paintRgn.xMin = this.headerWidth;\n                            paintRgn.xMax = this.headerWidth + this.bodyWidth;\n                            paintRgn.yMin = this.headerHeight;\n                            paintRgn.yMax = this.headerHeight + this.bodyHeight;\n                            backgroundColor = this._style.backgroundColor;\n                            break;\n                        case 'column-header':\n                            paintRgn.xMin = this.headerWidth;\n                            paintRgn.xMax = this.headerWidth + this.bodyWidth;\n                            paintRgn.yMin = 0;\n                            paintRgn.yMax = this.headerHeight;\n                            backgroundColor = this._style.headerBackgroundColor;\n                            break;\n                    }\n                    this._paintMergedCells(cellGroups, paintRgn, backgroundColor);\n                }\n            }\n        }\n        // Paint the overlay.\n        this._paintOverlay();\n    }\n    /**\n     * Blit content into the on-screen grid canvas.\n     *\n     * The rect should be expressed in viewport coordinates.\n     *\n     * This automatically accounts for the dpi ratio.\n     */\n    _blitContent(source, x, y, w, h, dx, dy) {\n        // Scale the blit coordinates by the dpi ratio.\n        x *= this._dpiRatio;\n        y *= this._dpiRatio;\n        w *= this._dpiRatio;\n        h *= this._dpiRatio;\n        dx *= this._dpiRatio;\n        dy *= this._dpiRatio;\n        // Save the current gc state.\n        this._canvasGC.save();\n        // Set the transform to the identity matrix.\n        this._canvasGC.setTransform(1, 0, 0, 1, 0, 0);\n        // Draw the specified content.\n        this._canvasGC.drawImage(source, x, y, w, h, dx, dy, w, h);\n        // Restore the gc state.\n        this._canvasGC.restore();\n    }\n    /**\n     * Paint the grid content for the given dirty rect.\n     *\n     * The rect should be expressed in valid viewport coordinates.\n     *\n     * This is the primary paint entry point. The individual `_draw*`\n     * methods should not be invoked directly. This method dispatches\n     * to the drawing methods in the correct order.\n     */\n    paintContent(rx, ry, rw, rh) {\n        // Scale the canvas and buffer GC for the dpi ratio.\n        this._canvasGC.setTransform(this._dpiRatio, 0, 0, this._dpiRatio, 0, 0);\n        this._bufferGC.setTransform(this._dpiRatio, 0, 0, this._dpiRatio, 0, 0);\n        // Clear the dirty rect of all content.\n        this._canvasGC.clearRect(rx, ry, rw, rh);\n        // Draw the void region.\n        this._drawVoidRegion(rx, ry, rw, rh);\n        // Draw the body region.\n        this._drawBodyRegion(rx, ry, rw, rh);\n        // Draw the row header region.\n        this._drawRowHeaderRegion(rx, ry, rw, rh);\n        // Draw the column header region.\n        this._drawColumnHeaderRegion(rx, ry, rw, rh);\n        // Draw the corner header region.\n        this.drawCornerHeaderRegion(rx, ry, rw, rh);\n    }\n    /**\n     * Resizes body column headers so their text fits\n     * without clipping or wrapping.\n     * @param dataModel\n     */\n    _fitBodyColumnHeaders(dataModel, padding, numCols) {\n        // Get the body column count\n        const bodyColumnCount = numCols === undefined ? dataModel.columnCount('body') : numCols;\n        for (let i = 0; i < bodyColumnCount; i++) {\n            /*\n              if we're working with nested column headers,\n              retrieve the nested levels and iterate on them.\n            */\n            const numRows = dataModel.rowCount('column-header');\n            /*\n              Calculate the maximum text width, across\n              all nested rows under a given column number.\n            */\n            let maxWidth = 0;\n            for (let j = 0; j < numRows; j++) {\n                const config = DataGrid._getConfig(dataModel, j, i, 'column-header');\n                const textWidth = this._getCellTextWidth(config);\n                // Update the maximum width for that column.\n                maxWidth = Math.max(maxWidth, textWidth);\n            }\n            /*\n              Send a resize message with new width for the given column.\n              Using a padding of 15 pixels to leave some room.\n            */\n            this.resizeColumn('body', i, maxWidth + padding);\n        }\n    }\n    /**\n     * Resizes row header columns so their text fits\n     * without clipping or wrapping.\n     * @param dataModel\n     */\n    _fitRowColumnHeaders(dataModel, padding, numCols) {\n        /*\n          if we're working with nested row headers,\n          retrieve the nested levels and iterate on them.\n        */\n        const rowColumnCount = numCols === undefined ? dataModel.columnCount('row-header') : numCols;\n        for (let i = 0; i < rowColumnCount; i++) {\n            const numCols = dataModel.rowCount('column-header');\n            /*\n              Calculate the maximum text width, across\n              all nested columns under a given row index.\n            */\n            let maxWidth = 0;\n            for (let j = 0; j < numCols; j++) {\n                const config = DataGrid._getConfig(dataModel, j, i, 'corner-header');\n                const textWidth = this._getCellTextWidth(config);\n                maxWidth = Math.max(maxWidth, textWidth);\n            }\n            /*\n              Send a resize message with new width for the given column.\n              Using a padding of 15 pixels to leave some room.\n            */\n            this.resizeColumn('row-header', i, maxWidth + padding);\n        }\n    }\n    /**\n     * Paint the overlay content for the entire grid.\n     *\n     * This is the primary overlay paint entry point. The individual\n     * `_draw*` methods should not be invoked directly. This method\n     * dispatches to the drawing methods in the correct order.\n     */\n    _paintOverlay() {\n        // Scale the overlay GC for the dpi ratio.\n        this._overlayGC.setTransform(this._dpiRatio, 0, 0, this._dpiRatio, 0, 0);\n        // Clear the overlay of all content.\n        this._overlayGC.clearRect(0, 0, this._overlay.width, this._overlay.height);\n        // Draw the body selections.\n        this._drawBodySelections();\n        // Draw the row header selections.\n        this._drawRowHeaderSelections();\n        // Draw the column header selections.\n        this._drawColumnHeaderSelections();\n        // Draw the cursor.\n        this._drawCursor();\n        // Draw the shadows.\n        this._drawShadows();\n    }\n    /**\n     * Draw the void region for the dirty rect.\n     */\n    _drawVoidRegion(rx, ry, rw, rh) {\n        // Look up the void color.\n        let color = this._style.voidColor;\n        // Bail if there is no void color.\n        if (!color) {\n            return;\n        }\n        // Fill the dirty rect with the void color.\n        this._canvasGC.fillStyle = color;\n        this._canvasGC.fillRect(rx, ry, rw, rh);\n    }\n    /**\n     * Draw the body region which intersects the dirty rect.\n     */\n    _drawBodyRegion(rx, ry, rw, rh) {\n        // Get the visible content dimensions.\n        let contentW = this._columnSections.length - this._scrollX;\n        let contentH = this._rowSections.length - this._scrollY;\n        // Bail if there is no content to draw.\n        if (contentW <= 0 || contentH <= 0) {\n            return;\n        }\n        // Get the visible content origin.\n        let contentX = this.headerWidth;\n        let contentY = this.headerHeight;\n        // Bail if the dirty rect does not intersect the content area.\n        if (rx + rw <= contentX) {\n            return;\n        }\n        if (ry + rh <= contentY) {\n            return;\n        }\n        if (rx >= contentX + contentW) {\n            return;\n        }\n        if (ry >= contentY + contentH) {\n            return;\n        }\n        // Fetch the geometry.\n        let bh = this.bodyHeight;\n        let bw = this.bodyWidth;\n        let ph = this.pageHeight;\n        let pw = this.pageWidth;\n        // Get the upper and lower bounds of the dirty content area.\n        let x1 = Math.max(rx, contentX);\n        let y1 = Math.max(ry, contentY);\n        let x2 = Math.min(rx + rw - 1, contentX + contentW - 1);\n        let y2 = Math.min(ry + rh - 1, contentY + contentH - 1);\n        // Convert the dirty content bounds into cell bounds.\n        let r1 = this._rowSections.indexOf(y1 - contentY + this._scrollY);\n        let c1 = this._columnSections.indexOf(x1 - contentX + this._scrollX);\n        let r2 = this._rowSections.indexOf(y2 - contentY + this._scrollY);\n        let c2 = this._columnSections.indexOf(x2 - contentX + this._scrollX);\n        // Fetch the max row and column.\n        let maxRow = this._rowSections.count - 1;\n        let maxColumn = this._columnSections.count - 1;\n        // Handle a dirty content area larger than the cell count.\n        if (r2 < 0) {\n            r2 = maxRow;\n        }\n        if (c2 < 0) {\n            c2 = maxColumn;\n        }\n        // Convert the cell bounds back to visible coordinates.\n        let x = this._columnSections.offsetOf(c1) + contentX - this._scrollX;\n        let y = this._rowSections.offsetOf(r1) + contentY - this._scrollY;\n        // Set up the paint region size variables.\n        let width = 0;\n        let height = 0;\n        // Allocate the section sizes arrays.\n        let rowSizes = new Array(r2 - r1 + 1);\n        let columnSizes = new Array(c2 - c1 + 1);\n        // Get the row sizes for the region.\n        for (let j = r1; j <= r2; ++j) {\n            let size = this._rowSections.sizeOf(j);\n            rowSizes[j - r1] = size;\n            height += size;\n        }\n        // Get the column sizes for the region.\n        for (let i = c1; i <= c2; ++i) {\n            let size = this._columnSections.sizeOf(i);\n            columnSizes[i - c1] = size;\n            width += size;\n        }\n        // Adjust the geometry if the last row is streched.\n        if (this._stretchLastRow && ph > bh && r2 === maxRow) {\n            let dh = this.pageHeight - this.bodyHeight;\n            rowSizes[rowSizes.length - 1] += dh;\n            height += dh;\n            y2 += dh;\n        }\n        // Adjust the geometry if the last column is streched.\n        if (this._stretchLastColumn && pw > bw && c2 === maxColumn) {\n            let dw = this.pageWidth - this.bodyWidth;\n            columnSizes[columnSizes.length - 1] += dw;\n            width += dw;\n            x2 += dw;\n        }\n        // Create the paint region object.\n        let rgn = {\n            region: 'body',\n            xMin: x1,\n            yMin: y1,\n            xMax: x2,\n            yMax: y2,\n            x,\n            y,\n            width,\n            height,\n            row: r1,\n            column: c1,\n            rowSizes,\n            columnSizes\n        };\n        // Draw the background.\n        this._drawBackground(rgn, this._style.backgroundColor);\n        // Draw the row background.\n        this._drawRowBackground(rgn, this._style.rowBackgroundColor);\n        // Draw the column background.\n        this._drawColumnBackground(rgn, this._style.columnBackgroundColor);\n        // Draw the cell content for the paint region.\n        this._drawCells(rgn);\n        // Draw the horizontal grid lines.\n        this._drawHorizontalGridLines(rgn, this._style.horizontalGridLineColor || this._style.gridLineColor);\n        // Draw the vertical grid lines.\n        this._drawVerticalGridLines(rgn, this._style.verticalGridLineColor || this._style.gridLineColor);\n        // Get the cellgroups from the cell-region that intersects with the paint region\n        const cellGroups = CellGroup.getCellGroupsAtRegion(this.dataModel, rgn.region).filter(group => {\n            return this.cellGroupInteresectsRegion(group, rgn);\n        });\n        // Draw merged cells\n        this._paintMergedCells(cellGroups, rgn, this._style.backgroundColor);\n    }\n    /**\n     * Draw the row header region which intersects the dirty rect.\n     */\n    _drawRowHeaderRegion(rx, ry, rw, rh) {\n        // Get the visible content dimensions.\n        let contentW = this.headerWidth;\n        let contentH = this.bodyHeight - this._scrollY;\n        // Bail if there is no content to draw.\n        if (contentW <= 0 || contentH <= 0) {\n            return;\n        }\n        // Get the visible content origin.\n        let contentX = 0;\n        let contentY = this.headerHeight;\n        // Bail if the dirty rect does not intersect the content area.\n        if (rx + rw <= contentX) {\n            return;\n        }\n        if (ry + rh <= contentY) {\n            return;\n        }\n        if (rx >= contentX + contentW) {\n            return;\n        }\n        if (ry >= contentY + contentH) {\n            return;\n        }\n        // Fetch the geometry.\n        let bh = this.bodyHeight;\n        let ph = this.pageHeight;\n        // Get the upper and lower bounds of the dirty content area.\n        let x1 = rx;\n        let y1 = Math.max(ry, contentY);\n        let x2 = Math.min(rx + rw - 1, contentX + contentW - 1);\n        let y2 = Math.min(ry + rh - 1, contentY + contentH - 1);\n        // Convert the dirty content bounds into cell bounds.\n        let r1 = this._rowSections.indexOf(y1 - contentY + this._scrollY);\n        let c1 = this._rowHeaderSections.indexOf(x1);\n        let r2 = this._rowSections.indexOf(y2 - contentY + this._scrollY);\n        let c2 = this._rowHeaderSections.indexOf(x2);\n        // Fetch max row and column.\n        let maxRow = this._rowSections.count - 1;\n        let maxColumn = this._rowHeaderSections.count - 1;\n        // Handle a dirty content area larger than the cell count.\n        if (r2 < 0) {\n            r2 = maxRow;\n        }\n        if (c2 < 0) {\n            c2 = maxColumn;\n        }\n        // Convert the cell bounds back to visible coordinates.\n        let x = this._rowHeaderSections.offsetOf(c1);\n        let y = this._rowSections.offsetOf(r1) + contentY - this._scrollY;\n        // Set up the paint region size variables.\n        let width = 0;\n        let height = 0;\n        // Allocate the section sizes arrays.\n        let rowSizes = new Array(r2 - r1 + 1);\n        let columnSizes = new Array(c2 - c1 + 1);\n        // Get the row sizes for the region.\n        for (let j = r1; j <= r2; ++j) {\n            let size = this._rowSections.sizeOf(j);\n            rowSizes[j - r1] = size;\n            height += size;\n        }\n        // Get the column sizes for the region.\n        for (let i = c1; i <= c2; ++i) {\n            let size = this._rowHeaderSections.sizeOf(i);\n            columnSizes[i - c1] = size;\n            width += size;\n        }\n        // Adjust the geometry if the last row is stretched.\n        if (this._stretchLastRow && ph > bh && r2 === maxRow) {\n            let dh = this.pageHeight - this.bodyHeight;\n            rowSizes[rowSizes.length - 1] += dh;\n            height += dh;\n            y2 += dh;\n        }\n        // Create the paint region object.\n        let rgn = {\n            region: 'row-header',\n            xMin: x1,\n            yMin: y1,\n            xMax: x2,\n            yMax: y2,\n            x,\n            y,\n            width,\n            height,\n            row: r1,\n            column: c1,\n            rowSizes,\n            columnSizes\n        };\n        // Draw the background.\n        this._drawBackground(rgn, this._style.headerBackgroundColor);\n        // Draw the cell content for the paint region.\n        this._drawCells(rgn);\n        // Draw the horizontal grid lines.\n        this._drawHorizontalGridLines(rgn, this._style.headerHorizontalGridLineColor ||\n            this._style.headerGridLineColor);\n        // Draw the vertical grid lines.\n        this._drawVerticalGridLines(rgn, this._style.headerVerticalGridLineColor || this._style.headerGridLineColor);\n        // Get the cellgroups from the cell-region that intersects with the paint region\n        const cellGroups = CellGroup.getCellGroupsAtRegion(this.dataModel, rgn.region).filter(group => {\n            return this.cellGroupInteresectsRegion(group, rgn);\n        });\n        // Draw merged cells\n        this._paintMergedCells(cellGroups, rgn, this._style.headerBackgroundColor);\n    }\n    /**\n     * Draw the column header region which intersects the dirty rect.\n     */\n    _drawColumnHeaderRegion(rx, ry, rw, rh) {\n        // Get the visible content dimensions.\n        let contentW = this.bodyWidth - this._scrollX;\n        let contentH = this.headerHeight;\n        // Bail if there is no content to draw.\n        if (contentW <= 0 || contentH <= 0) {\n            return;\n        }\n        // Get the visible content origin.\n        let contentX = this.headerWidth;\n        let contentY = 0;\n        // Bail if the dirty rect does not intersect the content area.\n        if (rx + rw <= contentX) {\n            return;\n        }\n        if (ry + rh <= contentY) {\n            return;\n        }\n        if (rx >= contentX + contentW) {\n            return;\n        }\n        if (ry >= contentY + contentH) {\n            return;\n        }\n        // Fetch the geometry.\n        let bw = this.bodyWidth;\n        let pw = this.pageWidth;\n        // Get the upper and lower bounds of the dirty content area.\n        let x1 = Math.max(rx, contentX);\n        let y1 = ry;\n        let x2 = Math.min(rx + rw - 1, contentX + contentW - 1);\n        let y2 = Math.min(ry + rh - 1, contentY + contentH - 1);\n        // Convert the dirty content bounds into cell bounds.\n        let r1 = this._columnHeaderSections.indexOf(y1);\n        let c1 = this._columnSections.indexOf(x1 - contentX + this._scrollX);\n        let r2 = this._columnHeaderSections.indexOf(y2);\n        let c2 = this._columnSections.indexOf(x2 - contentX + this._scrollX);\n        // Fetch the max row and column.\n        let maxRow = this._columnHeaderSections.count - 1;\n        let maxColumn = this._columnSections.count - 1;\n        // Handle a dirty content area larger than the cell count.\n        if (r2 < 0) {\n            r2 = maxRow;\n        }\n        if (c2 < 0) {\n            c2 = maxColumn;\n        }\n        // Convert the cell bounds back to visible coordinates.\n        let x = this._columnSections.offsetOf(c1) + contentX - this._scrollX;\n        let y = this._columnHeaderSections.offsetOf(r1);\n        // Set up the paint region size variables.\n        let width = 0;\n        let height = 0;\n        // Allocate the section sizes arrays.\n        let rowSizes = new Array(r2 - r1 + 1);\n        let columnSizes = new Array(c2 - c1 + 1);\n        // Get the row sizes for the region.\n        for (let j = r1; j <= r2; ++j) {\n            let size = this._columnHeaderSections.sizeOf(j);\n            rowSizes[j - r1] = size;\n            height += size;\n        }\n        // Get the column sizes for the region.\n        for (let i = c1; i <= c2; ++i) {\n            let size = this._columnSections.sizeOf(i);\n            columnSizes[i - c1] = size;\n            width += size;\n        }\n        // Adjust the geometry if the last column is stretched.\n        if (this._stretchLastColumn && pw > bw && c2 === maxColumn) {\n            let dw = this.pageWidth - this.bodyWidth;\n            columnSizes[columnSizes.length - 1] += dw;\n            width += dw;\n            x2 += dw;\n        }\n        // Create the paint region object.\n        let rgn = {\n            region: 'column-header',\n            xMin: x1,\n            yMin: y1,\n            xMax: x2,\n            yMax: y2,\n            x,\n            y,\n            width,\n            height,\n            row: r1,\n            column: c1,\n            rowSizes,\n            columnSizes\n        };\n        // Draw the background.\n        this._drawBackground(rgn, this._style.headerBackgroundColor);\n        // Draw the cell content for the paint region.\n        this._drawCells(rgn);\n        // Draw the horizontal grid lines.\n        this._drawHorizontalGridLines(rgn, this._style.headerHorizontalGridLineColor ||\n            this._style.headerGridLineColor);\n        // Draw the vertical grid lines.\n        this._drawVerticalGridLines(rgn, this._style.headerVerticalGridLineColor || this._style.headerGridLineColor);\n        // Get the cellgroups from the cell-region that intersects with the paint region\n        const cellGroups = CellGroup.getCellGroupsAtRegion(this.dataModel, rgn.region).filter(group => {\n            return this.cellGroupInteresectsRegion(group, rgn);\n        });\n        // Draw merged cells\n        this._paintMergedCells(cellGroups, rgn, this._style.headerBackgroundColor);\n    }\n    /**\n     * Draw the corner header region which intersects the dirty rect.\n     */\n    drawCornerHeaderRegion(rx, ry, rw, rh) {\n        // Get the visible content dimensions.\n        let contentW = this.headerWidth;\n        let contentH = this.headerHeight;\n        // Bail if there is no content to draw.\n        if (contentW <= 0 || contentH <= 0) {\n            return;\n        }\n        // Get the visible content origin.\n        let contentX = 0;\n        let contentY = 0;\n        // Bail if the dirty rect does not intersect the content area.\n        if (rx + rw <= contentX) {\n            return;\n        }\n        if (ry + rh <= contentY) {\n            return;\n        }\n        if (rx >= contentX + contentW) {\n            return;\n        }\n        if (ry >= contentY + contentH) {\n            return;\n        }\n        // Get the upper and lower bounds of the dirty content area.\n        let x1 = rx;\n        let y1 = ry;\n        let x2 = Math.min(rx + rw - 1, contentX + contentW - 1);\n        let y2 = Math.min(ry + rh - 1, contentY + contentH - 1);\n        // Convert the dirty content bounds into cell bounds.\n        let r1 = this._columnHeaderSections.indexOf(y1);\n        let c1 = this._rowHeaderSections.indexOf(x1);\n        let r2 = this._columnHeaderSections.indexOf(y2);\n        let c2 = this._rowHeaderSections.indexOf(x2);\n        // Handle a dirty content area larger than the cell count.\n        if (r2 < 0) {\n            r2 = this._columnHeaderSections.count - 1;\n        }\n        if (c2 < 0) {\n            c2 = this._rowHeaderSections.count - 1;\n        }\n        // Convert the cell bounds back to visible coordinates.\n        let x = this._rowHeaderSections.offsetOf(c1);\n        let y = this._columnHeaderSections.offsetOf(r1);\n        // Set up the paint region size variables.\n        let width = 0;\n        let height = 0;\n        // Allocate the section sizes arrays.\n        let rowSizes = new Array(r2 - r1 + 1);\n        let columnSizes = new Array(c2 - c1 + 1);\n        // Get the row sizes for the region.\n        for (let j = r1; j <= r2; ++j) {\n            let size = this._columnHeaderSections.sizeOf(j);\n            rowSizes[j - r1] = size;\n            height += size;\n        }\n        // Get the column sizes for the region.\n        for (let i = c1; i <= c2; ++i) {\n            let size = this._rowHeaderSections.sizeOf(i);\n            columnSizes[i - c1] = size;\n            width += size;\n        }\n        // Create the paint region object.\n        let rgn = {\n            region: 'corner-header',\n            xMin: x1,\n            yMin: y1,\n            xMax: x2,\n            yMax: y2,\n            x,\n            y,\n            width,\n            height,\n            row: r1,\n            column: c1,\n            rowSizes,\n            columnSizes\n        };\n        // Draw the background.\n        this._drawBackground(rgn, this._style.headerBackgroundColor);\n        // Draw the cell content for the paint region.\n        this._drawCells(rgn);\n        // Draw the horizontal grid lines.\n        this._drawHorizontalGridLines(rgn, this._style.headerHorizontalGridLineColor ||\n            this._style.headerGridLineColor);\n        // Draw the vertical grid lines.\n        this._drawVerticalGridLines(rgn, this._style.headerVerticalGridLineColor || this._style.headerGridLineColor);\n        // Get the cellgroups from the cell-region that intersects with the paint region\n        const cellGroups = CellGroup.getCellGroupsAtRegion(this.dataModel, rgn.region).filter(group => {\n            return this.cellGroupInteresectsRegion(group, rgn);\n        });\n        // Draw merged cells\n        this._paintMergedCells(cellGroups, rgn, this._style.headerBackgroundColor);\n    }\n    /**\n     * Draw the background for the given paint region.\n     */\n    _drawBackground(rgn, color) {\n        // Bail if there is no color to draw.\n        if (!color) {\n            return;\n        }\n        // Unpack the region.\n        let { xMin, yMin, xMax, yMax } = rgn;\n        // Fill the region with the specified color.\n        this._canvasGC.fillStyle = color;\n        this._canvasGC.fillRect(xMin, yMin, xMax - xMin + 1, yMax - yMin + 1);\n    }\n    /**\n     * Draw the row background for the given paint region.\n     */\n    _drawRowBackground(rgn, colorFn) {\n        // Bail if there is no color function.\n        if (!colorFn) {\n            return;\n        }\n        // Compute the X bounds for the row.\n        let x1 = Math.max(rgn.xMin, rgn.x);\n        let x2 = Math.min(rgn.x + rgn.width - 1, rgn.xMax);\n        // Draw the background for the rows in the region.\n        for (let y = rgn.y, j = 0, n = rgn.rowSizes.length; j < n; ++j) {\n            // Fetch the size of the row.\n            let size = rgn.rowSizes[j];\n            // Skip zero sized rows.\n            if (size === 0) {\n                continue;\n            }\n            // Get the background color for the row.\n            let color = colorFn(rgn.row + j);\n            // Fill the row with the background color if needed.\n            if (color) {\n                let y1 = Math.max(rgn.yMin, y);\n                let y2 = Math.min(y + size - 1, rgn.yMax);\n                this._canvasGC.fillStyle = color;\n                this._canvasGC.fillRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n            }\n            // Increment the running Y coordinate.\n            y += size;\n        }\n    }\n    /**\n     * Draw the column background for the given paint region.\n     */\n    _drawColumnBackground(rgn, colorFn) {\n        // Bail if there is no color function.\n        if (!colorFn) {\n            return;\n        }\n        // Compute the Y bounds for the column.\n        let y1 = Math.max(rgn.yMin, rgn.y);\n        let y2 = Math.min(rgn.y + rgn.height - 1, rgn.yMax);\n        // Draw the background for the columns in the region.\n        for (let x = rgn.x, i = 0, n = rgn.columnSizes.length; i < n; ++i) {\n            // Fetch the size of the column.\n            let size = rgn.columnSizes[i];\n            // Skip zero sized columns.\n            if (size === 0) {\n                continue;\n            }\n            // Get the background color for the column.\n            let color = colorFn(rgn.column + i);\n            // Fill the column with the background color if needed.\n            if (color) {\n                let x1 = Math.max(rgn.xMin, x);\n                let x2 = Math.min(x + size - 1, rgn.xMax);\n                this._canvasGC.fillStyle = color;\n                this._canvasGC.fillRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n            }\n            // Increment the running X coordinate.\n            x += size;\n        }\n    }\n    /**\n     * Returns column size\n     * @param region\n     * @param index\n     */\n    _getColumnSize(region, index) {\n        if (region === 'corner-header') {\n            return this._rowHeaderSections.sizeOf(index);\n        }\n        return this.columnSize(region, index);\n    }\n    /**\n     * Returns row size\n     * @param region\n     * @param index\n     */\n    _getRowSize(region, index) {\n        if (region === 'corner-header') {\n            return this._columnHeaderSections.sizeOf(index);\n        }\n        return this.rowSize(region, index);\n    }\n    /**\n     * Draw the cells for the given paint region.\n     */\n    _drawCells(rgn) {\n        // Bail if there is no data model.\n        if (!this._dataModel) {\n            return;\n        }\n        // Set up the cell config object for rendering.\n        let config = {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0,\n            region: rgn.region,\n            row: 0,\n            column: 0,\n            value: null,\n            metadata: DataModel.emptyMetadata\n        };\n        let groupIndex = -1;\n        // Save the buffer gc before wrapping.\n        this._bufferGC.save();\n        // Wrap the buffer gc for painting the cells.\n        let gc = new GraphicsContext(this._bufferGC);\n        let height = 0;\n        // Loop over the columns in the region.\n        for (let x = rgn.x, i = 0, n = rgn.columnSizes.length; i < n; ++i) {\n            // Fetch the size of the column.\n            let width = rgn.columnSizes[i];\n            // Skip zero sized columns.\n            if (width === 0) {\n                continue;\n            }\n            // Compute the column index.\n            let column = rgn.column + i;\n            // Update the config for the current column.\n            config.x = x;\n            config.width = width;\n            config.column = column;\n            // Loop over the rows in the column.\n            for (let y = rgn.y, j = 0, n = rgn.rowSizes.length; j < n; ++j) {\n                // Fetch the size of the row.\n                height = rgn.rowSizes[j];\n                // Skip zero sized rows.\n                if (height === 0) {\n                    continue;\n                }\n                // Compute the row index.\n                let row = rgn.row + j;\n                groupIndex = CellGroup.getGroupIndex(this.dataModel, config.region, row, column);\n                // For merged cell regions, don't do anything, we draw merged regions later.\n                if (groupIndex !== -1) {\n                    y += height;\n                    continue;\n                }\n                // Clear the buffer rect for the cell.\n                gc.clearRect(x, y, width, height);\n                let value = DataGrid._getCellValue(this.dataModel, rgn.region, row, column);\n                let metadata = DataGrid._getCellMetadata(this.dataModel, rgn.region, row, column);\n                // Update the config for the current cell.\n                config.y = y;\n                config.height = height;\n                config.width = width;\n                config.row = row;\n                config.value = value;\n                config.metadata = metadata;\n                // Get the renderer for the cell.\n                let renderer = this._cellRenderers.get(config);\n                // Save the GC state.\n                gc.save();\n                // Paint the cell into the off-screen buffer.\n                try {\n                    renderer.paint(gc, config);\n                }\n                catch (err) {\n                    console.error(err);\n                }\n                // Restore the GC state.\n                gc.restore();\n                // Compute the actual X bounds for the cell.\n                let x1 = Math.max(rgn.xMin, config.x);\n                let x2 = Math.min(config.x + config.width - 1, rgn.xMax);\n                // Compute the actual Y bounds for the cell.\n                let y1 = Math.max(rgn.yMin, config.y);\n                let y2 = Math.min(config.y + config.height - 1, rgn.yMax);\n                this._blitContent(this._buffer, x1, y1, x2 - x1 + 1, y2 - y1 + 1, x1, y1);\n                // Increment the running Y coordinate.\n                y += height;\n            }\n            // Restore the GC state.\n            gc.restore();\n            // Increment the running X coordinate.\n            x += width;\n        }\n        // Dispose of the wrapped gc.\n        gc.dispose();\n        // Restore the final buffer gc state.\n        this._bufferGC.restore();\n    }\n    // TODO Move this in the utils file (but we need the PaintRegion typing)\n    cellGroupInteresectsRegion(group, rgn) {\n        const rgnR1 = rgn.row;\n        const rgnR2 = rgn.row + rgn.rowSizes.length;\n        const rgnC1 = rgn.column;\n        const rgnC2 = rgn.column + rgn.columnSizes.length;\n        const dx = Math.min(group.r2, rgnR2) - Math.max(group.r1, rgnR1);\n        const dy = Math.min(group.c2, rgnC2) - Math.max(group.c1, rgnC1);\n        return dx >= 0 && dy >= 0;\n    }\n    static _getCellValue(dm, region, row, col) {\n        // Get the value for the cell.\n        try {\n            return dm.data(region, row, col);\n        }\n        catch (err) {\n            console.error(err);\n            return null;\n        }\n    }\n    static _getCellMetadata(dm, region, row, col) {\n        // Get the metadata for the cell.\n        try {\n            return dm.metadata(region, row, col);\n        }\n        catch (err) {\n            console.error(err);\n            return DataModel.emptyMetadata;\n        }\n    }\n    /**\n     * Paint group cells.\n     */\n    _paintMergedCells(cellGroups, rgn, backgroundColor) {\n        // Bail if there is no data model.\n        if (!this._dataModel) {\n            return;\n        }\n        // Set up the cell config object for rendering.\n        let config = {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0,\n            region: rgn.region,\n            row: 0,\n            column: 0,\n            value: null,\n            metadata: DataModel.emptyMetadata\n        };\n        if (backgroundColor) {\n            this._canvasGC.fillStyle = backgroundColor;\n        }\n        // Set the line width for the grid lines.\n        this._canvasGC.lineWidth = 1;\n        // Save the buffer gc before wrapping.\n        this._bufferGC.save();\n        // Wrap the buffer gc for painting the cells.\n        let gc = new GraphicsContext(this._bufferGC);\n        for (const group of cellGroups) {\n            let width = 0;\n            for (let c = group.c1; c <= group.c2; c++) {\n                width += this._getColumnSize(rgn.region, c);\n            }\n            let height = 0;\n            for (let r = group.r1; r <= group.r2; r++) {\n                height += this._getRowSize(rgn.region, r);\n            }\n            let value = DataGrid._getCellValue(this.dataModel, rgn.region, group.r1, group.c1);\n            let metadata = DataGrid._getCellMetadata(this.dataModel, rgn.region, group.r1, group.c2);\n            let x = 0;\n            let y = 0;\n            switch (rgn.region) {\n                case 'body':\n                    x =\n                        this._columnSections.offsetOf(group.c1) +\n                            this.headerWidth -\n                            this._scrollX;\n                    y =\n                        this._rowSections.offsetOf(group.r1) +\n                            this.headerHeight -\n                            this._scrollY;\n                    break;\n                case 'column-header':\n                    x =\n                        this._columnSections.offsetOf(group.c1) +\n                            this.headerWidth -\n                            this._scrollX;\n                    y = this._rowSections.offsetOf(group.r1);\n                    break;\n                case 'row-header':\n                    x = this._columnSections.offsetOf(group.c1);\n                    y =\n                        this._rowSections.offsetOf(group.r1) +\n                            this.headerHeight -\n                            this._scrollY;\n                    break;\n                case 'corner-header':\n                    x = this._columnSections.offsetOf(group.c1);\n                    y = this._rowSections.offsetOf(group.r1);\n                    break;\n            }\n            config.x = x;\n            config.y = y;\n            config.width = width;\n            config.height = height;\n            config.region = rgn.region;\n            config.row = group.r1;\n            config.column = group.c1;\n            config.value = value;\n            config.metadata = metadata;\n            // Compute the actual X bounds for the cell.\n            const x1 = Math.max(rgn.xMin, x);\n            const x2 = Math.min(x + width - 2, rgn.xMax);\n            // Compute the actual Y bounds for the cell.\n            const y1 = Math.max(rgn.yMin, y);\n            const y2 = Math.min(y + height - 2, rgn.yMax);\n            if (x2 <= x1 || y2 <= y1) {\n                continue;\n            }\n            // Draw the background.\n            if (backgroundColor) {\n                this._canvasGC.fillRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n            }\n            // Get the renderer for the cell.\n            let renderer = this._cellRenderers.get(config);\n            // Clear the buffer rect for the cell.\n            gc.clearRect(config.x, config.y, width, height);\n            // Save the GC state.\n            gc.save();\n            // Paint the cell into the off-screen buffer.\n            try {\n                renderer.paint(gc, config);\n            }\n            catch (err) {\n                console.error(err);\n            }\n            // Restore the GC state.\n            gc.restore();\n            this._blitContent(this._buffer, x1, y1, x2 - x1 + 1, y2 - y1 + 1, x1, y1);\n        }\n        // Dispose of the wrapped gc.\n        gc.dispose();\n        // Restore the final buffer gc state.\n        this._bufferGC.restore();\n    }\n    /**\n     * Draw the horizontal grid lines for the given paint region.\n     */\n    _drawHorizontalGridLines(rgn, color) {\n        // Bail if there is no color to draw.\n        if (!color) {\n            return;\n        }\n        // Compute the X bounds for the horizontal lines.\n        const x1 = Math.max(rgn.xMin, rgn.x);\n        const x2 = Math.min(rgn.x + rgn.width, rgn.xMax + 1);\n        // Begin the path for the grid lines.\n        this._canvasGC.beginPath();\n        // Set the line width for the grid lines.\n        this._canvasGC.lineWidth = 1;\n        // Fetch the geometry.\n        const bh = this.bodyHeight;\n        const ph = this.pageHeight;\n        // Fetch the number of grid lines to be drawn.\n        let n = rgn.rowSizes.length;\n        // Adjust the count down if the last line shouldn't be drawn.\n        if (this._stretchLastRow && ph > bh) {\n            if (rgn.row + n === this._rowSections.count) {\n                n -= 1;\n            }\n        }\n        // Draw the horizontal grid lines.\n        for (let y = rgn.y, j = 0; j < n; ++j) {\n            // Fetch the size of the row.\n            let size = rgn.rowSizes[j];\n            // Skip zero sized rows.\n            if (size === 0) {\n                continue;\n            }\n            // Compute the Y position of the line.\n            let pos = y + size - 1;\n            // Draw the line if it's in range of the dirty rect.\n            if (pos >= rgn.yMin && pos <= rgn.yMax) {\n                this._canvasGC.moveTo(x1, pos + 0.5);\n                this._canvasGC.lineTo(x2, pos + 0.5);\n            }\n            // Increment the running Y coordinate.\n            y += size;\n        }\n        // Stroke the lines with the specified color.\n        this._canvasGC.strokeStyle = color;\n        this._canvasGC.stroke();\n    }\n    /**\n     * Draw the vertical grid lines for the given paint region.\n     */\n    _drawVerticalGridLines(rgn, color) {\n        // Bail if there is no color to draw.\n        if (!color) {\n            return;\n        }\n        // Compute the Y bounds for the vertical lines.\n        const y1 = Math.max(rgn.yMin, rgn.y);\n        const y2 = Math.min(rgn.y + rgn.height, rgn.yMax + 1);\n        // Begin the path for the grid lines\n        this._canvasGC.beginPath();\n        // Set the line width for the grid lines.\n        this._canvasGC.lineWidth = 1;\n        // Fetch the geometry.\n        const bw = this.bodyWidth;\n        const pw = this.pageWidth;\n        // Fetch the number of grid lines to be drawn.\n        let n = rgn.columnSizes.length;\n        // Adjust the count down if the last line shouldn't be drawn.\n        if (this._stretchLastColumn && pw > bw) {\n            if (rgn.column + n === this._columnSections.count) {\n                n -= 1;\n            }\n        }\n        // Draw the vertical grid lines.\n        for (let x = rgn.x, i = 0; i < n; ++i) {\n            // Fetch the size of the column.\n            let size = rgn.columnSizes[i];\n            // Skip zero sized columns.\n            if (size === 0) {\n                continue;\n            }\n            // Compute the X position of the line.\n            let pos = x + size - 1;\n            // Draw the line if it's in range of the dirty rect.\n            if (pos >= rgn.xMin && pos <= rgn.xMax) {\n                this._canvasGC.moveTo(pos + 0.5, y1);\n                this._canvasGC.lineTo(pos + 0.5, y2);\n            }\n            // Increment the running X coordinate.\n            x += size;\n        }\n        // Stroke the lines with the specified color.\n        this._canvasGC.strokeStyle = color;\n        this._canvasGC.stroke();\n    }\n    /**\n     * Draw the body selections for the data grid.\n     */\n    _drawBodySelections() {\n        // Fetch the selection model.\n        let model = this._selectionModel;\n        // Bail early if there are no selections.\n        if (!model || model.isEmpty) {\n            return;\n        }\n        // Fetch the selection colors.\n        let fill = this._style.selectionFillColor;\n        let stroke = this._style.selectionBorderColor;\n        // Bail early if there is nothing to draw.\n        if (!fill && !stroke) {\n            return;\n        }\n        // Fetch the scroll geometry.\n        let sx = this._scrollX;\n        let sy = this._scrollY;\n        // Get the first visible cell of the grid.\n        let r1 = this._rowSections.indexOf(sy);\n        let c1 = this._columnSections.indexOf(sx);\n        // Bail early if there are no visible cells.\n        if (r1 < 0 || c1 < 0) {\n            return;\n        }\n        // Fetch the extra geometry.\n        let bw = this.bodyWidth;\n        let bh = this.bodyHeight;\n        let pw = this.pageWidth;\n        let ph = this.pageHeight;\n        let hw = this.headerWidth;\n        let hh = this.headerHeight;\n        // Get the last visible cell of the grid.\n        let r2 = this._rowSections.indexOf(sy + ph);\n        let c2 = this._columnSections.indexOf(sx + pw);\n        // Fetch the max row and column.\n        let maxRow = this._rowSections.count - 1;\n        let maxColumn = this._columnSections.count - 1;\n        // Clamp the last cell if the void space is visible.\n        r2 = r2 < 0 ? maxRow : r2;\n        c2 = c2 < 0 ? maxColumn : c2;\n        // Fetch the overlay gc.\n        let gc = this._overlayGC;\n        // Save the gc state.\n        gc.save();\n        // Set up the body clipping rect.\n        gc.beginPath();\n        gc.rect(hw, hh, pw, ph);\n        gc.clip();\n        // Set up the gc style.\n        if (fill) {\n            gc.fillStyle = fill;\n        }\n        if (stroke) {\n            gc.strokeStyle = stroke;\n            gc.lineWidth = 1;\n        }\n        // Iterate over the selections.\n        for (let s of model.selections()) {\n            // Skip the section if it's not visible.\n            if (s.r1 < r1 && s.r2 < r1) {\n                continue;\n            }\n            if (s.r1 > r2 && s.r2 > r2) {\n                continue;\n            }\n            if (s.c1 < c1 && s.c2 < c1) {\n                continue;\n            }\n            if (s.c1 > c2 && s.c2 > c2) {\n                continue;\n            }\n            // Clamp the cell to the model bounds.\n            let sr1 = Math.max(0, Math.min(s.r1, maxRow));\n            let sc1 = Math.max(0, Math.min(s.c1, maxColumn));\n            let sr2 = Math.max(0, Math.min(s.r2, maxRow));\n            let sc2 = Math.max(0, Math.min(s.c2, maxColumn));\n            // Swap index order if needed.\n            let tmp;\n            if (sr1 > sr2) {\n                tmp = sr1;\n                sr1 = sr2;\n                sr2 = tmp;\n            }\n            if (sc1 > sc2) {\n                tmp = sc1;\n                sc1 = sc2;\n                sc2 = tmp;\n            }\n            const joinedGroup = CellGroup.joinCellGroupWithMergedCellGroups(this.dataModel, { r1: sr1, r2: sr2, c1: sc1, c2: sc2 }, 'body');\n            sr1 = joinedGroup.r1;\n            sr2 = joinedGroup.r2;\n            sc1 = joinedGroup.c1;\n            sc2 = joinedGroup.c2;\n            // Convert to pixel coordinates.\n            let x1 = this._columnSections.offsetOf(sc1) - sx + hw;\n            let y1 = this._rowSections.offsetOf(sr1) - sy + hh;\n            let x2 = this._columnSections.extentOf(sc2) - sx + hw;\n            let y2 = this._rowSections.extentOf(sr2) - sy + hh;\n            // Adjust the trailing X coordinate for column stretch.\n            if (this._stretchLastColumn && pw > bw && sc2 === maxColumn) {\n                x2 = hw + pw - 1;\n            }\n            // Adjust the trailing Y coordinate for row stretch.\n            if (this._stretchLastRow && ph > bh && sr2 === maxRow) {\n                y2 = hh + ph - 1;\n            }\n            // Clamp the bounds to just outside of the clipping rect.\n            x1 = Math.max(hw - 1, x1);\n            y1 = Math.max(hh - 1, y1);\n            x2 = Math.min(hw + pw + 1, x2);\n            y2 = Math.min(hh + ph + 1, y2);\n            // Skip zero sized ranges.\n            if (x2 < x1 || y2 < y1) {\n                continue;\n            }\n            // Fill the rect if needed.\n            if (fill) {\n                gc.fillRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n            }\n            // Stroke the rect if needed.\n            if (stroke) {\n                gc.strokeRect(x1 - 0.5, y1 - 0.5, x2 - x1 + 1, y2 - y1 + 1);\n            }\n        }\n        // Restore the gc state.\n        gc.restore();\n    }\n    /**\n     * Draw the row header selections for the data grid.\n     */\n    _drawRowHeaderSelections() {\n        // Fetch the selection model.\n        let model = this._selectionModel;\n        // Bail early if there are no selections or if the selectionMode is the entire column.\n        if (!model || model.isEmpty || model.selectionMode == 'column') {\n            return;\n        }\n        // Bail early if the row headers are not visible.\n        if (this.headerWidth === 0 || this.pageHeight === 0) {\n            return;\n        }\n        // Fetch the selection colors.\n        let fill = this._style.headerSelectionFillColor;\n        let stroke = this._style.headerSelectionBorderColor;\n        // Bail early if there is nothing to draw.\n        if (!fill && !stroke) {\n            return;\n        }\n        // Fetch common geometry.\n        let sy = this._scrollY;\n        let bh = this.bodyHeight;\n        let ph = this.pageHeight;\n        let hw = this.headerWidth;\n        let hh = this.headerHeight;\n        let rs = this._rowSections;\n        // Fetch the overlay gc.\n        let gc = this._overlayGC;\n        // Save the gc state.\n        gc.save();\n        // Set up the header clipping rect.\n        gc.beginPath();\n        gc.rect(0, hh, hw, ph);\n        gc.clip();\n        // Set up the gc style.\n        if (fill) {\n            gc.fillStyle = fill;\n        }\n        if (stroke) {\n            gc.strokeStyle = stroke;\n            gc.lineWidth = 1;\n        }\n        // Fetch the max row.\n        let maxRow = rs.count - 1;\n        // Fetch the visible rows.\n        let r1 = rs.indexOf(sy);\n        let r2 = rs.indexOf(sy + ph - 1);\n        r2 = r2 < 0 ? maxRow : r2;\n        // Iterate over the visible rows.\n        for (let j = r1; j <= r2; ++j) {\n            // Skip rows which aren't selected.\n            if (!model.isRowSelected(j)) {\n                continue;\n            }\n            // Get the dimensions of the row.\n            let y = rs.offsetOf(j) - sy + hh;\n            let h = rs.sizeOf(j);\n            // Adjust the height for row stretch.\n            if (this._stretchLastRow && ph > bh && j === maxRow) {\n                h = hh + ph - y;\n            }\n            // Skip zero sized rows.\n            if (h === 0) {\n                continue;\n            }\n            // Fill the rect if needed.\n            if (fill) {\n                gc.fillRect(0, y, hw, h);\n            }\n            // Draw the border if needed.\n            if (stroke) {\n                gc.beginPath();\n                gc.moveTo(hw - 0.5, y - 1);\n                gc.lineTo(hw - 0.5, y + h);\n                gc.stroke();\n            }\n        }\n        // Restore the gc state.\n        gc.restore();\n    }\n    /**\n     * Draw the column header selections for the data grid.\n     */\n    _drawColumnHeaderSelections() {\n        // Fetch the selection model.\n        let model = this._selectionModel;\n        // Bail early if there are no selections or if the selectionMode is the entire row\n        if (!model || model.isEmpty || model.selectionMode == 'row') {\n            return;\n        }\n        // Bail early if the column headers are not visible.\n        if (this.headerHeight === 0 || this.pageWidth === 0) {\n            return;\n        }\n        // Fetch the selection colors.\n        let fill = this._style.headerSelectionFillColor;\n        let stroke = this._style.headerSelectionBorderColor;\n        // Bail early if there is nothing to draw.\n        if (!fill && !stroke) {\n            return;\n        }\n        // Fetch common geometry.\n        let sx = this._scrollX;\n        let bw = this.bodyWidth;\n        let pw = this.pageWidth;\n        let hw = this.headerWidth;\n        let hh = this.headerHeight;\n        let cs = this._columnSections;\n        // Fetch the overlay gc.\n        let gc = this._overlayGC;\n        // Save the gc state.\n        gc.save();\n        // Set up the header clipping rect.\n        gc.beginPath();\n        gc.rect(hw, 0, pw, hh);\n        gc.clip();\n        // Set up the gc style.\n        if (fill) {\n            gc.fillStyle = fill;\n        }\n        if (stroke) {\n            gc.strokeStyle = stroke;\n            gc.lineWidth = 1;\n        }\n        // Fetch the max column.\n        let maxCol = cs.count - 1;\n        // Fetch the visible columns.\n        let c1 = cs.indexOf(sx);\n        let c2 = cs.indexOf(sx + pw - 1);\n        c2 = c2 < 0 ? maxCol : c2;\n        // Iterate over the visible columns.\n        for (let i = c1; i <= c2; ++i) {\n            // Skip columns which aren't selected.\n            if (!model.isColumnSelected(i)) {\n                continue;\n            }\n            // Get the dimensions of the column.\n            let x = cs.offsetOf(i) - sx + hw;\n            let w = cs.sizeOf(i);\n            // Adjust the width for column stretch.\n            if (this._stretchLastColumn && pw > bw && i === maxCol) {\n                w = hw + pw - x;\n            }\n            // Skip zero sized columns.\n            if (w === 0) {\n                continue;\n            }\n            // Fill the rect if needed.\n            if (fill) {\n                gc.fillRect(x, 0, w, hh);\n            }\n            // Draw the border if needed.\n            if (stroke) {\n                gc.beginPath();\n                gc.moveTo(x - 1, hh - 0.5);\n                gc.lineTo(x + w, hh - 0.5);\n                gc.stroke();\n            }\n        }\n        // Restore the gc state.\n        gc.restore();\n    }\n    /**\n     * Draw the overlay cursor for the data grid.\n     */\n    _drawCursor() {\n        // Fetch the selection model.\n        let model = this._selectionModel;\n        // Bail early if there is no cursor.\n        if (!model || model.isEmpty || model.selectionMode !== 'cell') {\n            return;\n        }\n        // Extract the style information.\n        let fill = this._style.cursorFillColor;\n        let stroke = this._style.cursorBorderColor;\n        // Bail early if there is nothing to draw.\n        if (!fill && !stroke) {\n            return;\n        }\n        // Fetch the cursor location.\n        let startRow = model.cursorRow;\n        let startColumn = model.cursorColumn;\n        // Fetch the max row and column.\n        let maxRow = this._rowSections.count - 1;\n        let maxColumn = this._columnSections.count - 1;\n        // Bail early if the cursor is out of bounds.\n        if (startRow < 0 || startRow > maxRow) {\n            return;\n        }\n        if (startColumn < 0 || startColumn > maxColumn) {\n            return;\n        }\n        let endRow = startRow;\n        let endColumn = startColumn;\n        const joinedGroup = CellGroup.joinCellGroupWithMergedCellGroups(this.dataModel, { r1: startRow, r2: endRow, c1: startColumn, c2: endColumn }, 'body');\n        startRow = joinedGroup.r1;\n        endRow = joinedGroup.r2;\n        startColumn = joinedGroup.c1;\n        endColumn = joinedGroup.c2;\n        // Fetch geometry.\n        let sx = this._scrollX;\n        let sy = this._scrollY;\n        let bw = this.bodyWidth;\n        let bh = this.bodyHeight;\n        let pw = this.pageWidth;\n        let ph = this.pageHeight;\n        let hw = this.headerWidth;\n        let hh = this.headerHeight;\n        let vw = this._viewportWidth;\n        let vh = this._viewportHeight;\n        // Get the cursor bounds in viewport coordinates.\n        let x1 = this._columnSections.offsetOf(startColumn) - sx + hw;\n        let x2 = this._columnSections.extentOf(endColumn) - sx + hw;\n        let y1 = this._rowSections.offsetOf(startRow) - sy + hh;\n        let y2 = this._rowSections.extentOf(endRow) - sy + hh;\n        // Adjust the trailing X coordinate for column stretch.\n        if (this._stretchLastColumn && pw > bw && startColumn === maxColumn) {\n            x2 = vw - 1;\n        }\n        // Adjust the trailing Y coordinate for row stretch.\n        if (this._stretchLastRow && ph > bh && startRow === maxRow) {\n            y2 = vh - 1;\n        }\n        // Skip zero sized cursors.\n        if (x2 < x1 || y2 < y1) {\n            return;\n        }\n        // Bail early if the cursor is off the screen.\n        if (x1 - 1 >= vw || y1 - 1 >= vh || x2 + 1 < hw || y2 + 1 < hh) {\n            return;\n        }\n        // Fetch the overlay gc.\n        let gc = this._overlayGC;\n        // Save the gc state.\n        gc.save();\n        // Set up the body clipping rect.\n        gc.beginPath();\n        gc.rect(hw, hh, pw, ph);\n        gc.clip();\n        // Clear any existing overlay content.\n        gc.clearRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n        // Fill the cursor rect if needed.\n        if (fill) {\n            // Set up the fill style.\n            gc.fillStyle = fill;\n            // Fill the cursor rect.\n            gc.fillRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n        }\n        // Stroke the cursor border if needed.\n        if (stroke) {\n            // Set up the stroke style.\n            gc.strokeStyle = stroke;\n            gc.lineWidth = 2;\n            // Stroke the cursor rect.\n            gc.strokeRect(x1, y1, x2 - x1, y2 - y1);\n        }\n        // Restore the gc state.\n        gc.restore();\n    }\n    /**\n     * Draw the overlay shadows for the data grid.\n     */\n    _drawShadows() {\n        // Fetch the scroll shadow from the style.\n        let shadow = this._style.scrollShadow;\n        // Bail early if there is no shadow to draw.\n        if (!shadow) {\n            return;\n        }\n        // Fetch the scroll position.\n        let sx = this._scrollX;\n        let sy = this._scrollY;\n        // Fetch maximum scroll position.\n        let sxMax = this.maxScrollX;\n        let syMax = this.maxScrollY;\n        // Fetch the header width and height.\n        let hw = this.headerWidth;\n        let hh = this.headerHeight;\n        // Fetch the page width and height.\n        let pw = this.pageWidth;\n        let ph = this.pageHeight;\n        // Fetch the viewport width and height.\n        let vw = this._viewportWidth;\n        let vh = this._viewportHeight;\n        // Fetch the body width and height.\n        let bw = this.bodyWidth;\n        let bh = this.bodyHeight;\n        // Adjust the body size for row and column stretch.\n        if (this._stretchLastRow && ph > bh) {\n            bh = ph;\n        }\n        if (this._stretchLastColumn && pw > bw) {\n            bw = pw;\n        }\n        // Fetch the gc object.\n        let gc = this._overlayGC;\n        // Save the gc state.\n        gc.save();\n        // Draw the column header shadow if needed.\n        if (sy > 0) {\n            // Set up the gradient coordinates.\n            let x0 = 0;\n            let y0 = hh;\n            let x1 = 0;\n            let y1 = y0 + shadow.size;\n            // Create the gradient object.\n            let grad = gc.createLinearGradient(x0, y0, x1, y1);\n            // Set the gradient stops.\n            grad.addColorStop(0, shadow.color1);\n            grad.addColorStop(0.5, shadow.color2);\n            grad.addColorStop(1, shadow.color3);\n            // Set up the rect coordinates.\n            let x = 0;\n            let y = hh;\n            let w = hw + Math.min(pw, bw - sx);\n            let h = shadow.size;\n            // Fill the shadow rect with the fill style.\n            gc.fillStyle = grad;\n            gc.fillRect(x, y, w, h);\n        }\n        // Draw the row header shadow if needed.\n        if (sx > 0) {\n            // Set up the gradient coordinates.\n            let x0 = hw;\n            let y0 = 0;\n            let x1 = x0 + shadow.size;\n            let y1 = 0;\n            // Create the gradient object.\n            let grad = gc.createLinearGradient(x0, y0, x1, y1);\n            // Set the gradient stops.\n            grad.addColorStop(0, shadow.color1);\n            grad.addColorStop(0.5, shadow.color2);\n            grad.addColorStop(1, shadow.color3);\n            // Set up the rect coordinates.\n            let x = hw;\n            let y = 0;\n            let w = shadow.size;\n            let h = hh + Math.min(ph, bh - sy);\n            // Fill the shadow rect with the fill style.\n            gc.fillStyle = grad;\n            gc.fillRect(x, y, w, h);\n        }\n        // Draw the column footer shadow if needed.\n        if (sy < syMax) {\n            // Set up the gradient coordinates.\n            let x0 = 0;\n            let y0 = vh;\n            let x1 = 0;\n            let y1 = vh - shadow.size;\n            // Create the gradient object.\n            let grad = gc.createLinearGradient(x0, y0, x1, y1);\n            // Set the gradient stops.\n            grad.addColorStop(0, shadow.color1);\n            grad.addColorStop(0.5, shadow.color2);\n            grad.addColorStop(1, shadow.color3);\n            // Set up the rect coordinates.\n            let x = 0;\n            let y = vh - shadow.size;\n            let w = hw + Math.min(pw, bw - sx);\n            let h = shadow.size;\n            // Fill the shadow rect with the fill style.\n            gc.fillStyle = grad;\n            gc.fillRect(x, y, w, h);\n        }\n        // Draw the row footer shadow if needed.\n        if (sx < sxMax) {\n            // Set up the gradient coordinates.\n            let x0 = vw;\n            let y0 = 0;\n            let x1 = vw - shadow.size;\n            let y1 = 0;\n            // Create the gradient object.\n            let grad = gc.createLinearGradient(x0, y0, x1, y1);\n            // Set the gradient stops.\n            grad.addColorStop(0, shadow.color1);\n            grad.addColorStop(0.5, shadow.color2);\n            grad.addColorStop(1, shadow.color3);\n            // Set up the rect coordinates.\n            let x = vw - shadow.size;\n            let y = 0;\n            let w = shadow.size;\n            let h = hh + Math.min(ph, bh - sy);\n            // Fill the shadow rect with the fill style.\n            gc.fillStyle = grad;\n            gc.fillRect(x, y, w, h);\n        }\n        // Restore the gc state.\n        gc.restore();\n    }\n}\n/**\n * The namespace for the `DataGrid` class statics.\n */\n(function (DataGrid) {\n    /**\n     * A generic format function for the copy handler.\n     *\n     * @param args - The format args for the function.\n     *\n     * @returns The string representation of the value.\n     *\n     * #### Notes\n     * This function uses `String()` to coerce a value to a string.\n     */\n    function copyFormatGeneric(args) {\n        if (args.value === null || args.value === undefined) {\n            return '';\n        }\n        return String(args.value);\n    }\n    DataGrid.copyFormatGeneric = copyFormatGeneric;\n    /**\n     * The default theme for a data grid.\n     */\n    DataGrid.defaultStyle = {\n        voidColor: '#F3F3F3',\n        backgroundColor: '#FFFFFF',\n        gridLineColor: 'rgba(20, 20, 20, 0.15)',\n        headerBackgroundColor: '#F3F3F3',\n        headerGridLineColor: 'rgba(20, 20, 20, 0.25)',\n        selectionFillColor: 'rgba(49, 119, 229, 0.2)',\n        selectionBorderColor: 'rgba(0, 107, 247, 1.0)',\n        cursorBorderColor: 'rgba(0, 107, 247, 1.0)',\n        headerSelectionFillColor: 'rgba(20, 20, 20, 0.1)',\n        headerSelectionBorderColor: 'rgba(0, 107, 247, 1.0)',\n        scrollShadow: {\n            size: 10,\n            color1: 'rgba(0, 0, 0, 0.20)',\n            color2: 'rgba(0, 0, 0, 0.05)',\n            color3: 'rgba(0, 0, 0, 0.00)'\n        }\n    };\n    /**\n     * The default sizes for a data grid.\n     */\n    DataGrid.defaultSizes = {\n        rowHeight: 20,\n        columnWidth: 64,\n        rowHeaderWidth: 64,\n        columnHeaderHeight: 20\n    };\n    /**\n     * The default minimum sizes for a data grid.\n     */\n    DataGrid.minimumSizes = {\n        rowHeight: 20,\n        columnWidth: 10,\n        rowHeaderWidth: 10,\n        columnHeaderHeight: 20\n    };\n    /**\n     * The default copy config for a data grid.\n     */\n    DataGrid.defaultCopyConfig = {\n        separator: '\\t',\n        format: copyFormatGeneric,\n        headers: 'none',\n        warningThreshold: 1e6\n    };\n})(DataGrid || (DataGrid = {}));\n/**\n * The namespace for the module implementation details.\n */\nvar Private$1;\n(function (Private) {\n    /**\n     * A singleton `scroll-request` conflatable message.\n     */\n    Private.ScrollRequest = new ConflatableMessage('scroll-request');\n    /**\n     * A singleton `overlay-paint-request` conflatable message.\n     */\n    Private.OverlayPaintRequest = new ConflatableMessage('overlay-paint-request');\n    /**\n     * Create a new zero-sized canvas element.\n     */\n    function createCanvas() {\n        let canvas = document.createElement('canvas');\n        canvas.width = 0;\n        canvas.height = 0;\n        return canvas;\n    }\n    Private.createCanvas = createCanvas;\n    /**\n     * Checks whether a given regions has merged cells in it.\n     * @param dataModel grid's data model.\n     * @param region the paint region to be checked.\n     * @returns boolean.\n     */\n    function regionHasMergedCells(dataModel, region) {\n        const regionGroups = CellGroup.getCellGroupsAtRegion(dataModel, region);\n        return regionGroups.length > 0;\n    }\n    Private.regionHasMergedCells = regionHasMergedCells;\n    /**\n     * A conflatable message which merges dirty paint regions.\n     */\n    class PaintRequest extends ConflatableMessage {\n        /**\n         * Construct a new paint request messages.\n         *\n         * @param region - The cell region for the paint.\n         *\n         * @param r1 - The top-left row of the dirty region.\n         *\n         * @param c1 - The top-left column of the dirty region.\n         *\n         * @param r2 - The bottom-right row of the dirty region.\n         *\n         * @param c2 - The bottom-right column of the dirty region.\n         */\n        constructor(region, r1, c1, r2, c2) {\n            super('paint-request');\n            this._region = region;\n            this._r1 = r1;\n            this._c1 = c1;\n            this._r2 = r2;\n            this._c2 = c2;\n        }\n        /**\n         * The cell region for the paint.\n         */\n        get region() {\n            return this._region;\n        }\n        /**\n         * The top-left row of the dirty region.\n         */\n        get r1() {\n            return this._r1;\n        }\n        /**\n         * The top-left column of the dirty region.\n         */\n        get c1() {\n            return this._c1;\n        }\n        /**\n         * The bottom-right row of the dirty region.\n         */\n        get r2() {\n            return this._r2;\n        }\n        /**\n         * The bottom-right column of the dirty region.\n         */\n        get c2() {\n            return this._c2;\n        }\n        /**\n         * Conflate this message with another paint request.\n         */\n        conflate(other) {\n            // Bail early if the request is already painting everything.\n            if (this._region === 'all') {\n                return true;\n            }\n            // Any region can conflate with the `'all'` region.\n            if (other._region === 'all') {\n                this._region = 'all';\n                return true;\n            }\n            // Otherwise, do not conflate with a different region.\n            if (this._region !== other._region) {\n                return false;\n            }\n            // Conflate the region to the total boundary.\n            this._r1 = Math.min(this._r1, other._r1);\n            this._c1 = Math.min(this._c1, other._c1);\n            this._r2 = Math.max(this._r2, other._r2);\n            this._c2 = Math.max(this._c2, other._c2);\n            return true;\n        }\n    }\n    Private.PaintRequest = PaintRequest;\n    /**\n     * A conflatable message for resizing rows.\n     */\n    class RowResizeRequest extends ConflatableMessage {\n        /**\n         * Construct a new row resize request.\n         *\n         * @param region - The row region which holds the section.\n         *\n         * @param index - The index of row in the region.\n         *\n         * @param size - The target size of the section.\n         */\n        constructor(region, index, size) {\n            super('row-resize-request');\n            this._region = region;\n            this._index = index;\n            this._size = size;\n        }\n        /**\n         * The row region which holds the section.\n         */\n        get region() {\n            return this._region;\n        }\n        /**\n         * The index of the row in the region.\n         */\n        get index() {\n            return this._index;\n        }\n        /**\n         * The target size of the section.\n         */\n        get size() {\n            return this._size;\n        }\n        /**\n         * Conflate this message with another row resize request.\n         */\n        conflate(other) {\n            if (this._region !== other._region || this._index !== other._index) {\n                return false;\n            }\n            this._size = other._size;\n            return true;\n        }\n    }\n    Private.RowResizeRequest = RowResizeRequest;\n    /**\n     * A conflatable message for resizing columns.\n     */\n    class ColumnResizeRequest extends ConflatableMessage {\n        /**\n         * Construct a new column resize request.\n         *\n         * @param region - The column region which holds the section.\n         *\n         * @param index - The index of column in the region.\n         *\n         * @param size - The target size of the section.\n         *               If null, then infer the size to fit.\n         */\n        constructor(region, index, size) {\n            super('column-resize-request');\n            this._region = region;\n            this._index = index;\n            this._size = size;\n        }\n        /**\n         * The column region which holds the section.\n         */\n        get region() {\n            return this._region;\n        }\n        /**\n         * The index of the column in the region.\n         */\n        get index() {\n            return this._index;\n        }\n        /**\n         * The target size of the section.\n         */\n        get size() {\n            return this._size;\n        }\n        /**\n         * Conflate this message with another column resize request.\n         */\n        conflate(other) {\n            if (this._region !== other._region || this._index !== other._index) {\n                return false;\n            }\n            this._size = other._size;\n            return true;\n        }\n    }\n    Private.ColumnResizeRequest = ColumnResizeRequest;\n})(Private$1 || (Private$1 = {}));\n\n/**\n * A data model implementation for in-memory JSON data.\n */\nclass JSONModel extends DataModel {\n    /**\n     * Create a data model with static JSON data.\n     *\n     * @param options - The options for initializing the data model.\n     */\n    constructor(options) {\n        super();\n        let split = Private.splitFields(options.schema);\n        this._data = options.data;\n        this._bodyFields = split.bodyFields;\n        this._headerFields = split.headerFields;\n        this._missingValues = Private.createMissingMap(options.schema);\n    }\n    /**\n     * Get the row count for a region in the data model.\n     *\n     * @param region - The row region of interest.\n     *\n     * @returns - The row count for the region.\n     */\n    rowCount(region) {\n        if (region === 'body') {\n            return this._data.length;\n        }\n        return 1; // TODO multiple column-header rows?\n    }\n    /**\n     * Get the column count for a region in the data model.\n     *\n     * @param region - The column region of interest.\n     *\n     * @returns - The column count for the region.\n     */\n    columnCount(region) {\n        if (region === 'body') {\n            return this._bodyFields.length;\n        }\n        return this._headerFields.length;\n    }\n    /**\n     * Get the data value for a cell in the data model.\n     *\n     * @param region - The cell region of interest.\n     *\n     * @param row - The row index of the cell of interest.\n     *\n     * @param column - The column index of the cell of interest.\n     *\n     * @returns - The data value for the specified cell.\n     *\n     * #### Notes\n     * A `missingValue` as defined by the schema is converted to `null`.\n     */\n    data(region, row, column) {\n        // Set up the field and value variables.\n        let field;\n        let value;\n        // Look up the field and value for the region.\n        switch (region) {\n            case 'body':\n                field = this._bodyFields[column];\n                value = this._data[row][field.name];\n                break;\n            case 'column-header':\n                field = this._bodyFields[column];\n                value = field.title || field.name;\n                break;\n            case 'row-header':\n                field = this._headerFields[column];\n                value = this._data[row][field.name];\n                break;\n            case 'corner-header':\n                field = this._headerFields[column];\n                value = field.title || field.name;\n                break;\n            default:\n                throw 'unreachable';\n        }\n        // Test whether the value is a missing value.\n        let missing = this._missingValues !== null &&\n            typeof value === 'string' &&\n            this._missingValues[value] === true;\n        // Return the final value.\n        return missing ? null : value;\n    }\n    /**\n     * Get the metadata for a cell in the data model.\n     *\n     * @param region - The cell region of interest.\n     *\n     * @param row - The row index of the cell of of interest.\n     *\n     * @param column - The column index of the cell of interest.\n     *\n     * @returns The metadata for the cell.\n     */\n    metadata(region, row, column) {\n        if (region === 'body' || region === 'column-header') {\n            return this._bodyFields[column];\n        }\n        return this._headerFields[column];\n    }\n}\n/**\n * The namespace for the module implementation details.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Split the schema fields into header and body fields.\n     */\n    function splitFields(schema) {\n        // Normalize the primary keys.\n        let primaryKeys;\n        if (schema.primaryKey === undefined) {\n            primaryKeys = [];\n        }\n        else if (typeof schema.primaryKey === 'string') {\n            primaryKeys = [schema.primaryKey];\n        }\n        else {\n            primaryKeys = schema.primaryKey;\n        }\n        // Separate the fields for the body and header.\n        let bodyFields = [];\n        let headerFields = [];\n        for (let field of schema.fields) {\n            if (primaryKeys.indexOf(field.name) === -1) {\n                bodyFields.push(field);\n            }\n            else {\n                headerFields.push(field);\n            }\n        }\n        // Return the separated fields.\n        return { bodyFields, headerFields };\n    }\n    Private.splitFields = splitFields;\n    /**\n     * Create a missing values map for a schema.\n     *\n     * This returns `null` if there are no missing values.\n     */\n    function createMissingMap(schema) {\n        // Bail early if there are no missing values.\n        if (!schema.missingValues || schema.missingValues.length === 0) {\n            return null;\n        }\n        // Collect the missing values into a map.\n        let result = Object.create(null);\n        for (let value of schema.missingValues) {\n            result[value] = true;\n        }\n        // Return the populated map.\n        return result;\n    }\n    Private.createMissingMap = createMissingMap;\n})(Private || (Private = {}));\n\nexport { BasicKeyHandler, BasicMouseHandler, BasicSelectionModel, BooleanCellEditor, CellEditor, CellEditorController, CellGroup, CellRenderer, DataGrid, DataModel, DateCellEditor, DynamicOptionCellEditor, GraphicsContext, HyperlinkRenderer, InputCellEditor, IntegerCellEditor, IntegerInputValidator, JSONModel, MutableDataModel, NumberCellEditor, NumberInputValidator, OptionCellEditor, PassInputValidator, RendererMap, SectionList, SelectionModel, TextCellEditor, TextInputValidator, TextRenderer, resolveOption };\n//# sourceMappingURL=index.es6.js.map\n"],"names":["Private$6","CellGroup","Private$5","Private$4","BasicKeyHandler","constructor","this","_disposed","isDisposed","dispose","onKeyDown","grid","event","editable","selectionModel","cursorRow","cursorColumn","input","String","fromCharCode","keyCode","test","cell","row","column","editorController","edit","getKeyboardLayout","keyForKeydownEvent","stopPropagation","preventDefault","onArrowLeft","onArrowRight","onArrowUp","onArrowDown","onPageUp","onPageDown","onEscape","onDelete","onKeyC","moveCursor","shiftKey","scrollToCursor","model","shift","accel","Platform","accelKey","scrollTo","scrollY","scrollByStep","mode","selectionMode","r1","r2","c1","c2","cr","cc","clear","r","c","cs","currentSelection","select","scrollToColumn","maxScrollX","Infinity","scrollX","scrollToRow","maxScrollY","scrollByPage","n","Math","floor","pageHeight","defaultSizes","rowHeight","isEmpty","dataModel","maxRow","rowCount","maxColumn","columnCount","s","selections","sr1","max","min","sc1","sr2","sc2","setData","copyToClipboard","CellRenderer","resolveOption","option","config","TextRenderer","options","super","font","textColor","backgroundColor","verticalAlignment","horizontalAlignment","horizontalPadding","format","formatGeneric","elideDirection","wrapText","paint","gc","drawBackground","drawText","color","fillStyle","fillRect","x","y","width","height","getText","text","vAlign","hAlign","boxHeight","textX","textY","boxWidth","textHeight","measureFontHeight","beginPath","rect","clip","textAlign","textBaseline","fillText","textWidth","measureText","wordsInColumn","split","curY","textInCurrentLine","length","curLineTextWidth","i","curSubString","substring","nextLineText","curWord","incrementedText","join","elide","textArr","slice","missing","value","formatFixed","digits","Number","toFixed","formatPrecision","toPrecision","formatExponential","toExponential","formatIntlNumber","nft","Intl","NumberFormat","locales","formatDate","Date","toDateString","formatTime","toTimeString","formatISODateTime","toISOString","formatUTCDateTime","toUTCString","formatIntlDateTime","dtf","DateTimeFormat","fontHeightCache","undefined","fontMeasurementGC","normFont","fontMeasurementNode","style","document","body","appendChild","offsetHeight","removeChild","Private","Object","create","node","createElement","position","top","left","visibility","textContent","canvas","getContext","HyperlinkRenderer","url","urlName","areCellGroupsIntersecting","group1","group2","getGroupIndex","rgn","numGroups","groupCount","group","getCellGroupsAtRegion","groupsAtRegion","push","joinCellGroups","groups","startRow","MAX_VALUE","endRow","MIN_VALUE","startColumn","endColumn","areCellGroupsIntersectingAtAxis","axis","getGroup","groupIndex","joinCellGroupWithMergedCellGroups","region","joinedGroup","mergedCellGroups","g","mergedGroup","getCellGroupsAtRow","groupsAtRow","getCellGroupsAtColumn","groupsAtColumn","joinCellGroupsIntersectingAtAxis","regions","groupsAtAxis","concat","mergedGroupAtAxis","splice","BasicMouseHandler","_pressData","release","type","timeout","override","onMouseHover","hit","hitTest","clientX","clientY","handle","resizeHandleForHitTest","cursor","cursorForHandle","createCellConfigObject","cellRenderers","get","viewport","onMouseLeave","onMouseDown","renderer","window","open","Drag","overrideCursor","localX","localY","index","size","columnSize","rowSize","selectionGroup","onMouseMove","data","dy","resizeRow","dx","resizeColumn","lx","ly","mapToLocal","hw","headerWidth","hh","headerHeight","vpw","viewportWidth","vph","viewportHeight","sx","sy","msx","msy","computeTimeout","setTimeout","autoselect","vx","vy","mapToVirtual","bodyWidth","bodyHeight","rowAt","columnAt","onMouseUp","onMouseDoubleClick","colIndex","colRegion","onContextMenu","onWheel","deltaX","deltaY","deltaMode","ds","columnWidth","pageWidth","scrollBy","cursorMap","pressData","metadata","result","lw","lh","tw","th","scrollToCell","delta","abs","right","bottom","hyperlink","none","SelectionModel","_changed","Signal","_selectionMode","changed","connect","onDataModelChanged","isRowSelected","some","containsRow","isColumnSelected","containsColumn","isCellSelected","containsCell","sender","args","emitChanged","emit","selection","BasicSelectionModel","arguments","_cursorRow","_cursorColumn","_cursorRectIndex","_selections","moveCursorWithinSelections","direction","firstSelection","cursorRect","dr","dc","newRow","newColumn","moveToNextRect","moveToPreviousRect","pop","alreadySelected","filter","lr","lc","j","DEFAULT_INVALID_INPUT_MESSAGE","PassInputValidator","validate","valid","TextInputValidator","minLength","NaN","maxLength","pattern","message","isNaN","IntegerInputValidator","NumberInputValidator","CellEditor","inputChanged","validityNotification","_validInput","_gridWheelEventHandler","removeEventListener","_closeValidityNotification","viewportOccluder","onCommit","onCancel","validator","createValidatorBasedOnType","updatePosition","addEventListener","_addContainer","startEditing","cancel","validInput","getInput","error","console","log","setValidity","editorContainer","classList","remove","add","Notification","target","placement","show","RegExp","constraint","minimum","maximum","getCellInfo","columnX","rowY","cellGroup","columnOffset","rowOffset","cellInfo","commit","cursorMovement","className","pointerEvents","close","InputCellEditor","handleEvent","_onKeyDown","_onBlur","_onInput","_unbindEvents","createWidget","deserialize","focus","bindEvents","toString","spellcheck","inputType","TextCellEditor","NumberCellEditor","step","trim","floatValue","parseFloat","Error","IntegerCellEditor","intValue","parseInt","DateCellEditor","_createWidget","_input","_deserialize","_bindEvents","BooleanCellEditor","checked","OptionCellEditor","_isMultiSelect","_select","multiple","values","item","selected","indexOf","selectedOptions","editorContainerRect","getBoundingClientRect","maxHeight","Array","isArray","items","enum","bind","DynamicOptionCellEditor","listId","list","id","valueSet","Set","forEach","setAttribute","Widget","createNode","_message","addClass","setFlag","Flag","DisallowLayout","_target","_placement","attach","_evtMouseDown","update","messageNode","getElementsByClassName","onBeforeAttach","msg","onAfterDetach","onUpdateRequest","targetRect","alignItems","justifyContent","innerHTML","button","container","CellEditorController","_editor","_cell","_typeBasedOverrides","Map","_metadataBasedOverrides","setEditor","identifier","editor","set","key","_metadataIdentifierToKey","_onCommit","_onCancel","_getEditor","response","_getDataTypeKey","_objectToKey","object","str","_metadataMatchesIdentifier","hasOwnProperty","identifierValue","metadataValue","_getMetadataBasedEditor","editorMatched","dtKey","has","DataModel","emptyMetadata","MutableDataModel","freeze","GraphicsContext","context","_context","_state","Private$3","State","next","restore","strokeStyle","lineCap","lineDashOffset","lineJoin","lineWidth","miterLimit","shadowBlur","shadowColor","shadowOffsetX","shadowOffsetY","imageSmoothingEnabled","globalAlpha","globalCompositeOperation","getLineDash","setLineDash","segments","rotate","angle","scale","transform","m11","m12","m21","m22","translate","setTransform","save","closePath","isPointInPath","fillRule","arc","radius","startAngle","endAngle","anticlockwise","arcTo","x1","y1","x2","y2","bezierCurveTo","cp1x","cp1y","cp2x","cp2y","ellipse","radiusX","radiusY","rotation","lineTo","moveTo","quadraticCurveTo","cpx","cpy","w","h","fill","stroke","clearRect","maxWidth","strokeRect","strokeText","createLinearGradient","x0","y0","createRadialGradient","r0","createPattern","image","repetition","createImageData","apply","getImageData","sw","sh","putImageData","drawImage","drawFocusIfNeeded","element","Private$2","Private$1","pi","pool","state","other","RendererMap","fallback","_values","_fallback","err","SectionList","_count","_length","_sections","_minimumSize","minimumSize","_defaultSize","defaultSize","count","prev","curr","offset","clampSize","ArrayExt","lowerBound","offsetCmp","section","span","offsetOf","indexCmp","extentOf","sizeOf","resize","insert","removed","k","move","destination","i1","k1","i2","k2","upperBound","pivot","count1","count2","span1","span2","k3","reset","DataGrid","_scrollX","_scrollY","_viewportWidth","_viewportHeight","_mousedown","_keyHandler","_mouseHandler","_vScrollBarMinWidth","_hScrollBarMinHeight","_dpiRatio","ceil","devicePixelRatio","_dataModel","_selectionModel","_editingEnabled","_style","defaultStyle","_stretchLastRow","stretchLastRow","_stretchLastColumn","stretchLastColumn","_headerVisibility","headerVisibility","_cellRenderers","_copyConfig","copyConfig","defaultCopyConfig","_onRenderersChanged","minimumSizes","_rowSections","_columnSections","_rowHeaderSections","rowHeaderWidth","_columnHeaderSections","columnHeaderHeight","_canvas","createCanvas","_buffer","_overlay","_canvasGC","_bufferGC","_overlayGC","_viewport","tabIndex","outline","_vScrollBar","ScrollBar","orientation","_hScrollBar","_scrollCorner","_editorController","MessageLoop","installMessageHook","hide","thumbMoved","_onThumbMoved","pageRequested","_onPageRequested","stepRequested","_onStepRequested","GridLayout","setCellConfig","layout","rowSpacing","columnSpacing","fitPolicy","setRowStretch","setColumnStretch","addWidget","_releaseMouse","disconnect","_onDataModelChanged","_syncViewport","_onSelectionsChanged","repaintOverlay","keyHandler","mouseHandler","repaintContent","totalWidth","totalHeight","controller","editingEnabled","enabled","canvasGC","rowSections","columnSections","rowHeaderSections","columnHeaderSections","nr","vy1","vy2","nc","vx1","vx2","iter","currentSel","dir","rows","columns","postMessage","ScrollRequest","bh","ph","bw","pw","RowResizeRequest","ColumnResizeRequest","resetRows","resetColumns","fitColumnNames","area","padding","numCols","colsRemaining","rowColumnCount","_fitRowColumnHeaders","bodyColumnCount","_fitBodyColumnHeaders","from","alert","br","bc","rhc","chr","separator","headers","warningThreshold","colCount","cellCount","confirm","cells","map","ClipboardExt","copyText","processMessage","vsbLimits","ElementExt","sizeLimits","hsbLimits","minWidth","minHeight","messageHook","handler","_processViewportMessage","activate","_evtKeyDown","_evtMouseMove","_evtMouseUp","_evtMouseDoubleClick","_evtMouseLeave","_evtContextMenu","_evtWheel","_refreshDPI","onActivateRequest","preventScroll","onBeforeShow","onResize","_syncScrollState","PaintRequest","repaintRegion","OverlayPaintRequest","_getMaxWidthInColumn","columnRegion","columnHeaderRegion","_getMaxWidthInArea","rowRegion","numRows","configs","_val","idx","_getConfig","sort","_getTextToRender","_getCellTextWidth","col","location","_getCellValue","_getCellMetadata","_resizeCanvasIfNeeded","maxW","maxH","curW","curH","expW","expH","needBlit","hasVScroll","isHidden","hasHScroll","vsw","hsh","apw","aph","needVScroll","needHScroll","setHidden","sendMessage","Msg","FitRequest","page","_scrollTo","_onViewportResize","_onViewportScrollRequest","_onViewportPaintRequest","_onViewportOverlayPaintRequest","_onViewportRowResizeRequest","_onViewportColumnResizeRequest","isVisible","offsetWidth","round","oldWidth","oldHeight","paintContent","_paintOverlay","bx","by","xMax","yMax","rs","rhs","chs","_resizeRow","_resizeColumnHeader","_resizeColumn","_resizeRowHeader","_onRowsInserted","_onColumnsInserted","_onRowsRemoved","_onColumnsRemoved","_onRowsMoved","_onColumnsMoved","_onCellsChanged","_onModelReset","rowSpan","columnSpan","nrh","nch","drh","dch","dpiRatio","oldSize","newSize","vw","vh","pos","_blitContent","cellGroups","paintRgn","xMin","yMin","headerBackgroundColor","_paintMergedCells","adjustedSize","contentX","contentY","contentWidth","contentHeight","dxArea","dyArea","cellgroups","source","rx","ry","rw","rh","_drawVoidRegion","_drawBodyRegion","_drawRowHeaderRegion","_drawColumnHeaderRegion","drawCornerHeaderRegion","_drawBodySelections","_drawRowHeaderSelections","_drawColumnHeaderSelections","_drawCursor","_drawShadows","voidColor","contentW","contentH","rowSizes","columnSizes","dh","dw","_drawBackground","_drawRowBackground","rowBackgroundColor","_drawColumnBackground","columnBackgroundColor","_drawCells","_drawHorizontalGridLines","horizontalGridLineColor","gridLineColor","_drawVerticalGridLines","verticalGridLineColor","cellGroupInteresectsRegion","headerHorizontalGridLineColor","headerGridLineColor","headerVerticalGridLineColor","colorFn","_getColumnSize","_getRowSize","rgnR1","rgnR2","rgnC1","rgnC2","dm","selectionFillColor","selectionBorderColor","tmp","headerSelectionFillColor","headerSelectionBorderColor","maxCol","cursorFillColor","cursorBorderColor","shadow","scrollShadow","sxMax","syMax","grad","addColorStop","color1","color2","color3","copyFormatGeneric","ConflatableMessage","regionHasMergedCells","_region","_r1","_c1","_r2","_c2","conflate","_index","_size","JSONModel","splitFields","schema","_data","_bodyFields","bodyFields","_headerFields","headerFields","_missingValues","createMissingMap","field","name","title","primaryKeys","primaryKey","fields","missingValues"],"sourceRoot":""}