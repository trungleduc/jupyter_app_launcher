{"version":3,"file":"514.ac6f364.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyter-notebook/tree-extension/lib/fileactions.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyter-notebook/tree-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { CommandToolbarButtonComponent, ReactWidget, UseSignal, } from '@jupyterlab/apputils';\nimport React from 'react';\n/**\n * A React component to display the list of command toolbar buttons.\n *\n */\nconst Commands = ({ commands, browser, translator, }) => {\n    const trans = translator.load('notebook');\n    const selection = Array.from(browser.selectedItems());\n    const oneFolder = selection.some((item) => item.type === 'directory');\n    const multipleFiles = selection.filter((item) => item.type === 'file').length > 1;\n    if (selection.length === 0) {\n        return React.createElement(\"div\", null, trans.__('Select items to perform actions on them.'));\n    }\n    else {\n        const buttons = ['delete'];\n        if (!oneFolder) {\n            buttons.unshift('duplicate');\n            if (!multipleFiles) {\n                buttons.unshift('rename');\n            }\n            buttons.unshift('download');\n            buttons.unshift('open');\n        }\n        else if (selection.length === 1) {\n            buttons.unshift('rename');\n        }\n        return (React.createElement(React.Fragment, null, buttons.map((action) => (React.createElement(CommandToolbarButtonComponent, { key: action, commands: commands, id: `filebrowser:${action}`, args: { toolbar: true }, icon: undefined })))));\n    }\n};\n/**\n * A React component to display the file action buttons in the file browser toolbar.\n *\n * @param translator The Translation service\n */\nconst FileActions = ({ commands, browser, selectionChanged, translator, }) => {\n    return (React.createElement(UseSignal, { signal: selectionChanged, shouldUpdate: () => true }, () => (React.createElement(Commands, { commands: commands, browser: browser, translator: translator }))));\n};\n/**\n * A namespace for FileActionsComponent static functions.\n */\nexport var FileActionsComponent;\n(function (FileActionsComponent) {\n    /**\n     * Create a new FileActionsComponent\n     *\n     * @param translator The translator\n     */\n    FileActionsComponent.create = ({ commands, browser, selectionChanged, translator, }) => {\n        const widget = ReactWidget.create(React.createElement(FileActions, { commands: commands, browser: browser, selectionChanged: selectionChanged, translator: translator }));\n        widget.addClass('jp-FileActions');\n        return widget;\n    };\n})(FileActionsComponent || (FileActionsComponent = {}));\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { IToolbarWidgetRegistry, createToolbarFactory, setToolbar, } from '@jupyterlab/apputils';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { Uploader, IDefaultFileBrowser, } from '@jupyterlab/filebrowser';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IRunningSessionManagers, RunningSessions } from '@jupyterlab/running';\nimport { IJSONSettingEditorTracker, ISettingEditorTracker, } from '@jupyterlab/settingeditor';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { caretDownIcon, FilenameSearcher, folderIcon, runningIcon, } from '@jupyterlab/ui-components';\nimport { Signal } from '@lumino/signaling';\nimport { Menu, MenuBar } from '@lumino/widgets';\nimport { NotebookTreeWidget, INotebookTree } from '@jupyter-notebook/tree';\nimport { FileActionsComponent } from './fileactions';\n/**\n * The file browser factory.\n */\nconst FILE_BROWSER_FACTORY = 'FileBrowser';\n/**\n * The file browser plugin id.\n */\nconst FILE_BROWSER_PLUGIN_ID = '@jupyterlab/filebrowser-extension:browser';\n/**\n * The class name added to the filebrowser filterbox node.\n */\nconst FILTERBOX_CLASS = 'jp-FileBrowser-filterBox';\n/**\n * The namespace for command IDs.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    // The command to activate the filebrowser widget in tree view.\n    CommandIDs.activate = 'filebrowser:activate';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Plugin to add extra commands to the file browser to create\n * new notebooks, files, consoles and terminals\n */\nconst createNew = {\n    id: '@jupyter-notebook/tree-extension:new',\n    requires: [ITranslator],\n    optional: [IToolbarWidgetRegistry],\n    autoStart: true,\n    activate: (app, translator, toolbarRegistry) => {\n        const { commands } = app;\n        const trans = translator.load('notebook');\n        const overflowOptions = {\n            overflowMenuOptions: { isVisible: false },\n        };\n        const menubar = new MenuBar(overflowOptions);\n        const newMenu = new Menu({ commands });\n        newMenu.title.label = trans.__('New');\n        newMenu.title.icon = caretDownIcon;\n        menubar.addMenu(newMenu);\n        const newCommands = [\n            'notebook:create-new',\n            'terminal:create-new',\n            'console:create',\n            'filebrowser:create-new-file',\n            'filebrowser:create-new-directory',\n        ];\n        newCommands.forEach((command) => {\n            newMenu.addItem({ command });\n        });\n        if (toolbarRegistry) {\n            toolbarRegistry.addFactory(FILE_BROWSER_FACTORY, 'new-dropdown', (browser) => {\n                const menubar = new MenuBar(overflowOptions);\n                menubar.addMenu(newMenu);\n                menubar.addClass('jp-DropdownMenu');\n                return menubar;\n            });\n        }\n    },\n};\n/**\n * A plugin to add file browser actions to the file browser toolbar.\n */\nconst fileActions = {\n    id: '@jupyter-notebook/tree-extension:file-actions',\n    autoStart: true,\n    requires: [IDefaultFileBrowser, IToolbarWidgetRegistry, ITranslator],\n    activate: (app, browser, toolbarRegistry, translator) => {\n        // TODO: use upstream signal when available to detect selection changes\n        // https://github.com/jupyterlab/jupyterlab/issues/14598\n        const selectionChanged = new Signal(browser);\n        const methods = [\n            '_selectItem',\n            '_handleMultiSelect',\n            'handleFileSelect',\n        ];\n        methods.forEach((method) => {\n            const original = browser['listing'][method];\n            browser['listing'][method] = (...args) => {\n                original.call(browser['listing'], ...args);\n                selectionChanged.emit(void 0);\n            };\n        });\n        // Create a toolbar item that adds buttons to the file browser toolbar\n        // to perform actions on the files\n        toolbarRegistry.addFactory(FILE_BROWSER_FACTORY, 'fileActions', (browser) => {\n            const { commands } = app;\n            const fileActions = FileActionsComponent.create({\n                commands,\n                browser,\n                selectionChanged,\n                translator,\n            });\n            return fileActions;\n        });\n    },\n};\n/**\n * Plugin to load the default plugins that are loaded on all the Notebook pages\n * (tree, edit, view, etc.) so they are visible in the settings editor.\n */\nconst loadPlugins = {\n    id: '@jupyter-notebook/tree-extension:load-plugins',\n    autoStart: true,\n    requires: [ISettingRegistry],\n    activate(app, settingRegistry) {\n        const { isDisabled } = PageConfig.Extension;\n        const connector = settingRegistry.connector;\n        const allPluginsOption = PageConfig.getOption('allPlugins');\n        if (!allPluginsOption) {\n            return;\n        }\n        // build the list of plugins shipped by default on the all the notebook pages\n        // this avoid explicitly loading `'all'` plugins such as the ones used\n        // in JupyterLab only\n        const allPlugins = JSON.parse(allPluginsOption);\n        const pluginsSet = new Set();\n        Object.keys(allPlugins).forEach((key) => {\n            const extensionsAndPlugins = allPlugins[key];\n            Object.keys(extensionsAndPlugins).forEach((plugin) => {\n                const value = extensionsAndPlugins[plugin];\n                if (typeof value === 'boolean' && value) {\n                    pluginsSet.add(plugin);\n                }\n                else if (Array.isArray(value)) {\n                    value.forEach((v) => {\n                        pluginsSet.add(v);\n                    });\n                }\n            });\n        });\n        app.restored.then(async () => {\n            const plugins = await connector.list('all');\n            plugins.ids.forEach(async (id) => {\n                const [extension] = id.split(':');\n                // load the plugin if it is built-in the notebook application explicitly\n                // either included as an extension or as a plugin directly\n                const hasPlugin = pluginsSet.has(extension) || pluginsSet.has(id);\n                if (!hasPlugin || isDisabled(id) || id in settingRegistry.plugins) {\n                    return;\n                }\n                try {\n                    await settingRegistry.load(id);\n                }\n                catch (error) {\n                    console.warn(`Settings failed to load for (${id})`, error);\n                }\n            });\n        });\n    },\n};\n/**\n * A plugin to add file browser commands for the tree view.\n */\nconst openFileBrowser = {\n    id: '@jupyter-notebook/tree-extension:open-file-browser',\n    requires: [INotebookTree, IDefaultFileBrowser],\n    autoStart: true,\n    activate: (app, notebookTree, browser) => {\n        const { commands } = app;\n        commands.addCommand(CommandIDs.activate, {\n            execute: () => {\n                notebookTree.currentWidget = browser;\n            },\n        });\n    },\n};\n/**\n * A plugin to add the file browser widget to an INotebookShell\n */\nconst notebookTreeWidget = {\n    id: '@jupyter-notebook/tree-extension:widget',\n    requires: [\n        IDefaultFileBrowser,\n        ITranslator,\n        ISettingRegistry,\n        IToolbarWidgetRegistry,\n    ],\n    optional: [\n        IRunningSessionManagers,\n        ISettingEditorTracker,\n        IJSONSettingEditorTracker,\n    ],\n    autoStart: true,\n    provides: INotebookTree,\n    activate: (app, browser, translator, settingRegistry, toolbarRegistry, manager, settingEditorTracker, jsonSettingEditorTracker) => {\n        const nbTreeWidget = new NotebookTreeWidget();\n        const trans = translator.load('notebook');\n        browser.title.label = trans.__('Files');\n        browser.node.setAttribute('role', 'region');\n        browser.node.setAttribute('aria-label', trans.__('File Browser Section'));\n        browser.title.icon = folderIcon;\n        nbTreeWidget.addWidget(browser);\n        nbTreeWidget.tabBar.addTab(browser.title);\n        nbTreeWidget.tabsMovable = false;\n        toolbarRegistry.addFactory(FILE_BROWSER_FACTORY, 'uploader', (browser) => new Uploader({\n            model: browser.model,\n            translator,\n            label: trans.__('Upload'),\n        }));\n        toolbarRegistry.addFactory(FILE_BROWSER_FACTORY, 'fileNameSearcher', (browser) => {\n            const searcher = FilenameSearcher({\n                updateFilter: (filterFn, query) => {\n                    browser.model.setFilter((value) => {\n                        return filterFn(value.name.toLowerCase());\n                    });\n                },\n                useFuzzyFilter: true,\n                placeholder: trans.__('Filter files by name'),\n                forceRefresh: true,\n            });\n            searcher.addClass(FILTERBOX_CLASS);\n            return searcher;\n        });\n        setToolbar(browser, createToolbarFactory(toolbarRegistry, settingRegistry, FILE_BROWSER_FACTORY, notebookTreeWidget.id, translator));\n        if (manager) {\n            const running = new RunningSessions(manager, translator);\n            running.id = 'jp-running-sessions-tree';\n            running.title.label = trans.__('Running');\n            running.title.icon = runningIcon;\n            nbTreeWidget.addWidget(running);\n            nbTreeWidget.tabBar.addTab(running.title);\n        }\n        const settings = settingRegistry.load(FILE_BROWSER_PLUGIN_ID);\n        Promise.all([settings, app.restored])\n            .then(([settings]) => {\n            // Set Notebook 7 defaults if there is no user setting override\n            [\n                'showFileCheckboxes',\n                'showFileSizeColumn',\n                'sortNotebooksFirst',\n            ].forEach((setting) => {\n                if (settings.user[setting] === undefined) {\n                    void settings.set(setting, true);\n                }\n            });\n        })\n            .catch((reason) => {\n            console.error(reason.message);\n        });\n        app.shell.add(nbTreeWidget, 'main', { rank: 100 });\n        // add a separate tab for each setting editor\n        [settingEditorTracker, jsonSettingEditorTracker].forEach((editorTracker) => {\n            if (editorTracker) {\n                editorTracker.widgetAdded.connect((_, editor) => {\n                    nbTreeWidget.addWidget(editor);\n                    nbTreeWidget.tabBar.addTab(editor.title);\n                    nbTreeWidget.currentWidget = editor;\n                });\n            }\n        });\n        return nbTreeWidget;\n    },\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    createNew,\n    fileActions,\n    loadPlugins,\n    openFileBrowser,\n    notebookTreeWidget,\n];\nexport default plugins;\n"],"names":["Commands","commands","browser","translator","trans","load","selection","Array","from","selectedItems","oneFolder","some","item","type","multipleFiles","filter","length","__","buttons","unshift","map","action","CommandToolbarButtonComponent","key","id","args","toolbar","icon","undefined","FileActions","selectionChanged","UseSignal","signal","shouldUpdate","FileActionsComponent","create","widget","ReactWidget","addClass","FILE_BROWSER_FACTORY","CommandIDs","activate","createNew","requires","ITranslator","optional","IToolbarWidgetRegistry","autoStart","app","toolbarRegistry","overflowOptions","overflowMenuOptions","isVisible","menubar","MenuBar","newMenu","Menu","title","label","caretDownIcon","addMenu","forEach","command","addItem","addFactory","fileActions","IDefaultFileBrowser","Signal","method","original","call","emit","loadPlugins","ISettingRegistry","settingRegistry","isDisabled","PageConfig","Extension","connector","allPluginsOption","getOption","allPlugins","JSON","parse","pluginsSet","Set","Object","keys","extensionsAndPlugins","plugin","value","add","isArray","v","restored","then","async","list","ids","extension","split","has","plugins","error","console","warn","openFileBrowser","INotebookTree","notebookTree","addCommand","execute","currentWidget","notebookTreeWidget","IRunningSessionManagers","ISettingEditorTracker","IJSONSettingEditorTracker","provides","manager","settingEditorTracker","jsonSettingEditorTracker","nbTreeWidget","NotebookTreeWidget","node","setAttribute","folderIcon","addWidget","tabBar","addTab","tabsMovable","Uploader","model","searcher","FilenameSearcher","updateFilter","filterFn","query","setFilter","name","toLowerCase","useFuzzyFilter","placeholder","forceRefresh","setToolbar","createToolbarFactory","running","RunningSessions","runningIcon","settings","Promise","all","setting","user","set","catch","reason","message","shell","rank","editorTracker","widgetAdded","connect","_","editor"],"sourceRoot":""}