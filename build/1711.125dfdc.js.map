{"version":3,"file":"1711.125dfdc.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/application-extension/lib/clear-data-dialog.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/application-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport React from 'react';\n/**\n * A widget for displaying a dialog to clear browser data\n */\nexport class ClearDataDialog extends ReactWidget {\n    /**\n     * Create a new clear data dialog\n     *\n     * @param options - The options for creating the dialog\n     */\n    constructor(options) {\n        super();\n        this._translator = options.translator;\n        this._availability = options.availability || {\n            canClearSettings: true,\n            canClearContents: true,\n        };\n        this._settingsChecked = this._availability.canClearSettings;\n        this._contentsChecked = this._availability.canClearContents;\n        this.addClass('jp-ClearData-dialog');\n    }\n    /**\n     * Get the current options selected by the user\n     */\n    getValue() {\n        return {\n            clearSettings: this._settingsChecked && this._availability.canClearSettings,\n            clearContents: this._contentsChecked && this._availability.canClearContents,\n        };\n    }\n    /**\n     * Render the dialog content\n     */\n    render() {\n        return (React.createElement(ClearDataDialogComponent, { translator: this._translator, settingsChecked: this._settingsChecked, contentsChecked: this._contentsChecked, availability: this._availability, setSettingsChecked: (checked) => {\n                this._settingsChecked = checked;\n                this.update();\n            }, setContentsChecked: (checked) => {\n                this._contentsChecked = checked;\n                this.update();\n            } }));\n    }\n}\n/**\n * A React component for displaying a dialog to clear browser data\n */\nfunction ClearDataDialogComponent(props) {\n    const { translator, settingsChecked, contentsChecked, availability, setSettingsChecked, setContentsChecked, } = props;\n    const trans = translator.load('@jupyterlite');\n    return (React.createElement(\"div\", { className: \"jp-ClearData-container\" },\n        React.createElement(\"div\", { className: \"jp-ClearData-warning-box\" },\n            React.createElement(\"div\", { className: \"jp-ClearData-warning-icon\" }, \"\\u26A0\\uFE0F\"),\n            React.createElement(\"div\", { className: \"jp-ClearData-warning-text\" },\n                React.createElement(\"span\", { className: \"jp-ClearData-warning-title\" }, trans.__('Warning: Data Loss Risk')),\n                React.createElement(\"p\", null, trans.__('Clearing browser data will permanently remove data stored in your browser. ' +\n                    'This operation cannot be undone and may result in loss of:')),\n                React.createElement(\"ul\", null,\n                    React.createElement(\"li\", null, trans.__('User settings and preferences')),\n                    React.createElement(\"li\", null, trans.__('Notebooks and files stored in the browser')),\n                    React.createElement(\"li\", null, trans.__('Unsaved work and changes'))))),\n        React.createElement(\"div\", { className: `jp-ClearData-option ${!availability.canClearSettings ? 'jp-mod-disabled' : ''}` },\n            React.createElement(\"input\", { id: \"jp-ClearData-settings\", type: \"checkbox\", checked: settingsChecked, onChange: (e) => setSettingsChecked(e.target.checked), disabled: !availability.canClearSettings }),\n            React.createElement(\"label\", { htmlFor: \"jp-ClearData-settings\", className: !availability.canClearSettings ? 'jp-mod-disabled' : '' },\n                trans.__('Settings and preferences'),\n                !availability.canClearSettings && (React.createElement(\"span\", { className: \"jp-ClearData-unavailable\" },\n                    ' ',\n                    trans.__('(unavailable)'))))),\n        React.createElement(\"div\", { className: `jp-ClearData-option ${!availability.canClearContents ? 'jp-mod-disabled' : ''}` },\n            React.createElement(\"input\", { id: \"jp-ClearData-contents\", type: \"checkbox\", checked: contentsChecked, onChange: (e) => setContentsChecked(e.target.checked), disabled: !availability.canClearContents }),\n            React.createElement(\"label\", { htmlFor: \"jp-ClearData-contents\", className: !availability.canClearContents ? 'jp-mod-disabled' : '' },\n                trans.__('Files and notebooks'),\n                !availability.canClearContents && (React.createElement(\"span\", { className: \"jp-ClearData-unavailable\" },\n                    ' ',\n                    trans.__('(unavailable)'))))),\n        React.createElement(\"div\", { className: \"jp-ClearData-reload-notice\" }, trans.__('This will reload the page after clearing the selected data.'))));\n}\n//# sourceMappingURL=clear-data-dialog.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ILabShell, IRouter, } from '@jupyterlab/application';\nimport { Clipboard, Dialog, ICommandPalette, showDialog, } from '@jupyterlab/apputils';\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { IDocumentManager, IDocumentWidgetOpener } from '@jupyterlab/docmanager';\nimport { IDefaultFileBrowser, IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { DocumentConnectionManager, ILSPDocumentConnectionManager, IWidgetLSPAdapterTracker, LanguageServerManager, } from '@jupyterlab/lsp';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { IDefaultDrive, ISettingManager, } from '@jupyterlab/services';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { clearIcon, downloadIcon, linkIcon } from '@jupyterlab/ui-components';\nimport { IKernelClient } from '@jupyterlite/kernel';\nimport { IServiceWorkerManager, ServiceWorkerManager } from '@jupyterlite/server';\nimport { liteIcon, liteWordmark } from '@jupyterlite/ui-components';\nimport { BrowserStorageDrive } from '@jupyterlite/contents';\nimport { Settings } from '@jupyterlite/settings';\nimport { filter } from '@lumino/algorithm';\nimport { Widget } from '@lumino/widgets';\nimport React from 'react';\nimport { ClearDataDialog } from './clear-data-dialog';\n/**\n * A regular expression to match path to notebooks, documents and consoles\n */\nconst URL_PATTERN = new RegExp('/(lab|tree|notebooks|edit|consoles)\\\\/?');\n/**\n * The JupyterLab document manager plugin id.\n */\nconst JUPYTERLAB_DOCMANAGER_PLUGIN_ID = '@jupyterlab/docmanager-extension:plugin';\n/**\n * The command IDs used by the application extension.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.about = 'application:about';\n    CommandIDs.docmanagerDownload = 'docmanager:download';\n    CommandIDs.filebrowserDownload = 'filebrowser:download';\n    CommandIDs.copyShareableLink = 'filebrowser:share-main';\n    CommandIDs.clearBrowserData = 'application:clear-browser-data';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The name of the translation bundle for internationalized strings.\n */\nconst I18N_BUNDLE = 'jupyterlite';\n/**\n * Add a command to show an About dialog.\n */\nconst about = {\n    id: '@jupyterlite/application-extension:about',\n    autoStart: true,\n    requires: [ITranslator],\n    optional: [ICommandPalette, IMainMenu],\n    activate: (app, translator, palette, menu) => {\n        const { commands } = app;\n        const trans = translator.load(I18N_BUNDLE);\n        const category = trans.__('Help');\n        commands.addCommand(CommandIDs.about, {\n            label: trans.__('About %1', app.name),\n            execute: () => {\n                const versionNumber = trans.__('Version %1', app.version);\n                const versionInfo = (React.createElement(\"span\", { className: \"jp-About-version-info\" },\n                    React.createElement(\"span\", { className: \"jp-About-version\" }, versionNumber)));\n                const title = (React.createElement(\"span\", { className: \"jp-About-header\" },\n                    React.createElement(\"div\", { className: \"jp-About-header-info\" },\n                        React.createElement(liteWordmark.react, { height: \"auto\", width: \"196px\" }),\n                        versionInfo)));\n                // Create the body of the about dialog\n                const jupyterliteURL = 'https://github.com/jupyterlite/jupyterlite';\n                const contributorsURL = 'https://github.com/jupyterlite/jupyterlite/graphs/contributors';\n                const externalLinks = (React.createElement(\"span\", { className: \"jp-About-externalLinks\" },\n                    React.createElement(\"a\", { href: contributorsURL, target: \"_blank\", rel: \"noopener noreferrer\", className: \"jp-Button-flat\" }, trans.__('CONTRIBUTOR LIST')),\n                    React.createElement(\"a\", { href: jupyterliteURL, target: \"_blank\", rel: \"noopener noreferrer\", className: \"jp-Button-flat\" }, trans.__('JUPYTERLITE ON GITHUB'))));\n                const copyright = (React.createElement(\"span\", { className: \"jp-About-copyright\" }, trans.__('© 2021-2022 JupyterLite Contributors')));\n                const body = (React.createElement(\"div\", { className: \"jp-About-body\" },\n                    externalLinks,\n                    copyright));\n                return showDialog({\n                    title,\n                    body,\n                    buttons: [\n                        Dialog.createButton({\n                            label: trans.__('Dismiss'),\n                            className: 'jp-About-button jp-mod-reject jp-mod-styled',\n                        }),\n                    ],\n                });\n            },\n        });\n        if (palette) {\n            palette.addItem({ command: CommandIDs.about, category });\n        }\n        if (menu) {\n            menu.helpMenu.addGroup([{ command: CommandIDs.about }], 0);\n        }\n    },\n};\n/**\n * A plugin providing download commands in the file menu and command palette.\n */\nconst downloadPlugin = {\n    id: '@jupyterlite/application-extension:download',\n    autoStart: true,\n    requires: [ITranslator, IDocumentManager],\n    optional: [ICommandPalette, IFileBrowserFactory],\n    activate: (app, translator, docManager, palette, factory) => {\n        const trans = translator.load(I18N_BUNDLE);\n        const { commands, serviceManager, shell } = app;\n        const { contents } = serviceManager;\n        const isEnabled = () => {\n            const { currentWidget } = shell;\n            return !!(currentWidget && docManager.contextForWidget(currentWidget));\n        };\n        const downloadContent = async (contentPath, fileName) => {\n            var _a, _b, _c;\n            const model = await contents.get(contentPath, { content: true });\n            const element = document.createElement('a');\n            if (model.type === 'notebook' ||\n                model.format === 'json' ||\n                model.mimetype === 'text/json') {\n                const mime = (_a = model.mimetype) !== null && _a !== void 0 ? _a : 'text/json';\n                const content = JSON.stringify(model.content, null, 2);\n                element.href = `data:${mime};charset=utf-8,${encodeURIComponent(content)}`;\n            }\n            else if (model.format === 'text' || model.mimetype === 'text/plain') {\n                const mime = (_b = model.mimetype) !== null && _b !== void 0 ? _b : 'text/plain';\n                element.href = `data:${mime};charset=utf-8,${encodeURIComponent(model.content)}`;\n            }\n            else if (model.format === 'base64' ||\n                model.mimetype === 'application/octet-stream') {\n                const mime = (_c = model.mimetype) !== null && _c !== void 0 ? _c : 'application/octet-stream';\n                element.href = `data:${mime};base64,${model.content}`;\n            }\n            else {\n                throw new Error(`Content whose mimetype is \"${model.mimetype}\" cannot be downloaded`);\n            }\n            element.download = fileName;\n            document.body.appendChild(element);\n            element.click();\n            document.body.removeChild(element);\n        };\n        commands.addCommand(CommandIDs.docmanagerDownload, {\n            label: trans.__('Download'),\n            caption: trans.__('Download the file to your computer'),\n            isEnabled,\n            execute: async () => {\n                // Checks that shell.currentWidget is valid:\n                const current = shell.currentWidget;\n                if (!isEnabled() || !current) {\n                    return;\n                }\n                const context = docManager.contextForWidget(current);\n                if (!context) {\n                    return showDialog({\n                        title: trans.__('Cannot Download'),\n                        body: trans.__('No context found for current widget!'),\n                        buttons: [Dialog.okButton({ label: trans.__('OK') })],\n                    });\n                }\n                await context.save();\n                try {\n                    await downloadContent(context.path, context.path);\n                }\n                catch (e) {\n                    return showDialog({\n                        title: trans.__('Cannot Download'),\n                        body: JSON.stringify(e),\n                        buttons: [Dialog.okButton({ label: trans.__('OK') })],\n                    });\n                }\n            },\n        });\n        const category = trans.__('File Operations');\n        if (palette) {\n            palette.addItem({ command: CommandIDs.docmanagerDownload, category });\n        }\n        if (factory) {\n            const { tracker } = factory;\n            commands.addCommand(CommandIDs.filebrowserDownload, {\n                execute: async () => {\n                    const widget = tracker.currentWidget;\n                    if (!widget) {\n                        return;\n                    }\n                    const selected = Array.from(widget.selectedItems());\n                    selected.forEach(async (item) => {\n                        if (item.type !== 'directory') {\n                            try {\n                                await downloadContent(item.path, item.name);\n                            }\n                            catch (e) {\n                                return showDialog({\n                                    title: trans.__('Cannot Download'),\n                                    body: JSON.stringify(e),\n                                    buttons: [Dialog.okButton({ label: trans.__('OK') })],\n                                });\n                            }\n                        }\n                    });\n                },\n                icon: downloadIcon.bindprops({ stylesheet: 'menuItem' }),\n                label: trans.__('Download'),\n            });\n        }\n    },\n};\n/**\n * The main application icon.\n */\nconst liteLogo = {\n    id: '@jupyterlite/application-extension:logo',\n    // marking as optional to not throw errors in Notebook\n    optional: [ILabShell],\n    autoStart: true,\n    activate: (app, labShell) => {\n        if (!labShell) {\n            return;\n        }\n        const logo = new Widget();\n        liteIcon.element({\n            container: logo.node,\n            elementPosition: 'center',\n            margin: '2px 2px 2px 8px',\n            height: 'auto',\n            width: '16px',\n        });\n        logo.id = 'jp-MainLogo';\n        labShell.add(logo, 'top', { rank: 0 });\n    },\n};\n/**\n * A plugin to provide the language server connection manager\n *\n * Currently does nothing until LSP is supported in JupyterLite\n */\nconst lspConnectionManager = {\n    id: '@jupyterlite/application-extension:lsp-connection-manager',\n    autoStart: true,\n    requires: [IWidgetLSPAdapterTracker],\n    provides: ILSPDocumentConnectionManager,\n    activate: (app, tracker) => {\n        const languageServerManager = new (class extends LanguageServerManager {\n            async fetchSessions() {\n                // no-op\n            }\n        })({\n            settings: app.serviceManager.serverSettings,\n        });\n        const connectionManager = new DocumentConnectionManager({\n            languageServerManager,\n            adapterTracker: tracker,\n        });\n        return connectionManager;\n    },\n};\n/**\n * A plugin to trigger a refresh of the commands when the shell layout changes.\n */\nconst notifyCommands = {\n    id: '@jupyterlite/application-extension:notify-commands',\n    autoStart: true,\n    optional: [ILabShell],\n    activate: (app, labShell) => {\n        if (labShell) {\n            labShell.layoutModified.connect(() => {\n                app.commands.notifyCommandChanged();\n            });\n        }\n    },\n};\n/**\n * A custom opener plugin to pass the path to documents as\n * query string parameters.\n */\nconst opener = {\n    id: '@jupyterlite/application-extension:opener',\n    autoStart: true,\n    requires: [IRouter, IDocumentManager],\n    optional: [ILabShell, ISettingRegistry],\n    activate: (app, router, docManager, labShell, settingRegistry) => {\n        const { commands, docRegistry } = app;\n        const command = 'router:tree';\n        commands.addCommand(command, {\n            execute: (args) => {\n                var _a;\n                const parsed = args;\n                // use request to do the matching\n                const { request, search } = parsed;\n                const matches = (_a = request.match(URL_PATTERN)) !== null && _a !== void 0 ? _a : [];\n                if (!matches) {\n                    return;\n                }\n                const urlParams = new URLSearchParams(search);\n                const paths = urlParams.getAll('path');\n                if (paths.length === 0) {\n                    return;\n                }\n                const files = paths.map((path) => decodeURIComponent(path));\n                app.started.then(async () => {\n                    var _a;\n                    const page = PageConfig.getOption('notebookPage');\n                    const [file] = files;\n                    if (page === 'tree') {\n                        let appUrl = '/edit';\n                        // check if the file is a notebook\n                        const defaultFactory = docRegistry.defaultWidgetFactory(file);\n                        if (defaultFactory.name === 'Notebook') {\n                            appUrl = '/notebooks';\n                        }\n                        const baseUrl = PageConfig.getBaseUrl();\n                        const url = new URL(URLExt.join(baseUrl, appUrl, 'index.html'));\n                        url.searchParams.append('path', file);\n                        // redirect to the proper page\n                        window.location.href = url.toString();\n                        return;\n                    }\n                    else if (page === 'consoles') {\n                        commands.execute('console:create', { path: file });\n                        return;\n                    }\n                    else if (page === 'notebooks' || page === 'edit') {\n                        let defaultFactory = docRegistry.defaultWidgetFactory(file).name;\n                        // Explicitly get the default viewers from the settings because\n                        // JupyterLab might not have had the time to load the settings yet (race condition)\n                        // Relevant code: https://github.com/jupyterlab/jupyterlab/blob/d56ff811f39b3c10c6d8b6eb27a94624b753eb53/packages/docmanager-extension/src/index.tsx#L265-L293\n                        if (settingRegistry) {\n                            const settings = await settingRegistry.load(JUPYTERLAB_DOCMANAGER_PLUGIN_ID);\n                            const defaultViewers = settings.get('defaultViewers').composite;\n                            // get the file types for the path\n                            const types = docRegistry.getFileTypesForPath(file);\n                            // for each file type, check if there is a default viewer and if it\n                            // is available in the docRegistry. If it is the case, use it as the\n                            // default factory\n                            types.forEach((ft) => {\n                                if (defaultViewers[ft.name] !== undefined &&\n                                    docRegistry.getWidgetFactory(defaultViewers[ft.name])) {\n                                    defaultFactory = defaultViewers[ft.name];\n                                }\n                            });\n                        }\n                        const factory = (_a = urlParams.get('factory')) !== null && _a !== void 0 ? _a : defaultFactory;\n                        docManager.open(file, factory, undefined, {\n                            ref: '_noref',\n                        });\n                    }\n                    else {\n                        // open all files in the lab interface\n                        files.forEach((file) => docManager.open(file));\n                        const url = new URL(URLExt.join(PageConfig.getBaseUrl(), request));\n                        // only remove the path (to keep extra parameters like the RTC room)\n                        url.searchParams.delete('path');\n                        const { pathname, search } = url;\n                        router.navigate(`${pathname}${search}`, { skipRouting: true });\n                        if (labShell) {\n                            // open the folder where the files are located on startup\n                            const showInBrowser = () => {\n                                commands.execute('docmanager:show-in-file-browser');\n                                labShell.currentChanged.disconnect(showInBrowser);\n                            };\n                            labShell.currentChanged.connect(showInBrowser);\n                        }\n                    }\n                });\n            },\n        });\n        router.register({ command, pattern: URL_PATTERN });\n    },\n};\n/**\n * A plugin installing the service worker.\n */\nconst serviceWorkerManagerPlugin = {\n    id: '@jupyterlite/application-extension:service-worker-manager',\n    autoStart: true,\n    provides: IServiceWorkerManager,\n    optional: [IKernelClient],\n    activate: (app, kernelClient) => {\n        const { contents } = app.serviceManager;\n        const serviceWorkerManager = new ServiceWorkerManager({ contents });\n        if (kernelClient !== undefined) {\n            serviceWorkerManager.registerStdinHandler('kernel', kernelClient.handleStdin.bind(kernelClient));\n        }\n        return serviceWorkerManager;\n    },\n};\n/**\n * A plugin to patch the session context path so it includes the drive name.\n * TODO: investigate a better way for the kernel to be aware of the drive it is\n * associated with.\n */\nconst sessionContextPatch = {\n    id: '@jupyterlite/application-extension:session-context-patch',\n    autoStart: true,\n    requires: [IDocumentManager, IDocumentWidgetOpener],\n    activate: (app, docManager, widgetOpener) => {\n        const contents = app.serviceManager.contents;\n        widgetOpener.opened.connect((_, widget) => {\n            var _a;\n            const context = docManager.contextForWidget(widget);\n            const driveName = contents.driveName((_a = context === null || context === void 0 ? void 0 : context.path) !== null && _a !== void 0 ? _a : '');\n            if (driveName === '') {\n                // do nothing if this is the default drive\n                return;\n            }\n            const sessionContext = widget.context.sessionContext;\n            // Path the session context to include the drive name\n            // In JupyterLab 3 the path used to contain the drive name as prefix, which was\n            // also part of the /api/sessions requests. Which allowed for knowing the drive associated\n            // with a kernel.\n            // This was changed in JupyterLab 4 in https://github.com/jupyterlab/jupyterlab/pull/14519\n            // and is needed for the kernel to be aware of the drive it is associated with.\n            // This is a temporary fix until a better solution is found upstream in JupyterLab ideally.\n            // This also avoid having to patch the downstream kernels (e.g. xeus-python and pyodide)\n            sessionContext['_name'] = context === null || context === void 0 ? void 0 : context.path;\n            sessionContext['_path'] = context === null || context === void 0 ? void 0 : context.path;\n        });\n    },\n};\n/**\n * A custom plugin to share a link to a file.\n *\n * This url can be used to open a particular file in JupyterLab.\n * It also adds the corresponding room if RTC is enabled.\n *\n */\nconst shareFile = {\n    id: '@jupyterlite/application-extension:share-file',\n    requires: [IFileBrowserFactory, ITranslator],\n    autoStart: true,\n    activate: (app, factory, translator) => {\n        const trans = translator.load(I18N_BUNDLE);\n        const { commands, docRegistry } = app;\n        const { tracker } = factory;\n        commands.addCommand(CommandIDs.copyShareableLink, {\n            execute: () => {\n                const widget = tracker.currentWidget;\n                if (!widget) {\n                    return;\n                }\n                const baseUrl = PageConfig.getBaseUrl();\n                let appUrl = PageConfig.getOption('appUrl');\n                const models = Array.from(filter(widget.selectedItems(), (item) => item.type !== 'directory'));\n                if (!models.length) {\n                    return;\n                }\n                // In the notebook application:\n                // - only copy the first element\n                // - open /notebooks if it's a notebook, /edit otherwise\n                if (appUrl === '/tree') {\n                    const [model] = models;\n                    const defaultFactory = docRegistry.defaultWidgetFactory(model.path);\n                    if (defaultFactory.name === 'Notebook') {\n                        appUrl = '/notebooks';\n                    }\n                    else {\n                        appUrl = '/edit';\n                    }\n                }\n                const url = new URL(URLExt.join(baseUrl, appUrl, 'index.html'));\n                models.forEach((model) => {\n                    url.searchParams.append('path', model.path);\n                });\n                Clipboard.copyToSystem(url.href);\n            },\n            isVisible: () => !!tracker.currentWidget &&\n                Array.from(tracker.currentWidget.selectedItems()).length >= 1,\n            icon: linkIcon.bindprops({ stylesheet: 'menuItem' }),\n            label: trans.__('Copy Shareable Link'),\n        });\n    },\n};\n/**\n * A plugin to add a command for clearing browser data.\n */\nconst clearBrowserData = {\n    id: '@jupyterlite/application-extension:clear-browser-data',\n    autoStart: true,\n    requires: [ITranslator],\n    optional: [ICommandPalette, ISettingManager, IDefaultDrive, IDefaultFileBrowser],\n    activate: (app, translator, palette, settingManager, defaultDrive, defaultFileBrowser) => {\n        const { commands } = app;\n        const trans = translator.load(I18N_BUNDLE);\n        const category = trans.__('Help');\n        const isBrowserStorageDrive = defaultDrive instanceof BrowserStorageDrive;\n        const isLiteSettingsManager = settingManager instanceof Settings;\n        if (!isBrowserStorageDrive && !isLiteSettingsManager) {\n            // not available if neither the default drive or the settings manager\n            // are the ones provided by JupyterLite by default\n            return;\n        }\n        // Add a CSS class to the drive if it is a BrowserStorageDrive for the context menu entry\n        if (isBrowserStorageDrive && defaultFileBrowser) {\n            defaultFileBrowser.addClass('jp-BrowserStorageDrive');\n        }\n        const clearData = async (options) => {\n            const { clearSettings, clearContents } = options;\n            const promises = [];\n            if (clearContents && isBrowserStorageDrive) {\n                const browserStorageDrive = defaultDrive;\n                promises.push(browserStorageDrive.clearStorage());\n            }\n            if (clearSettings && isLiteSettingsManager) {\n                const settings = settingManager;\n                promises.push(settings.clear());\n            }\n            await Promise.all(promises);\n            window.location.reload();\n        };\n        commands.addCommand(CommandIDs.clearBrowserData, {\n            label: trans.__('Clear Browser Data'),\n            icon: (args) => (args['isPalette'] ? undefined : clearIcon),\n            execute: async () => {\n                // Pass the availability information to the dialog\n                const availability = {\n                    canClearSettings: isLiteSettingsManager && !!settingManager,\n                    canClearContents: isBrowserStorageDrive && !!defaultDrive,\n                };\n                const body = new ClearDataDialog({\n                    translator,\n                    availability,\n                });\n                const result = await showDialog({\n                    title: trans.__('Clear Browser Data'),\n                    body,\n                    buttons: [\n                        Dialog.cancelButton({ label: trans.__('Cancel') }),\n                        Dialog.warnButton({ label: trans.__('Clear') }),\n                    ],\n                });\n                if (result.button.accept) {\n                    return clearData(body.getValue());\n                }\n                return await Promise.resolve();\n            },\n        });\n        if (palette) {\n            palette.addItem({ command: CommandIDs.clearBrowserData, category });\n        }\n    },\n};\nconst plugins = [\n    about,\n    clearBrowserData,\n    downloadPlugin,\n    liteLogo,\n    lspConnectionManager,\n    notifyCommands,\n    opener,\n    serviceWorkerManagerPlugin,\n    sessionContextPatch,\n    shareFile,\n];\nexport default plugins;\n//# sourceMappingURL=index.js.map"],"names":["ClearDataDialog","ReactWidget","constructor","options","super","this","_translator","translator","_availability","availability","canClearSettings","canClearContents","_settingsChecked","_contentsChecked","addClass","getValue","clearSettings","clearContents","render","ClearDataDialogComponent","settingsChecked","contentsChecked","setSettingsChecked","checked","update","setContentsChecked","props","trans","load","className","__","id","type","onChange","e","target","disabled","htmlFor","URL_PATTERN","RegExp","CommandIDs","about","docmanagerDownload","filebrowserDownload","copyShareableLink","clearBrowserData","I18N_BUNDLE","autoStart","requires","ITranslator","optional","ICommandPalette","IMainMenu","activate","app","palette","menu","commands","category","addCommand","label","name","execute","versionNumber","version","versionInfo","title","liteWordmark","react","height","width","externalLinks","href","rel","copyright","body","showDialog","buttons","Dialog","createButton","addItem","command","helpMenu","addGroup","downloadPlugin","IDocumentManager","IFileBrowserFactory","docManager","factory","serviceManager","shell","contents","isEnabled","currentWidget","contextForWidget","downloadContent","async","contentPath","fileName","_a","_b","_c","model","get","content","element","document","createElement","format","mimetype","mime","JSON","stringify","encodeURIComponent","Error","download","appendChild","click","removeChild","caption","current","context","okButton","save","path","tracker","widget","Array","from","selectedItems","forEach","item","icon","downloadIcon","bindprops","stylesheet","liteLogo","ILabShell","labShell","logo","Widget","liteIcon","container","node","elementPosition","margin","add","rank","lspConnectionManager","IWidgetLSPAdapterTracker","provides","ILSPDocumentConnectionManager","languageServerManager","LanguageServerManager","fetchSessions","settings","serverSettings","DocumentConnectionManager","adapterTracker","notifyCommands","layoutModified","connect","notifyCommandChanged","IRouter","ISettingRegistry","router","settingRegistry","docRegistry","args","parsed","request","search","match","urlParams","URLSearchParams","paths","getAll","length","files","map","decodeURIComponent","started","then","page","PageConfig","getOption","file","appUrl","defaultWidgetFactory","baseUrl","getBaseUrl","url","URL","URLExt","join","searchParams","append","window","location","toString","defaultFactory","defaultViewers","composite","getFileTypesForPath","ft","undefined","getWidgetFactory","open","ref","delete","pathname","navigate","skipRouting","showInBrowser","currentChanged","disconnect","register","pattern","serviceWorkerManagerPlugin","IServiceWorkerManager","IKernelClient","kernelClient","serviceWorkerManager","ServiceWorkerManager","registerStdinHandler","handleStdin","bind","sessionContextPatch","IDocumentWidgetOpener","widgetOpener","opened","_","driveName","sessionContext","shareFile","models","filter","Clipboard","copyToSystem","isVisible","linkIcon","ISettingManager","IDefaultDrive","IDefaultFileBrowser","settingManager","defaultDrive","defaultFileBrowser","isBrowserStorageDrive","BrowserStorageDrive","isLiteSettingsManager","Settings","clearIcon","cancelButton","warnButton","button","accept","promises","browserStorageDrive","push","clearStorage","clear","Promise","all","reload","clearData","resolve"],"sourceRoot":""}