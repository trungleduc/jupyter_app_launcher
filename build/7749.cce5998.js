"use strict";(self.webpackChunk_JUPYTERLAB_CORE_OUTPUT=self.webpackChunk_JUPYTERLAB_CORE_OUTPUT||[]).push([[7749,3543],{73543:(t,e,a)=>{a.r(e),a.d(e,{Settings:()=>l});var s=a(60649),r=a(43234),i=a(5406),n=a(60850);const o="JupyterLite Storage";class l extends r.SettingManager{constructor(t){super({serverSettings:t.serverSettings}),this._storageName=o,this._storageDrivers=null,this._localforage=t.localforage,this._storageName=t.storageName||o,this._storageDrivers=t.storageDrivers||null,this._ready=new i.PromiseDelegate,this.initialize().catch(console.warn)}get ready(){return this._ready.promise}get storage(){return this.ready.then((()=>this._storage))}async initialize(){await this.initStorage(),this._ready.resolve(void 0)}async initStorage(){this._storage=this.defaultSettingsStorage()}get defaultStorageOptions(){var t;const e=(null===(t=this._storageDrivers)||void 0===t?void 0:t.length)?this._storageDrivers:null;return{version:1,name:this._storageName,...e?{driver:e}:{}}}defaultSettingsStorage(){return this._localforage.createInstance({description:"Offline Storage for Settings",storeName:"settings",...this.defaultStorageOptions})}async fetch(t){const e=(await this.list()).values.find((e=>e.id===t));if(!e)throw new Error(`Setting ${t} not found`);return e}async list(t){var e,a;const s=await this._getAll("all.json");let r=[];try{r=await this._getAll("all_federated.json")}catch{}const i=s.concat(r),o=await this.storage,l=await Promise.all(i.map((async t=>{var e;const{id:a}=t,s=null!==(e=await o.getItem(a))&&void 0!==e?e:t.raw;return{...g.override(t),raw:s,settings:n.parse(s)}}))),c=null!==(e=l.map((t=>t.id)))&&void 0!==e?e:[];let h=[];return t||(h=null!==(a=l.map((t=>(t.data={composite:{},user:{}},t))))&&void 0!==a?a:[]),{ids:c,values:h}}async save(t,e){await(await this.storage).setItem(t,e)}async clear(){await(await this.storage).clear()}async _getAll(t){var e;const a=null!==(e=s.PageConfig.getOption("settingsUrl"))&&void 0!==e?e:"/";return await(await fetch(s.URLExt.join(a,t))).json()}}var g;!function(t){const e=JSON.parse(s.PageConfig.getOption("settingsOverrides")||"{}");t.override=function(t){if(e[t.id]){t.schema.properties||(t.schema.properties={});for(const[a,s]of Object.entries(e[t.id]||{}))t.schema.properties[a].default=s}return t}}(g||(g={}))}}]);
//# sourceMappingURL=7749.cce5998.js.map