{"version":3,"file":"9037.0e4646e.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@codemirror/legacy-modes/mode/factor.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@codemirror/legacy-modes/mode/simple-mode.js"],"sourcesContent":["import {simpleMode} from \"./simple-mode.js\"\n\nexport const factor = simpleMode({\n    start: [\n      // comments\n      {regex: /#?!.*/, token: \"comment\"},\n      // strings \"\"\", multiline --> state\n      {regex: /\"\"\"/, token: \"string\", next: \"string3\"},\n      {regex: /(STRING:)(\\s)/, token: [\"keyword\", null], next: \"string2\"},\n      {regex: /\\S*?\"/, token: \"string\", next: \"string\"},\n      // numbers: dec, hex, unicode, bin, fractional, complex\n      {regex: /(?:0x[\\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\\-?\\d+.?\\d*)(?=\\s)/, token: \"number\"},\n      //{regex: /[+-]?/} //fractional\n      // definition: defining word, defined word, etc\n      {regex: /((?:GENERIC)|\\:?\\:)(\\s+)(\\S+)(\\s+)(\\()/, token: [\"keyword\", null, \"def\", null, \"bracket\"], next: \"stack\"},\n      // method definition: defining word, type, defined word, etc\n      {regex: /(M\\:)(\\s+)(\\S+)(\\s+)(\\S+)/, token: [\"keyword\", null, \"def\", null, \"tag\"]},\n      // vocabulary using --> state\n      {regex: /USING\\:/, token: \"keyword\", next: \"vocabulary\"},\n      // vocabulary definition/use\n      {regex: /(USE\\:|IN\\:)(\\s+)(\\S+)(?=\\s|$)/, token: [\"keyword\", null, \"tag\"]},\n      // definition: a defining word, defined word\n      {regex: /(\\S+\\:)(\\s+)(\\S+)(?=\\s|$)/, token: [\"keyword\", null, \"def\"]},\n      // \"keywords\", incl. ; t f . [ ] { } defining words\n      {regex: /(?:;|\\\\|t|f|if|loop|while|until|do|PRIVATE>|<PRIVATE|\\.|\\S*\\[|\\]|\\S*\\{|\\})(?=\\s|$)/, token: \"keyword\"},\n      // <constructors> and the like\n      {regex: /\\S+[\\)>\\.\\*\\?]+(?=\\s|$)/, token: \"builtin\"},\n      {regex: /[\\)><]+\\S+(?=\\s|$)/, token: \"builtin\"},\n      // operators\n      {regex: /(?:[\\+\\-\\=\\/\\*<>])(?=\\s|$)/, token: \"keyword\"},\n      // any id (?)\n      {regex: /\\S+/, token: \"variable\"},\n      {regex: /\\s+|./, token: null}\n    ],\n    vocabulary: [\n      {regex: /;/, token: \"keyword\", next: \"start\"},\n      {regex: /\\S+/, token: \"tag\"},\n      {regex: /\\s+|./, token: null}\n    ],\n    string: [\n      {regex: /(?:[^\\\\]|\\\\.)*?\"/, token: \"string\", next: \"start\"},\n      {regex: /.*/, token: \"string\"}\n    ],\n    string2: [\n      {regex: /^;/, token: \"keyword\", next: \"start\"},\n      {regex: /.*/, token: \"string\"}\n    ],\n    string3: [\n      {regex: /(?:[^\\\\]|\\\\.)*?\"\"\"/, token: \"string\", next: \"start\"},\n      {regex: /.*/, token: \"string\"}\n    ],\n    stack: [\n      {regex: /\\)/, token: \"bracket\", next: \"start\"},\n      {regex: /--/, token: \"bracket\"},\n      {regex: /\\S+/, token: \"meta\"},\n      {regex: /\\s+|./, token: null}\n    ],\n    languageData: {\n      name: \"factor\",\n      dontIndentStates: [\"start\", \"vocabulary\", \"string\", \"string3\", \"stack\"],\n      commentTokens: {line: \"!\"}\n    }\n  });\n","export function simpleMode(states) {\n  ensureState(states, \"start\");\n  var states_ = {}, meta = states.languageData || {}, hasIndentation = false;\n  for (var state in states) if (state != meta && states.hasOwnProperty(state)) {\n    var list = states_[state] = [], orig = states[state];\n    for (var i = 0; i < orig.length; i++) {\n      var data = orig[i];\n      list.push(new Rule(data, states));\n      if (data.indent || data.dedent) hasIndentation = true;\n    }\n  }\n  return {\n    name: meta.name,\n    startState: function() {\n      return {state: \"start\", pending: null, indent: hasIndentation ? [] : null};\n    },\n    copyState: function(state) {\n      var s = {state: state.state, pending: state.pending, indent: state.indent && state.indent.slice(0)};\n      if (state.stack)\n        s.stack = state.stack.slice(0);\n      return s;\n    },\n    token: tokenFunction(states_),\n    indent: indentFunction(states_, meta),\n    mergeTokens: meta.mergeTokens,\n    languageData: meta\n  }\n};\n\nfunction ensureState(states, name) {\n  if (!states.hasOwnProperty(name))\n    throw new Error(\"Undefined state \" + name + \" in simple mode\");\n}\n\nfunction toRegex(val, caret) {\n  if (!val) return /(?:)/;\n  var flags = \"\";\n  if (val instanceof RegExp) {\n    if (val.ignoreCase) flags = \"i\";\n    val = val.source;\n  } else {\n    val = String(val);\n  }\n  return new RegExp((caret === false ? \"\" : \"^\") + \"(?:\" + val + \")\", flags);\n}\n\nfunction asToken(val) {\n  if (!val) return null;\n  if (val.apply) return val\n  if (typeof val == \"string\") return val.replace(/\\./g, \" \");\n  var result = [];\n  for (var i = 0; i < val.length; i++)\n    result.push(val[i] && val[i].replace(/\\./g, \" \"));\n  return result;\n}\n\nfunction Rule(data, states) {\n  if (data.next || data.push) ensureState(states, data.next || data.push);\n  this.regex = toRegex(data.regex);\n  this.token = asToken(data.token);\n  this.data = data;\n}\n\nfunction tokenFunction(states) {\n  return function(stream, state) {\n    if (state.pending) {\n      var pend = state.pending.shift();\n      if (state.pending.length == 0) state.pending = null;\n      stream.pos += pend.text.length;\n      return pend.token;\n    }\n\n    var curState = states[state.state];\n    for (var i = 0; i < curState.length; i++) {\n      var rule = curState[i];\n      var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);\n      if (matches) {\n        if (rule.data.next) {\n          state.state = rule.data.next;\n        } else if (rule.data.push) {\n          (state.stack || (state.stack = [])).push(state.state);\n          state.state = rule.data.push;\n        } else if (rule.data.pop && state.stack && state.stack.length) {\n          state.state = state.stack.pop();\n        }\n\n        if (rule.data.indent)\n          state.indent.push(stream.indentation() + stream.indentUnit);\n        if (rule.data.dedent)\n          state.indent.pop();\n        var token = rule.token\n        if (token && token.apply) token = token(matches)\n        if (matches.length > 2 && rule.token && typeof rule.token != \"string\") {\n          state.pending = [];\n          for (var j = 2; j < matches.length; j++)\n            if (matches[j])\n              state.pending.push({text: matches[j], token: rule.token[j - 1]});\n          stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));\n          return token[0];\n        } else if (token && token.join) {\n          return token[0];\n        } else {\n          return token;\n        }\n      }\n    }\n    stream.next();\n    return null;\n  };\n}\n\nfunction indentFunction(states, meta) {\n  return function(state, textAfter) {\n    if (state.indent == null || meta.dontIndentStates && meta.dontIndentStates.indexOf(state.state) > -1)\n      return null\n\n    var pos = state.indent.length - 1, rules = states[state.state];\n    scan: for (;;) {\n      for (var i = 0; i < rules.length; i++) {\n        var rule = rules[i];\n        if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {\n          var m = rule.regex.exec(textAfter);\n          if (m && m[0]) {\n            pos--;\n            if (rule.next || rule.push) rules = states[rule.next || rule.push];\n            textAfter = textAfter.slice(m[0].length);\n            continue scan;\n          }\n        }\n      }\n      break;\n    }\n    return pos < 0 ? 0 : state.indent[pos];\n  };\n}\n"],"names":["factor","start","regex","token","next","vocabulary","string","string2","string3","stack","languageData","name","dontIndentStates","commentTokens","line","simpleMode","states","ensureState","states_","meta","hasIndentation","state","hasOwnProperty","list","orig","i","length","data","push","Rule","indent","dedent","startState","pending","copyState","s","slice","tokenFunction","indentFunction","mergeTokens","Error","this","val","caret","flags","RegExp","ignoreCase","source","String","toRegex","apply","replace","result","asToken","stream","pend","shift","pos","text","curState","rule","matches","sol","match","pop","indentation","indentUnit","j","backUp","join","textAfter","indexOf","rules","scan","dedentIfLineStart","m","exec"],"sourceRoot":""}