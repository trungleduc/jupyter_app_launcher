"use strict";(self.webpackChunk_JUPYTERLAB_CORE_OUTPUT=self.webpackChunk_JUPYTERLAB_CORE_OUTPUT||[]).push([[7561],{20190:(e,n,t)=>{t.d(n,{Z:()=>i});var r=t(52390);const i=function(e){return(0,r.Z)(e,4)}},7561:(e,n,t)=>{t.r(n),t.d(n,{render:()=>k});var r=t(52017),i=(t(83133),t(41921)),a=t(81861),o=(t(62072),t(39769),t(42626),t(86906)),c=t(24276),d=t(52307),s=t(20190),g=t(12930);function l(e){var n={options:{directed:e.isDirected(),multigraph:e.isMultigraph(),compound:e.isCompound()},nodes:f(e),edges:h(e)};return d.Z(e.graph())||(n.value=s.Z(e.graph())),n}function f(e){return g.Z(e.nodes(),(function(n){var t=e.node(n),r=e.parent(n),i={v:n};return d.Z(t)||(i.value=t),d.Z(r)||(i.parent=r),i}))}function h(e){return g.Z(e.edges(),(function(n){var t=e.edge(n),r={v:n.v,w:n.w};return d.Z(n.name)||(r.name=n.name),d.Z(t)||(r.value=t),r}))}t(11109);var u=t(67406),p=new Map,w=new Map,M=new Map,v=(0,o.eW)((()=>{w.clear(),M.clear(),p.clear()}),"clear"),y=(0,o.eW)(((e,n)=>{const t=w.get(n)||[];return o.cM.trace("In isDescendant",n," ",e," = ",t.includes(e)),t.includes(e)}),"isDescendant"),X=(0,o.eW)(((e,n)=>{const t=w.get(n)||[];return o.cM.info("Descendants of ",n," is ",t),o.cM.info("Edge is ",e),e.v!==n&&e.w!==n&&(t?t.includes(e.v)||y(e.v,n)||y(e.w,n)||t.includes(e.w):(o.cM.debug("Tilt, ",n,",not in descendants"),!1))}),"edgeInCluster"),m=(0,o.eW)(((e,n,t,r)=>{o.cM.warn("Copying children of ",e,"root",r,"data",n.node(e),r);const i=n.children(e)||[];e!==r&&i.push(e),o.cM.warn("Copying (nodes) clusterId",e,"nodes",i),i.forEach((i=>{if(n.children(i).length>0)m(i,n,t,r);else{const a=n.node(i);o.cM.info("cp ",i," to ",r," with parent ",e),t.setNode(i,a),r!==n.parent(i)&&(o.cM.warn("Setting parent",i,n.parent(i)),t.setParent(i,n.parent(i))),e!==r&&i!==e?(o.cM.debug("Setting parent",i,e),t.setParent(i,e)):(o.cM.info("In copy ",e,"root",r,"data",n.node(e),r),o.cM.debug("Not Setting parent for node=",i,"cluster!==rootId",e!==r,"node!==clusterId",i!==e));const c=n.edges(i);o.cM.debug("Copying Edges",c),c.forEach((i=>{o.cM.info("Edge",i);const a=n.edge(i.v,i.w,i.name);o.cM.info("Edge data",a,r);try{X(i,r)?(o.cM.info("Copying as ",i.v,i.w,a,i.name),t.setEdge(i.v,i.w,a,i.name),o.cM.info("newGraph edges ",t.edges(),t.edge(t.edges()[0]))):o.cM.info("Skipping copy of edge ",i.v,"--\x3e",i.w," rootId: ",r," clusterId:",e)}catch(e){o.cM.error(e)}}))}o.cM.debug("Removing node",i),n.removeNode(i)}))}),"copy"),E=(0,o.eW)(((e,n)=>{const t=n.children(e);let r=[...t];for(const i of t)M.set(i,e),r=[...r,...E(i,n)];return r}),"extractDescendants"),b=(0,o.eW)(((e,n,t)=>{const r=e.edges().filter((e=>e.v===n||e.w===n)),i=e.edges().filter((e=>e.v===t||e.w===t)),a=r.map((e=>({v:e.v===n?t:e.v,w:e.w===n?n:e.w}))),o=i.map((e=>({v:e.v,w:e.w})));return a.filter((e=>o.some((n=>e.v===n.v&&e.w===n.w))))}),"findCommonEdges"),N=(0,o.eW)(((e,n,t)=>{const r=n.children(e);if(o.cM.trace("Searching children of id ",e,r),r.length<1)return e;let i;for(const e of r){const r=N(e,n,t),a=b(n,t,r);if(r){if(!(a.length>0))return r;i=r}}return i}),"findNonClusterChild"),C=(0,o.eW)((e=>p.has(e)&&p.get(e).externalConnections&&p.has(e)?p.get(e).id:e),"getAnchorId"),S=(0,o.eW)(((e,n)=>{if(!e||n>10)o.cM.debug("Opting out, no graph ");else{o.cM.debug("Opting in, graph "),e.nodes().forEach((function(n){e.children(n).length>0&&(o.cM.warn("Cluster identified",n," Replacement id in edges: ",N(n,e,n)),w.set(n,E(n,e)),p.set(n,{id:N(n,e,n),clusterData:e.node(n)}))})),e.nodes().forEach((function(n){const t=e.children(n),r=e.edges();t.length>0?(o.cM.debug("Cluster identified",n,w),r.forEach((e=>{y(e.v,n)^y(e.w,n)&&(o.cM.warn("Edge: ",e," leaves cluster ",n),o.cM.warn("Descendants of XXX ",n,": ",w.get(n)),p.get(n).externalConnections=!0)}))):o.cM.debug("Not a cluster ",n,w)}));for(let n of p.keys()){const t=p.get(n).id,r=e.parent(t);r!==n&&p.has(r)&&!p.get(r).externalConnections&&(p.get(n).id=r)}e.edges().forEach((function(n){const t=e.edge(n);o.cM.warn("Edge "+n.v+" -> "+n.w+": "+JSON.stringify(n)),o.cM.warn("Edge "+n.v+" -> "+n.w+": "+JSON.stringify(e.edge(n)));let r=n.v,i=n.w;if(o.cM.warn("Fix XXX",p,"ids:",n.v,n.w,"Translating: ",p.get(n.v)," --- ",p.get(n.w)),p.get(n.v)||p.get(n.w)){if(o.cM.warn("Fixing and trying - removing XXX",n.v,n.w,n.name),r=C(n.v),i=C(n.w),e.removeEdge(n.v,n.w,n.name),r!==n.v){const i=e.parent(r);p.get(i).externalConnections=!0,t.fromCluster=n.v}if(i!==n.w){const r=e.parent(i);p.get(r).externalConnections=!0,t.toCluster=n.w}o.cM.warn("Fix Replacing with XXX",r,i,n.name),e.setEdge(r,i,t,n.name)}})),o.cM.warn("Adjusted Graph",l(e)),x(e,0),o.cM.trace(p)}}),"adjustClustersAndEdges"),x=(0,o.eW)(((e,n)=>{if(o.cM.warn("extractor - ",n,l(e),e.children("D")),n>10)return void o.cM.error("Bailing out");let t=e.nodes(),r=!1;for(const n of t){const t=e.children(n);r=r||t.length>0}if(r){o.cM.debug("Nodes = ",t,n);for(const r of t)if(o.cM.debug("Extracting node",r,p,p.has(r)&&!p.get(r).externalConnections,!e.parent(r),e.node(r),e.children("D")," Depth ",n),p.has(r))if(!p.get(r).externalConnections&&e.children(r)&&e.children(r).length>0){o.cM.warn("Cluster without external connections, without a parent and with children",r,n);let t="TB"===e.graph().rankdir?"LR":"TB";p.get(r)?.clusterData?.dir&&(t=p.get(r).clusterData.dir,o.cM.warn("Fixing dir",p.get(r).clusterData.dir,t));const i=new u.k({multigraph:!0,compound:!0}).setGraph({rankdir:t,nodesep:50,ranksep:50,marginx:8,marginy:8}).setDefaultEdgeLabel((function(){return{}}));o.cM.warn("Old graph before copy",l(e)),m(r,e,i,r),e.setNode(r,{clusterNode:!0,id:r,clusterData:p.get(r).clusterData,label:p.get(r).label,graph:i}),o.cM.warn("New graph after copy node: (",r,")",l(i)),o.cM.debug("Old graph after copy",l(e))}else o.cM.warn("Cluster ** ",r," **not meeting the criteria !externalConnections:",!p.get(r).externalConnections," no parent: ",!e.parent(r)," children ",e.children(r)&&e.children(r).length>0,e.children("D"),n),o.cM.debug(p);else o.cM.debug("Not a cluster",r,n);t=e.nodes(),o.cM.warn("New list of nodes",t);for(const r of t){const t=e.node(r);o.cM.warn(" Now next level",r,t),t?.clusterNode&&x(t.graph,n+1)}}else o.cM.debug("Done, no node has children",e.nodes())}),"extractor"),I=(0,o.eW)(((e,n)=>{if(0===n.length)return[];let t=Object.assign([],n);return n.forEach((n=>{const r=e.children(n),i=I(e,r);t=[...t,...i]})),t}),"sorter"),D=(0,o.eW)((e=>I(e,e.children())),"sortNodesByHierarchy"),O=(0,o.eW)((async(e,n,t,d,s,g)=>{o.cM.warn("Graph in recursive render:XAX",l(n),s);const f=n.graph().rankdir;o.cM.trace("Dir in recursive render - dir:",f);const h=e.insert("g").attr("class","root");n.nodes()?o.cM.info("Recursive render XXX",n.nodes()):o.cM.info("No nodes found for",n),n.edges().length>0&&o.cM.info("Recursive edges",n.edge(n.edges()[0]));const u=h.insert("g").attr("class","clusters"),w=h.insert("g").attr("class","edgePaths"),M=h.insert("g").attr("class","edgeLabels"),v=h.insert("g").attr("class","nodes");await Promise.all(n.nodes().map((async function(e){const r=n.node(e);if(void 0!==s){const t=JSON.parse(JSON.stringify(s.clusterData));o.cM.trace("Setting data for parent cluster XXX\n Node.id = ",e,"\n data=",t.height,"\nParent cluster",s.height),n.setNode(s.id,t),n.parent(e)||(o.cM.trace("Setting parent",e,s.id),n.setParent(e,s.id,t))}if(o.cM.info("(Insert) Node XXX"+e+": "+JSON.stringify(n.node(e))),r?.clusterNode){o.cM.info("Cluster identified XBX",e,r.width,n.node(e));const{ranksep:a,nodesep:c}=n.graph();r.graph.setGraph({...r.graph.graph(),ranksep:a+25,nodesep:c});const s=await O(v,r.graph,t,d,n.node(e),g),l=s.elem;(0,i.jr)(r,l),r.diff=s.diff||0,o.cM.info("New compound node after recursive render XAX",e,"width",r.width,"height",r.height),(0,i.Yn)(l,r)}else n.children(e).length>0?(o.cM.trace("Cluster - the non recursive path XBX",e,r.id,r,r.width,"Graph:",n),o.cM.trace(N(r.id,n)),p.set(r.id,{id:N(r.id,n),node:r})):(o.cM.trace("Node - the non recursive path XAX",e,v,n.node(e),f),await(0,i.Lf)(v,n.node(e),{config:g,dir:f}))})));const y=(0,o.eW)((async()=>{const e=n.edges().map((async function(e){const t=n.edge(e.v,e.w,e.name);o.cM.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e)),o.cM.info("Edge "+e.v+" -> "+e.w+": ",e," ",JSON.stringify(n.edge(e))),o.cM.info("Fix",p,"ids:",e.v,e.w,"Translating: ",p.get(e.v),p.get(e.w)),await(0,r.I_)(M,t)}));await Promise.all(e)}),"processEdges");await y(),o.cM.info("Graph before layout:",JSON.stringify(l(n))),o.cM.info("############################################# XXX"),o.cM.info("###                Layout                 ### XXX"),o.cM.info("############################################# XXX"),(0,c.bK)(n),o.cM.info("Graph after layout:",JSON.stringify(l(n)));let X=0,{subGraphTitleTotalMargin:m}=(0,a.L)(g);return await Promise.all(D(n).map((async function(e){const t=n.node(e);if(o.cM.info("Position XBX => "+e+": ("+t.x,","+t.y,") width: ",t.width," height: ",t.height),t?.clusterNode)t.y+=m,o.cM.info("A tainted cluster node XBX1",e,t.id,t.width,t.height,t.x,t.y,n.parent(e)),p.get(t.id).node=t,(0,i.aH)(t);else if(n.children(e).length>0){o.cM.info("A pure cluster node XBX1",e,t.id,t.x,t.y,t.width,t.height,n.parent(e)),t.height+=m,n.node(t.parentId);const r=t?.padding/2||0,a=t?.labelBBox?.height||0,c=a-r||0;o.cM.debug("OffsetY",c,"labelHeight",a,"halfPadding",r),await(0,i.us)(u,t),p.get(t.id).node=t}else{const e=n.node(t.parentId);t.y+=m/2,o.cM.info("A regular node XBX1 - using the padding",t.id,"parent",t.parentId,t.width,t.height,t.x,t.y,"offsetY",t.offsetY,"parent",e,e?.offsetY,t),(0,i.aH)(t)}}))),n.edges().forEach((function(e){const i=n.edge(e);o.cM.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(i),i),i.points.forEach((e=>e.y+=m/2));const a=n.node(e.v);var c=n.node(e.w);const s=(0,r.QP)(w,i,p,t,a,c,d);(0,r.Jj)(i,s)})),n.nodes().forEach((function(e){const t=n.node(e);o.cM.info(e,t.type,t.diff),t.isGroup&&(X=t.diff)})),o.cM.warn("Returning from recursive render XAX",h,X),{elem:h,diff:X}}),"recursiveRender"),k=(0,o.eW)((async(e,n)=>{const t=new u.k({multigraph:!0,compound:!0}).setGraph({rankdir:e.direction,nodesep:e.config?.nodeSpacing||e.config?.flowchart?.nodeSpacing||e.nodeSpacing,ranksep:e.config?.rankSpacing||e.config?.flowchart?.rankSpacing||e.rankSpacing,marginx:8,marginy:8}).setDefaultEdgeLabel((function(){return{}})),a=n.select("g");(0,r.DQ)(a,e.markers,e.type,e.diagramId),(0,i.gU)(),(0,r.ZH)(),(0,i.ZH)(),v(),e.nodes.forEach((e=>{t.setNode(e.id,{...e}),e.parentId&&t.setParent(e.id,e.parentId)})),o.cM.debug("Edges:",e.edges),e.edges.forEach((e=>{if(e.start===e.end){const n=e.start,r=n+"---"+n+"---1",i=n+"---"+n+"---2",a=t.node(n);t.setNode(r,{domId:r,id:r,parentId:a.parentId,labelStyle:"",label:"",padding:0,shape:"labelRect",style:"",width:10,height:10}),t.setParent(r,a.parentId),t.setNode(i,{domId:i,id:i,parentId:a.parentId,labelStyle:"",padding:0,shape:"labelRect",label:"",style:"",width:10,height:10}),t.setParent(i,a.parentId);const o=structuredClone(e),c=structuredClone(e),d=structuredClone(e);o.label="",o.arrowTypeEnd="none",o.id=n+"-cyclic-special-1",c.arrowTypeStart="none",c.arrowTypeEnd="none",c.id=n+"-cyclic-special-mid",d.label="",a.isGroup&&(o.fromCluster=n,d.toCluster=n),d.id=n+"-cyclic-special-2",d.arrowTypeStart="none",t.setEdge(n,r,o,n+"-cyclic-special-0"),t.setEdge(r,i,c,n+"-cyclic-special-1"),t.setEdge(i,n,d,n+"-cyc<lic-special-2")}else t.setEdge(e.start,e.end,{...e},e.id)})),o.cM.warn("Graph at first:",JSON.stringify(l(t))),S(t),o.cM.warn("Graph after XAX:",JSON.stringify(l(t)));const c=(0,o.nV)();await O(a,t,e.type,e.diagramId,void 0,c)}),"render")}}]);
//# sourceMappingURL=7561.5d6a55c.js.map