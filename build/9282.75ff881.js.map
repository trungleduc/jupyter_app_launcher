{"version":3,"file":"9282.75ff881.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/repl-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ILabStatus, IRouter, JupyterFrontEnd, Router, } from '@jupyterlab/application';\nimport { IThemeManager, IToolbarWidgetRegistry } from '@jupyterlab/apputils';\nimport { IConsoleTracker } from '@jupyterlab/console';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { SingleWidgetApp } from '@jupyterlite/application';\nimport { liteIcon } from '@jupyterlite/ui-components';\nimport { Widget } from '@lumino/widgets';\n/**\n * The name of the translation bundle for internationalized strings.\n */\nconst I18N_BUNDLE = 'jupyterlite';\n/**\n * A plugin to add buttons to the console toolbar.\n */\nconst buttons = {\n    id: '@jupyterlite/repl-extension:buttons',\n    autoStart: true,\n    requires: [ITranslator],\n    optional: [IToolbarWidgetRegistry],\n    activate: (app, translator, toolbarRegistry) => {\n        const trans = translator.load(I18N_BUNDLE);\n        if (toolbarRegistry) {\n            const factory = 'ConsolePanel';\n            toolbarRegistry.addFactory(factory, 'liteIcon', (panel) => {\n                const node = document.createElement('a');\n                node.title = trans.__('Powered by JupyterLite');\n                node.href = 'https://github.com/jupyterlite/jupyterlite';\n                node.target = '_blank';\n                node.rel = 'noopener noreferrer';\n                const poweredBy = new Widget({ node });\n                liteIcon.element({\n                    container: node,\n                    elementPosition: 'center',\n                    margin: '2px',\n                    height: 'auto',\n                    width: '16px',\n                });\n                poweredBy.addClass('jp-PoweredBy');\n                return poweredBy;\n            });\n        }\n    },\n};\n/**\n * A plugin to open a code console and\n * parse custom parameters from the query string arguments.\n */\nconst consolePlugin = {\n    id: '@jupyterlite/repl-extension:console',\n    autoStart: true,\n    optional: [IConsoleTracker, IThemeManager],\n    activate: (app, tracker, themeManager) => {\n        var _a, _b;\n        if (!tracker) {\n            return;\n        }\n        const { commands, started } = app;\n        const search = window.location.search;\n        const urlParams = new URLSearchParams(search);\n        const code = urlParams.getAll('code');\n        const execute = urlParams.get('execute');\n        const kernel = urlParams.get('kernel') || undefined;\n        const theme = (_a = urlParams.get('theme')) === null || _a === void 0 ? void 0 : _a.trim();\n        const toolbar = urlParams.get('toolbar');\n        // normalize config options\n        const clearCellsOnExecute = urlParams.get('clearCellsOnExecute') === '1' || undefined;\n        const clearCodeContentOnExecute = urlParams.get('clearCodeContentOnExecute') === '0' ? false : undefined;\n        const hideCodeInput = urlParams.get('hideCodeInput') === '1' || undefined;\n        const showBanner = urlParams.get('showBanner') === '0' ? false : undefined;\n        const position = (_b = urlParams.get('promptCellPosition')) !== null && _b !== void 0 ? _b : '';\n        const validPositions = ['top', 'bottom', 'left', 'right'];\n        const promptCellPosition = validPositions.includes(position)\n            ? position\n            : undefined;\n        started.then(async () => {\n            // create a new console at application startup\n            void commands.execute('console:create', {\n                kernelPreference: { name: kernel },\n            });\n        });\n        tracker.widgetAdded.connect(async (_, panel) => {\n            if (!toolbar) {\n                // hide the toolbar by default if not specified\n                panel.toolbar.dispose();\n            }\n            const { console: widget } = panel;\n            const { sessionContext } = widget;\n            await sessionContext.ready;\n            widget.setConfig({\n                clearCellsOnExecute,\n                clearCodeContentOnExecute,\n                hideCodeInput,\n                promptCellPosition,\n                showBanner,\n            });\n            // TODO: find a better way to make sure the banner is removed if showBanner is false\n            widget['_onKernelChanged']();\n            if (code.length > 0) {\n                if (execute === '0') {\n                    const codeContent = code.join('\\n');\n                    widget.replaceSelection(codeContent);\n                }\n                else {\n                    code.forEach((line) => widget.inject(line));\n                }\n            }\n        });\n        if (theme && themeManager) {\n            const themeName = decodeURIComponent(theme);\n            themeManager.setTheme(themeName);\n        }\n    },\n};\n/**\n * The default JupyterLab application status provider.\n */\nconst status = {\n    id: '@jupyterlite/repl-extension:status',\n    autoStart: true,\n    provides: ILabStatus,\n    requires: [ITranslator],\n    activate: (app, translator) => {\n        if (!(app instanceof SingleWidgetApp)) {\n            const trans = translator.load(I18N_BUNDLE);\n            throw new Error(trans.__('%1 must be activated in SingleWidgetApp.', status.id));\n        }\n        return app.status;\n    },\n};\n/**\n * The default paths for a single widget app.\n */\nconst paths = {\n    id: '@jupyterlite/repl-extension:paths',\n    autoStart: true,\n    provides: JupyterFrontEnd.IPaths,\n    activate: (app) => {\n        if (!(app instanceof SingleWidgetApp)) {\n            throw new Error(`${paths.id} must be activated in SingleWidgetApp.`);\n        }\n        return app.paths;\n    },\n};\n/**\n * The default URL router provider.\n */\nconst router = {\n    id: '@jupyterlite/repl-extension:router',\n    autoStart: true,\n    provides: IRouter,\n    requires: [JupyterFrontEnd.IPaths],\n    activate: (app, paths) => {\n        const { commands } = app;\n        const base = paths.urls.base;\n        const router = new Router({ base, commands });\n        void app.started.then(() => {\n            // Route the very first request on load.\n            void router.route();\n            // Route all pop state events.\n            window.addEventListener('popstate', () => {\n                void router.route();\n            });\n        });\n        return router;\n    },\n};\nconst plugins = [\n    buttons,\n    consolePlugin,\n    paths,\n    router,\n    status,\n];\nexport default plugins;\n//# sourceMappingURL=index.js.map"],"names":["I18N_BUNDLE","buttons","id","autoStart","requires","ITranslator","optional","IToolbarWidgetRegistry","activate","app","translator","toolbarRegistry","trans","load","factory","addFactory","panel","node","document","createElement","title","__","href","target","rel","poweredBy","Widget","liteIcon","element","container","elementPosition","margin","height","width","addClass","consolePlugin","IConsoleTracker","IThemeManager","tracker","themeManager","_a","_b","commands","started","search","window","location","urlParams","URLSearchParams","code","getAll","execute","get","kernel","undefined","theme","trim","toolbar","clearCellsOnExecute","clearCodeContentOnExecute","hideCodeInput","showBanner","position","promptCellPosition","includes","then","async","kernelPreference","name","widgetAdded","connect","_","dispose","console","widget","sessionContext","ready","setConfig","length","codeContent","join","replaceSelection","forEach","line","inject","themeName","decodeURIComponent","setTheme","status","provides","ILabStatus","SingleWidgetApp","Error","paths","JupyterFrontEnd","IPaths","router","IRouter","base","urls","Router","route","addEventListener"],"sourceRoot":""}