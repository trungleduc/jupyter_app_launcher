{"version":3,"file":"3543.92e5d37.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/settings/lib/settings.js"],"sourcesContent":["import { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { SettingManager } from '@jupyterlab/services';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport * as json5 from 'json5';\n/**\n * The name of the local storage.\n */\nconst DEFAULT_STORAGE_NAME = 'JupyterLite Storage';\n/**\n * A class to manage settings in the browser.\n */\nexport class Settings extends SettingManager {\n    /**\n     * Create a new settings service.\n     */\n    constructor(options) {\n        super({\n            serverSettings: options.serverSettings,\n        });\n        this._storageName = DEFAULT_STORAGE_NAME;\n        this._storageDrivers = null;\n        this._localforage = options.localforage;\n        this._storageName = options.storageName || DEFAULT_STORAGE_NAME;\n        this._storageDrivers = options.storageDrivers || null;\n        this._ready = new PromiseDelegate();\n        void this.initialize().catch(console.warn);\n    }\n    /**\n     * A promise that resolves when the settings storage is fully initialized\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    /**\n     * A lazy reference to initialized storage\n     */\n    get storage() {\n        return this.ready.then(() => this._storage);\n    }\n    /**\n     * Finish any initialization after server has started and all extensions are applied.\n     */\n    async initialize() {\n        await this.initStorage();\n        this._ready.resolve(void 0);\n    }\n    /**\n     * Prepare the storage\n     */\n    async initStorage() {\n        this._storage = this.defaultSettingsStorage();\n    }\n    /**\n     * Get default options for localForage instances\n     */\n    get defaultStorageOptions() {\n        var _a;\n        const driver = ((_a = this._storageDrivers) === null || _a === void 0 ? void 0 : _a.length) ? this._storageDrivers : null;\n        return {\n            version: 1,\n            name: this._storageName,\n            ...(driver ? { driver } : {}),\n        };\n    }\n    /**\n     * Create a settings store.\n     */\n    defaultSettingsStorage() {\n        return this._localforage.createInstance({\n            description: 'Offline Storage for Settings',\n            storeName: 'settings',\n            ...this.defaultStorageOptions,\n        });\n    }\n    /**\n     * Get settings by plugin id\n     *\n     * @param pluginId the id of the plugin\n     *\n     */\n    async fetch(pluginId) {\n        const all = await this.list();\n        const settings = all.values;\n        const setting = settings.find((setting) => {\n            return setting.id === pluginId;\n        });\n        if (!setting) {\n            throw new Error(`Setting ${pluginId} not found`);\n        }\n        return setting;\n    }\n    /**\n     * Get all the settings\n     */\n    async list(query) {\n        var _a, _b;\n        const allCore = await this._getAll('all.json');\n        let allFederated = [];\n        try {\n            allFederated = await this._getAll('all_federated.json');\n        }\n        catch {\n            // handle the case where there is no federated extension\n        }\n        // JupyterLab 4 expects all settings to be returned in one go\n        // so append the settings from federated plugins to the core ones\n        const all = allCore.concat(allFederated);\n        // return existing user settings if they exist\n        const storage = await this.storage;\n        const settings = await Promise.all(all.map(async (plugin) => {\n            var _a;\n            const { id } = plugin;\n            const raw = (_a = (await storage.getItem(id))) !== null && _a !== void 0 ? _a : plugin.raw;\n            return {\n                ...Private.override(plugin),\n                raw,\n                settings: json5.parse(raw),\n            };\n        }));\n        // format the settings\n        const ids = (_a = settings.map((plugin) => plugin.id)) !== null && _a !== void 0 ? _a : [];\n        let values = [];\n        if (!query) {\n            values =\n                (_b = settings.map((plugin) => {\n                    plugin.data = { composite: {}, user: {} };\n                    return plugin;\n                })) !== null && _b !== void 0 ? _b : [];\n        }\n        return { ids, values };\n    }\n    /**\n     * Save settings for a given plugin id\n     *\n     * @param pluginId The id of the plugin\n     * @param raw The raw settings\n     *\n     */\n    async save(id, raw) {\n        await (await this.storage).setItem(id, raw);\n    }\n    /**\n     * Clear all stored settings\n     *\n     * @returns A promise which resolves when the settings are cleared\n     */\n    async clear() {\n        await (await this.storage).clear();\n    }\n    /**\n     * Get all the settings for core or federated plugins\n     */\n    async _getAll(file) {\n        var _a;\n        const settingsUrl = (_a = PageConfig.getOption('settingsUrl')) !== null && _a !== void 0 ? _a : '/';\n        const all = (await (await fetch(URLExt.join(settingsUrl, file))).json());\n        return all;\n    }\n}\n/**\n * A namespace for private data\n */\nvar Private;\n(function (Private) {\n    const _overrides = JSON.parse(PageConfig.getOption('settingsOverrides') || '{}');\n    /**\n     * Override the defaults of the schema with ones from PageConfig\n     *\n     * @see https://github.com/jupyterlab/jupyterlab_server/blob/v2.5.2/jupyterlab_server/settings_handler.py#L216-L227\n     */\n    function override(plugin) {\n        if (_overrides[plugin.id]) {\n            if (!plugin.schema.properties) {\n                // probably malformed, or only provides keyboard shortcuts, etc.\n                plugin.schema.properties = {};\n            }\n            for (const [prop, propDefault] of Object.entries(_overrides[plugin.id] || {})) {\n                plugin.schema.properties[prop].default = propDefault;\n            }\n        }\n        return plugin;\n    }\n    Private.override = override;\n})(Private || (Private = {}));\n//# sourceMappingURL=settings.js.map"],"names":["DEFAULT_STORAGE_NAME","Settings","SettingManager","constructor","options","super","serverSettings","this","_storageName","_storageDrivers","_localforage","localforage","storageName","storageDrivers","_ready","PromiseDelegate","initialize","catch","console","warn","ready","promise","storage","then","_storage","initStorage","resolve","defaultSettingsStorage","defaultStorageOptions","_a","driver","length","version","name","createInstance","description","storeName","fetch","pluginId","setting","list","values","find","id","Error","query","_b","allCore","_getAll","allFederated","all","concat","settings","Promise","map","async","plugin","raw","getItem","Private","override","ids","data","composite","user","save","setItem","clear","file","settingsUrl","PageConfig","getOption","URLExt","join","json","_overrides","JSON","parse","schema","properties","prop","propDefault","Object","entries","default"],"sourceRoot":""}