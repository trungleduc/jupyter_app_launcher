{"version":3,"file":"6941.a94861a.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyter-notebook/notebook-extension/lib/trusted.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyter-notebook/notebook-extension/lib/index.js"],"sourcesContent":["import { ReactWidget } from '@jupyterlab/apputils';\nimport { NotebookActions } from '@jupyterlab/notebook';\nimport React, { useEffect, useState } from 'react';\n/**\n * Check if a notebook is trusted\n * @param notebook The notebook to check\n * @returns true if the notebook is trusted, false otherwise\n */\nconst isTrusted = (notebook) => {\n    const model = notebook.model;\n    if (!model) {\n        return false;\n    }\n    const cells = Array.from(model.cells);\n    let total = 0;\n    let trusted = 0;\n    for (const currentCell of cells) {\n        if (currentCell.type !== 'code') {\n            continue;\n        }\n        total++;\n        if (currentCell.trusted) {\n            trusted++;\n        }\n    }\n    return trusted === total;\n};\n/**\n * A React component to display the Trusted badge in the menu bar.\n * @param notebook The Notebook\n * @param translator The Translation service\n */\nconst TrustedButton = ({ notebook, translator, }) => {\n    const trans = translator.load('notebook');\n    const [trusted, setTrusted] = useState(isTrusted(notebook));\n    const checkTrust = () => {\n        const v = isTrusted(notebook);\n        setTrusted(v);\n    };\n    const trust = async () => {\n        await NotebookActions.trust(notebook, translator);\n        checkTrust();\n    };\n    useEffect(() => {\n        notebook.modelContentChanged.connect(checkTrust);\n        notebook.activeCellChanged.connect(checkTrust);\n        checkTrust();\n        return () => {\n            notebook.modelContentChanged.disconnect(checkTrust);\n            notebook.activeCellChanged.disconnect(checkTrust);\n        };\n    });\n    return (React.createElement(\"button\", { className: 'jp-NotebookTrustedStatus', style: !trusted ? { cursor: 'pointer' } : { cursor: 'help' }, onClick: () => !trusted && trust(), title: trusted\n            ? trans.__('JavaScript enabled for notebook display')\n            : trans.__('JavaScript disabled for notebook display') }, trusted ? trans.__('Trusted') : trans.__('Not Trusted')));\n};\n/**\n * A namespace for TrustedComponent static methods.\n */\nexport var TrustedComponent;\n(function (TrustedComponent) {\n    /**\n     * Create a new TrustedComponent\n     *\n     * @param notebook The notebook\n     * @param translator The translator\n     */\n    TrustedComponent.create = ({ notebook, translator, }) => {\n        return ReactWidget.create(React.createElement(TrustedButton, { notebook: notebook, translator: translator }));\n    };\n})(TrustedComponent || (TrustedComponent = {}));\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { DOMUtils, IToolbarWidgetRegistry, } from '@jupyterlab/apputils';\nimport { PageConfig, Text, Time, URLExt } from '@jupyterlab/coreutils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { NotebookPanel, INotebookTracker, INotebookTools, } from '@jupyterlab/notebook';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nimport { INotebookShell } from '@jupyter-notebook/application';\nimport { Poll } from '@lumino/polling';\nimport { Widget } from '@lumino/widgets';\nimport { TrustedComponent } from './trusted';\n/**\n * The class for kernel status errors.\n */\nconst KERNEL_STATUS_ERROR_CLASS = 'jp-NotebookKernelStatus-error';\n/**\n * The class for kernel status warnings.\n */\nconst KERNEL_STATUS_WARN_CLASS = 'jp-NotebookKernelStatus-warn';\n/**\n * The class for kernel status infos.\n */\nconst KERNEL_STATUS_INFO_CLASS = 'jp-NotebookKernelStatus-info';\n/**\n * The class to fade out the kernel status.\n */\nconst KERNEL_STATUS_FADE_OUT_CLASS = 'jp-NotebookKernelStatus-fade';\n/**\n * The class for scrolled outputs\n */\nconst SCROLLED_OUTPUTS_CLASS = 'jp-mod-outputsScrolled';\n/**\n * A plugin for the checkpoint indicator\n */\nconst checkpoints = {\n    id: '@jupyter-notebook/notebook-extension:checkpoints',\n    autoStart: true,\n    requires: [IDocumentManager, ITranslator],\n    optional: [INotebookShell, IToolbarWidgetRegistry],\n    activate: (app, docManager, translator, notebookShell, toolbarRegistry) => {\n        const { shell } = app;\n        const trans = translator.load('notebook');\n        const node = document.createElement('div');\n        if (toolbarRegistry) {\n            toolbarRegistry.addFactory('TopBar', 'checkpoint', (toolbar) => {\n                const widget = new Widget({ node });\n                widget.id = DOMUtils.createDomID();\n                widget.addClass('jp-NotebookCheckpoint');\n                return widget;\n            });\n        }\n        const onChange = async () => {\n            const current = shell.currentWidget;\n            if (!current) {\n                return;\n            }\n            const context = docManager.contextForWidget(current);\n            context === null || context === void 0 ? void 0 : context.fileChanged.disconnect(onChange);\n            context === null || context === void 0 ? void 0 : context.fileChanged.connect(onChange);\n            const checkpoints = await (context === null || context === void 0 ? void 0 : context.listCheckpoints());\n            if (!checkpoints) {\n                return;\n            }\n            const checkpoint = checkpoints[checkpoints.length - 1];\n            node.textContent = trans.__('Last Checkpoint: %1', Time.formatHuman(new Date(checkpoint.last_modified)));\n        };\n        if (notebookShell) {\n            notebookShell.currentChanged.connect(onChange);\n        }\n        new Poll({\n            auto: true,\n            factory: () => onChange(),\n            frequency: {\n                interval: 2000,\n                backoff: false,\n            },\n            standby: 'when-hidden',\n        });\n    },\n};\n/**\n * Add a command to close the browser tab when clicking on \"Close and Shut Down\"\n */\nconst closeTab = {\n    id: '@jupyter-notebook/notebook-extension:close-tab',\n    autoStart: true,\n    requires: [IMainMenu],\n    optional: [ITranslator],\n    activate: (app, menu, translator) => {\n        const { commands } = app;\n        translator = translator !== null && translator !== void 0 ? translator : nullTranslator;\n        const trans = translator.load('notebook');\n        const id = 'notebook:close-and-halt';\n        commands.addCommand(id, {\n            label: trans.__('Close and Shut Down Notebook'),\n            execute: async () => {\n                await commands.execute('notebook:close-and-shutdown');\n                window.close();\n            },\n        });\n        menu.fileMenu.closeAndCleaners.add({\n            id,\n            // use a small rank to it takes precedence over the default\n            // shut down action for the notebook\n            rank: 0,\n        });\n    },\n};\n/**\n * The kernel logo plugin.\n */\nconst kernelLogo = {\n    id: '@jupyter-notebook/notebook-extension:kernel-logo',\n    autoStart: true,\n    requires: [INotebookShell],\n    optional: [IToolbarWidgetRegistry],\n    activate: (app, shell, toolbarRegistry) => {\n        const { serviceManager } = app;\n        const node = document.createElement('div');\n        const img = document.createElement('img');\n        const onChange = async () => {\n            var _a, _b, _c, _d, _e;\n            const current = shell.currentWidget;\n            if (!(current instanceof NotebookPanel)) {\n                return;\n            }\n            if (!node.hasChildNodes()) {\n                node.appendChild(img);\n            }\n            await current.sessionContext.ready;\n            current.sessionContext.kernelChanged.disconnect(onChange);\n            current.sessionContext.kernelChanged.connect(onChange);\n            const name = (_c = (_b = (_a = current.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel) === null || _b === void 0 ? void 0 : _b.name) !== null && _c !== void 0 ? _c : '';\n            const spec = (_e = (_d = serviceManager.kernelspecs) === null || _d === void 0 ? void 0 : _d.specs) === null || _e === void 0 ? void 0 : _e.kernelspecs[name];\n            if (!spec) {\n                node.childNodes[0].remove();\n                return;\n            }\n            const kernelIconUrl = spec.resources['logo-64x64'];\n            if (!kernelIconUrl) {\n                node.childNodes[0].remove();\n                return;\n            }\n            img.src = kernelIconUrl;\n            img.title = spec.display_name;\n        };\n        if (toolbarRegistry) {\n            toolbarRegistry.addFactory('TopBar', 'kernelLogo', (toolbar) => {\n                const widget = new Widget({ node });\n                widget.addClass('jp-NotebookKernelLogo');\n                return widget;\n            });\n        }\n        app.started.then(() => {\n            shell.currentChanged.connect(onChange);\n        });\n    },\n};\n/**\n * A plugin to display the kernel status;\n */\nconst kernelStatus = {\n    id: '@jupyter-notebook/notebook-extension:kernel-status',\n    autoStart: true,\n    requires: [INotebookShell, ITranslator],\n    activate: (app, shell, translator) => {\n        const trans = translator.load('notebook');\n        const widget = new Widget();\n        widget.addClass('jp-NotebookKernelStatus');\n        app.shell.add(widget, 'menu', { rank: 10010 });\n        const removeClasses = () => {\n            widget.removeClass(KERNEL_STATUS_ERROR_CLASS);\n            widget.removeClass(KERNEL_STATUS_WARN_CLASS);\n            widget.removeClass(KERNEL_STATUS_INFO_CLASS);\n            widget.removeClass(KERNEL_STATUS_FADE_OUT_CLASS);\n        };\n        const onStatusChanged = (sessionContext) => {\n            const status = sessionContext.kernelDisplayStatus;\n            let text = `Kernel ${Text.titleCase(status)}`;\n            removeClasses();\n            switch (status) {\n                case 'busy':\n                case 'idle':\n                    text = '';\n                    widget.addClass(KERNEL_STATUS_FADE_OUT_CLASS);\n                    break;\n                case 'dead':\n                case 'terminating':\n                    widget.addClass(KERNEL_STATUS_ERROR_CLASS);\n                    break;\n                case 'unknown':\n                    widget.addClass(KERNEL_STATUS_WARN_CLASS);\n                    break;\n                default:\n                    widget.addClass(KERNEL_STATUS_INFO_CLASS);\n                    widget.addClass(KERNEL_STATUS_FADE_OUT_CLASS);\n                    break;\n            }\n            widget.node.textContent = trans.__(text);\n        };\n        const onChange = async () => {\n            const current = shell.currentWidget;\n            if (!(current instanceof NotebookPanel)) {\n                return;\n            }\n            const sessionContext = current.sessionContext;\n            sessionContext.statusChanged.connect(onStatusChanged);\n        };\n        shell.currentChanged.connect(onChange);\n    },\n};\n/**\n * A plugin to enable scrolling for outputs by default.\n * Mimic the logic from the classic notebook, as found here:\n * https://github.com/jupyter/notebook/blob/a9a31c096eeffe1bff4e9164c6a0442e0e13cdb3/notebook/static/notebook/js/outputarea.js#L96-L120\n */\nconst scrollOutput = {\n    id: '@jupyter-notebook/notebook-extension:scroll-output',\n    autoStart: true,\n    requires: [INotebookTracker],\n    optional: [ISettingRegistry],\n    activate: async (app, tracker, settingRegistry) => {\n        const autoScrollThreshold = 100;\n        let autoScrollOutputs = true;\n        // decide whether to scroll the output of the cell based on some heuristics\n        const autoScroll = (cell) => {\n            if (!autoScrollOutputs) {\n                // bail if disabled via the settings\n                return;\n            }\n            const { outputArea } = cell;\n            // respect cells with an explicit scrolled state\n            const scrolled = cell.model.getMetadata('scrolled');\n            if (scrolled !== undefined) {\n                return;\n            }\n            const { node } = outputArea;\n            const height = node.scrollHeight;\n            const fontSize = parseFloat(node.style.fontSize.replace('px', ''));\n            const lineHeight = (fontSize || 14) * 1.3;\n            // do not set via cell.outputScrolled = true, as this would\n            // otherwise synchronize the scrolled state to the notebook metadata\n            const scroll = height > lineHeight * autoScrollThreshold;\n            cell.toggleClass(SCROLLED_OUTPUTS_CLASS, scroll);\n        };\n        const handlers = {};\n        const setAutoScroll = (cell) => {\n            if (cell.model.type === 'code') {\n                const codeCell = cell;\n                const id = codeCell.model.id;\n                autoScroll(codeCell);\n                if (handlers[id]) {\n                    codeCell.outputArea.model.changed.disconnect(handlers[id]);\n                }\n                handlers[id] = () => autoScroll(codeCell);\n                codeCell.outputArea.model.changed.connect(handlers[id]);\n            }\n        };\n        tracker.widgetAdded.connect((sender, notebook) => {\n            var _a;\n            // when the notebook widget is created, process all the cells\n            notebook.sessionContext.ready.then(() => {\n                notebook.content.widgets.forEach(setAutoScroll);\n            });\n            (_a = notebook.model) === null || _a === void 0 ? void 0 : _a.cells.changed.connect((sender, args) => {\n                notebook.content.widgets.forEach(setAutoScroll);\n            });\n        });\n        if (settingRegistry) {\n            const loadSettings = settingRegistry.load(scrollOutput.id);\n            const updateSettings = (settings) => {\n                autoScrollOutputs = settings.get('autoScrollOutputs')\n                    .composite;\n            };\n            Promise.all([loadSettings, app.restored])\n                .then(([settings]) => {\n                updateSettings(settings);\n                settings.changed.connect((settings) => {\n                    updateSettings(settings);\n                });\n            })\n                .catch((reason) => {\n                console.error(reason.message);\n            });\n        }\n    },\n};\n/**\n * A plugin to add the NotebookTools to the side panel;\n */\nconst notebookToolsWidget = {\n    id: '@jupyter-notebook/notebook-extension:notebook-tools',\n    autoStart: true,\n    requires: [INotebookShell],\n    optional: [INotebookTools],\n    activate: (app, shell, notebookTools) => {\n        const onChange = async () => {\n            const current = shell.currentWidget;\n            if (!(current instanceof NotebookPanel)) {\n                return;\n            }\n            // Add the notebook tools in right area.\n            if (notebookTools) {\n                shell.add(notebookTools, 'right', { type: 'Property Inspector' });\n            }\n        };\n        shell.currentChanged.connect(onChange);\n    },\n};\n/**\n * A plugin to update the tab icon based on the kernel status.\n */\nconst tabIcon = {\n    id: '@jupyter-notebook/notebook-extension:tab-icon',\n    autoStart: true,\n    requires: [INotebookTracker],\n    activate: (app, tracker) => {\n        // the favicons are provided by Jupyter Server\n        const baseURL = PageConfig.getBaseUrl();\n        const notebookIcon = URLExt.join(baseURL, 'static/favicons/favicon-notebook.ico');\n        const busyIcon = URLExt.join(baseURL, 'static/favicons/favicon-busy-1.ico');\n        const updateBrowserFavicon = (status) => {\n            const link = document.querySelector(\"link[rel*='icon']\");\n            switch (status) {\n                case 'busy':\n                    link.href = busyIcon;\n                    break;\n                case 'idle':\n                    link.href = notebookIcon;\n                    break;\n            }\n        };\n        const onChange = async () => {\n            const current = tracker.currentWidget;\n            const sessionContext = current === null || current === void 0 ? void 0 : current.sessionContext;\n            if (!sessionContext) {\n                return;\n            }\n            sessionContext.statusChanged.connect(() => {\n                const status = sessionContext.kernelDisplayStatus;\n                updateBrowserFavicon(status);\n            });\n        };\n        tracker.currentChanged.connect(onChange);\n    },\n};\n/**\n * A plugin that adds a Trusted indicator to the menu area\n */\nconst trusted = {\n    id: '@jupyter-notebook/notebook-extension:trusted',\n    autoStart: true,\n    requires: [INotebookShell, ITranslator],\n    activate: (app, notebookShell, translator) => {\n        const onChange = async () => {\n            const current = notebookShell.currentWidget;\n            if (!(current instanceof NotebookPanel)) {\n                return;\n            }\n            const notebook = current.content;\n            await current.context.ready;\n            const widget = TrustedComponent.create({ notebook, translator });\n            notebookShell.add(widget, 'menu', {\n                rank: 11000,\n            });\n        };\n        notebookShell.currentChanged.connect(onChange);\n    },\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    checkpoints,\n    closeTab,\n    kernelLogo,\n    kernelStatus,\n    notebookToolsWidget,\n    scrollOutput,\n    tabIcon,\n    trusted,\n];\nexport default plugins;\n"],"names":["isTrusted","notebook","model","cells","Array","from","total","trusted","currentCell","type","TrustedButton","translator","trans","load","setTrusted","useState","checkTrust","v","useEffect","modelContentChanged","connect","activeCellChanged","disconnect","className","style","cursor","onClick","async","NotebookActions","trust","title","__","TrustedComponent","create","ReactWidget","KERNEL_STATUS_ERROR_CLASS","KERNEL_STATUS_WARN_CLASS","KERNEL_STATUS_INFO_CLASS","KERNEL_STATUS_FADE_OUT_CLASS","checkpoints","id","autoStart","requires","IDocumentManager","ITranslator","optional","INotebookShell","IToolbarWidgetRegistry","activate","app","docManager","notebookShell","toolbarRegistry","shell","node","document","createElement","addFactory","toolbar","widget","Widget","DOMUtils","createDomID","addClass","onChange","current","currentWidget","context","contextForWidget","fileChanged","listCheckpoints","checkpoint","length","textContent","Time","formatHuman","Date","last_modified","currentChanged","Poll","auto","factory","frequency","interval","backoff","standby","closeTab","IMainMenu","menu","commands","nullTranslator","addCommand","label","execute","window","close","fileMenu","closeAndCleaners","add","rank","kernelLogo","serviceManager","img","_a","_b","_c","_d","_e","NotebookPanel","hasChildNodes","appendChild","sessionContext","ready","kernelChanged","name","session","kernel","spec","kernelspecs","specs","childNodes","remove","kernelIconUrl","resources","src","display_name","started","then","kernelStatus","onStatusChanged","status","kernelDisplayStatus","text","Text","titleCase","removeClass","statusChanged","scrollOutput","INotebookTracker","ISettingRegistry","tracker","settingRegistry","autoScrollOutputs","autoScroll","cell","outputArea","undefined","getMetadata","scroll","scrollHeight","parseFloat","fontSize","replace","toggleClass","handlers","setAutoScroll","codeCell","changed","widgetAdded","sender","content","widgets","forEach","args","loadSettings","updateSettings","settings","get","composite","Promise","all","restored","catch","reason","console","error","message","notebookToolsWidget","INotebookTools","notebookTools","tabIcon","baseURL","PageConfig","getBaseUrl","notebookIcon","URLExt","join","busyIcon","link","querySelector","href","updateBrowserFavicon"],"sourceRoot":""}