{"version":3,"file":"766.d4ad04a.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/apputils-extension/lib/kernelstatus.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/apputils-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { IToolbarWidgetRegistry, ReactWidget } from '@jupyterlab/apputils';\nimport { ILoggerRegistry } from '@jupyterlab/logconsole';\nimport { Signal } from '@lumino/signaling';\nimport React, { useState, useEffect } from 'react';\n/**\n * Track the current execution status of a kernel.\n */\nexport class KernelStatus {\n    constructor() {\n        this._status = 'idle';\n        this._statusChanged = new Signal(this);\n    }\n    /**\n     * Current execution status of the kernel.\n     */\n    get status() {\n        return this._status;\n    }\n    /**\n     * Signal emitted when the kernel status changes.\n     */\n    get statusChanged() {\n        return this._statusChanged;\n    }\n    /**\n     * Set the current execution status.\n     *\n     * @param status - The new status\n     */\n    setStatus(status) {\n        if (this._status === status) {\n            return;\n        }\n        this._status = status;\n        this._statusChanged.emit(status);\n    }\n}\n/**\n * A React component for displaying kernel status.\n */\nfunction KernelStatusComponent(props) {\n    const [status, setStatus] = useState(props.model.status);\n    useEffect(() => {\n        const onChange = (_, newStatus) => {\n            setStatus(newStatus);\n        };\n        props.model.statusChanged.connect(onChange);\n        return () => {\n            props.model.statusChanged.disconnect(onChange);\n        };\n    }, [props.model]);\n    const isError = status === 'dead';\n    const isIdle = status === 'idle';\n    const isBusy = !isError && !isIdle;\n    // Return the appropriate icon and text based on status\n    return (React.createElement(\"div\", { className: 'jp-KernelStatus', onClick: props.onClick, style: { cursor: 'pointer' }, title: \"Click to open kernel logs\" },\n        React.createElement(\"div\", { className: \"jp-KernelStatus-icon-container\" },\n            isBusy && (React.createElement(\"div\", { className: \"jp-KernelStatus-spinner\" },\n                React.createElement(\"svg\", { viewBox: \"0 0 24 24\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\" },\n                    React.createElement(\"circle\", { className: \"jp-KernelStatus-spinner-track\", cx: \"12\", cy: \"12\", r: \"10\", stroke: \"currentColor\", strokeWidth: \"4\" }),\n                    React.createElement(\"path\", { className: \"jp-KernelStatus-spinner-path\", fill: \"currentColor\", d: \"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" })))),\n            isIdle && (React.createElement(\"div\", { className: \"jp-KernelStatus-success\" },\n                React.createElement(\"svg\", { viewBox: \"0 0 24 24\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\" },\n                    React.createElement(\"path\", { d: \"M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12Z\", stroke: \"currentColor\", strokeWidth: \"2\" }),\n                    React.createElement(\"path\", { d: \"M8 12L11 15L16 9\", stroke: \"currentColor\", strokeWidth: \"2\", strokeLinecap: \"round\", strokeLinejoin: \"round\" })))),\n            isError && (React.createElement(\"div\", { className: \"jp-KernelStatus-error\" },\n                React.createElement(\"svg\", { viewBox: \"0 0 24 24\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\" },\n                    React.createElement(\"path\", { d: \"M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12Z\", stroke: \"currentColor\", strokeWidth: \"2\" }),\n                    React.createElement(\"path\", { d: \"M15 9L9 15M9 9L15 15\", stroke: \"currentColor\", strokeWidth: \"2\", strokeLinecap: \"round\", strokeLinejoin: \"round\" })))))));\n}\n/**\n * A widget displaying the kernel status.\n */\nexport class KernelStatusWidget extends ReactWidget {\n    /**\n     * Construct a new kernel status widget.\n     */\n    constructor(options) {\n        super();\n        this._model = options.model;\n        this._onClick = options.onClick || (() => { });\n        this.addClass('jp-KernelStatus-widget');\n        this.addClass('jp-mod-highlighted');\n        // Make the widget clickable\n        this.node.style.cursor = 'pointer';\n    }\n    /**\n     * The kernel status model used by the widget.\n     */\n    get model() {\n        return this._model;\n    }\n    /**\n     * Render the kernel status widget.\n     */\n    render() {\n        return React.createElement(KernelStatusComponent, { model: this._model, onClick: this._onClick });\n    }\n}\n/**\n * A plugin that provides a kernel status model and widget.\n */\nexport const kernelStatusPlugin = {\n    id: '@jupyterlite/apputils-extension:kernel-status',\n    description: 'Kernel status indicator for JupyterLite',\n    autoStart: true,\n    optional: [IToolbarWidgetRegistry, ILoggerRegistry],\n    activate: (app, toolbarRegistry, loggerRegistry) => {\n        const { commands } = app;\n        // Register the widget with the toolbar registry\n        if (toolbarRegistry) {\n            // Add the kernel status widget to the notebook toolbar\n            toolbarRegistry.addFactory('Notebook', 'kernelStatus', (panel) => {\n                // Create the kernel status model\n                const kernelStatus = new KernelStatus();\n                const sessionContext = panel.sessionContext;\n                // Update status when kernel status changes\n                sessionContext.statusChanged.connect((_, status) => {\n                    kernelStatus.setStatus(status);\n                });\n                if (loggerRegistry) {\n                    const path = panel.context.path;\n                    const logger = loggerRegistry.getLogger(path);\n                    logger === null || logger === void 0 ? void 0 : logger.contentChanged.connect((_, args) => {\n                        const length = logger.outputAreaModel.length;\n                        if (args === 'append' && length > 0) {\n                            // get the latest message\n                            const latestMessage = logger.outputAreaModel.get(length - 1);\n                            const level = latestMessage.level;\n                            // rely on kernels properly reporting a critical state\n                            if (level === 'critical') {\n                                kernelStatus.setStatus('dead');\n                            }\n                            else if (level !== 'metadata') {\n                                // if new messages are logged, set the status back to busy\n                                kernelStatus.setStatus('busy');\n                            }\n                        }\n                    });\n                }\n                return new KernelStatusWidget({\n                    model: kernelStatus,\n                    onClick: () => {\n                        commands.execute('logconsole:open');\n                    },\n                });\n            });\n        }\n    },\n};\n//# sourceMappingURL=kernelstatus.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { JupyterLab, } from '@jupyterlab/application';\nimport { ILicensesClient, ICommandPalette, MainAreaWidget, WidgetTracker, } from '@jupyterlab/apputils';\nimport { IPluginManager, Plugins } from '@jupyterlab/pluginmanager';\nimport { ITranslator, ITranslatorConnector, nullTranslator, } from '@jupyterlab/translation';\nimport { extensionIcon } from '@jupyterlab/ui-components';\nimport { LiteLicensesClient, LitePluginListModel, LiteTranslatorConnector, } from '@jupyterlite/apputils';\nimport { kernelStatusPlugin } from './kernelstatus';\n/**\n * The command IDs used by the apputils extension.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    /**\n     * The command ID for opening the plugin manager.\n     */\n    CommandIDs.openPluginManager = 'apputils:open-plugin-manager';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The client for fetching licenses data.\n */\nconst licensesClient = {\n    id: '@jupyterlite/application-extension:licenses-client',\n    autoStart: true,\n    provides: ILicensesClient,\n    activate: (app) => {\n        return new LiteLicensesClient();\n    },\n};\n/**\n * A plugin for managing the status of other plugins.\n */\nexport const pluginManagerPlugin = {\n    id: '@jupyterlite/application-extension:plugin-manager',\n    description: 'Plugin manager viewer',\n    autoStart: true,\n    optional: [JupyterLab.IInfo, ITranslator, ICommandPalette],\n    provides: IPluginManager,\n    activate: (app, info, translator, palette) => {\n        var _a;\n        const availablePlugins = (_a = info === null || info === void 0 ? void 0 : info.availablePlugins) !== null && _a !== void 0 ? _a : [];\n        if (availablePlugins.length === 0) {\n            return {\n                open: async () => {\n                    // eslint-disable-next-line no-console\n                    console.info('The application does not contain information about plugins');\n                },\n            };\n        }\n        const { commands, serviceManager, shell } = app;\n        translator = translator !== null && translator !== void 0 ? translator : nullTranslator;\n        const trans = translator.load('jupyterlab');\n        const category = trans.__('Plugin Manager');\n        const widgetLabel = trans.__('Advanced Plugin Manager');\n        const namespace = 'plugin-manager';\n        const tracker = new WidgetTracker({\n            namespace: namespace,\n        });\n        function createWidget(args) {\n            const model = new LitePluginListModel({\n                ...args,\n                pluginData: {\n                    availablePlugins,\n                },\n                serverSettings: serviceManager.serverSettings,\n                extraLockedPlugins: [pluginManagerPlugin.id],\n                translator: translator !== null && translator !== void 0 ? translator : nullTranslator,\n            });\n            const content = new Plugins({\n                model,\n                translator: translator !== null && translator !== void 0 ? translator : nullTranslator,\n            });\n            content.title.label = widgetLabel;\n            content.title.icon = extensionIcon;\n            content.title.caption = trans.__('Plugin Manager');\n            const main = new MainAreaWidget({ content, reveal: model.ready });\n            return main;\n        }\n        commands.addCommand(CommandIDs.openPluginManager, {\n            label: widgetLabel,\n            execute: (args) => {\n                const main = createWidget(args);\n                shell.add(main, 'main', { type: 'Plugins' });\n                // add to tracker so it can be restored, and update when choices change\n                void tracker.add(main);\n                main.content.model.trackerDataChanged.connect(() => {\n                    void tracker.save(main);\n                });\n                return main;\n            },\n        });\n        if (palette) {\n            palette.addItem({ command: CommandIDs.openPluginManager, category });\n        }\n        return {\n            open: () => {\n                return app.commands.execute(CommandIDs.openPluginManager);\n            },\n        };\n    },\n};\n/**\n * The main translator connector plugin.\n */\nconst translatorConnector = {\n    id: '@jupyterlite/application-extension:translator-connector',\n    description: 'Provides the application translation connector.',\n    autoStart: true,\n    provides: ITranslatorConnector,\n    activate: (app) => {\n        return new LiteTranslatorConnector();\n    },\n};\nconst plugins = [\n    licensesClient,\n    pluginManagerPlugin,\n    translatorConnector,\n    kernelStatusPlugin,\n];\nexport default plugins;\n//# sourceMappingURL=index.js.map"],"names":["KernelStatus","constructor","this","_status","_statusChanged","Signal","status","statusChanged","setStatus","emit","KernelStatusComponent","props","useState","model","useEffect","onChange","_","newStatus","connect","disconnect","isError","isIdle","isBusy","className","onClick","style","cursor","title","viewBox","fill","xmlns","cx","cy","r","stroke","strokeWidth","d","strokeLinecap","strokeLinejoin","KernelStatusWidget","ReactWidget","options","super","_model","_onClick","addClass","node","render","kernelStatusPlugin","id","description","autoStart","optional","IToolbarWidgetRegistry","ILoggerRegistry","activate","app","toolbarRegistry","loggerRegistry","commands","addFactory","panel","kernelStatus","sessionContext","path","context","logger","getLogger","contentChanged","args","length","outputAreaModel","level","get","execute","CommandIDs","openPluginManager","licensesClient","provides","ILicensesClient","LiteLicensesClient","pluginManagerPlugin","JupyterLab","IInfo","ITranslator","ICommandPalette","IPluginManager","info","translator","palette","_a","availablePlugins","open","async","console","serviceManager","shell","trans","nullTranslator","load","category","__","widgetLabel","tracker","WidgetTracker","namespace","addCommand","label","main","LitePluginListModel","pluginData","serverSettings","extraLockedPlugins","content","Plugins","icon","extensionIcon","caption","MainAreaWidget","reveal","ready","createWidget","add","type","trackerDataChanged","save","addItem","command","translatorConnector","ITranslatorConnector","LiteTranslatorConnector"],"sourceRoot":""}